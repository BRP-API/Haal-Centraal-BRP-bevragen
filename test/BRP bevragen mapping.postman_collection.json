{
	"info": {
		"_postman_id": "7e39b978-2618-416c-8ae4-2500a75be276",
		"name": "BRP bevragen mapping",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "ingeschrevenpersonen",
			"item": [
				{
					"name": "persoon",
					"event": [
						{
							"script": {
								"id": "8dcf98b5-5281-4341-8344-2dfa51b435e5",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999993653\");",
									"});",
									"",
									"pm.test(\"naam.voornamen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.voornamen).to.eql(\"Suzanne\");",
									"});",
									"",
									"pm.test(\"naam.adellijkeTitel_predikaat\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.adellijkeTitel_predikaat).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"naam.voorvoegsel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.voorvoegsel).to.eql(\"van der\");",
									"});",
									"",
									"pm.test(\"naam.geslachtsnaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.geslachtsnaam).to.eql(\"Moulin\");",
									"});",
									"",
									"pm.test(\"naam.aanduidingNaamgebruik\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.aanduidingNaamgebruik).to.eql(\"eigen\");",
									"});",
									"",
									"pm.test(\"naam.inOnderzoek\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.datum).to.eql(\"1985-12-01\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.jaar).to.eql(1985);",
									"});",
									"",
									"pm.test(\"geboorte.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.maand).to.eql(12);",
									"});",
									"",
									"pm.test(\"geboorte.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.dag).to.eql(1);",
									"});",
									"",
									"pm.test.skip(\"geboorte.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.plaats.code).to.eql(\"0141\");",
									"});",
									"",
									"pm.test(\"geboorte.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.plaats.omschrijving).to.eql(\"Thann\");",
									"});",
									"",
									"pm.test(\"geboorte.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.land.code).to.eql(\"5001\");",
									"});",
									"",
									"pm.test(\"geboorte.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.land.omschrijving).to.eql(\"Canada\");",
									"});",
									"",
									"pm.test(\"geboorte.inOnderzoek\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geslachtsaanduiding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geslachtsaanduiding).to.eql(\"vrouw\");",
									"});",
									"",
									"pm.test.skip(\"registergemeenteAkte.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.registergemeenteAkte.code).to.eql(\"0772\");",
									"});",
									"",
									"pm.test.skip(\"aktenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.aktenummer).to.eql(\"1AA0280\");",
									"});",
									"",
									"pm.test(\"datumOpschortingBijhouding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.datumOpschortingBijhouding).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"indicatieOpschortingBijhouding Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.indicatieOpschortingBijhouding).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"redenOpschortingBijhouding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.redenOpschortingBijhouding).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"indicatieGeheim\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.indicatieGeheim).to.eql(\"0\");",
									"});",
									"",
									"pm.test.skip(\"datumEersteInschrijvingGBA.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.datumEersteInschrijvingGBA.datum).to.eql(\"2001-12-29\");",
									"});",
									"",
									"pm.test(\"inOnderzoek\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"nationaliteit Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].nationaliteit.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].nationaliteit.code).to.eql(\"0057\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].nationaliteit.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].nationaliteit.omschrijving).to.eql(\"Franse\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].redenOpname.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].redenOpname.code).to.eql(\"301\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].redenOpname.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].redenOpname.omschrijving).to.eql(\"Vaststelling bezit vreemde nationaliteit\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].redenOpname.soort\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].redenOpname.soort).to.eql(\"OP\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].aanduidingBijzonderNederlanderschap\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].aanduidingBijzonderNederlanderschap).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].inOnderzoek\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].datumIngangGeldigheid.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].datumIngangGeldigheid.datum).to.eql(\"2001-12-29\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].datumIngangGeldigheid.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].datumIngangGeldigheid.jaar).to.eql(2001);",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].datumIngangGeldigheid.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].datumIngangGeldigheid.maand).to.eql(12);",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].datumIngangGeldigheid.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].datumIngangGeldigheid.dag).to.eql(29);",
									"});",
									"",
									"pm.test(\"overlijden\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.gemeenteVanInschrijving.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.gemeenteVanInschrijving.code).to.eql(\"0599\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.gemeenteVanInschrijving.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.gemeenteVanInschrijving.omschrijving).to.eql(\"Rotterdam\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumInschrijvingInGemeente.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumInschrijvingInGemeente.datum).to.eql(\"2013-11-02\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumInschrijvingInGemeente.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumInschrijvingInGemeente.jaar).to.eql(2013);",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumInschrijvingInGemeente.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumInschrijvingInGemeente.maand).to.eql(11);",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumInschrijvingInGemeente.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumInschrijvingInGemeente.dag).to.eql(2);",
									"});",
									"",
									"pm.test(\"verblijfplaats.functieAdres\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.functieAdres).to.eql(\"woonadres\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.korteNaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.korteNaam).to.eql(\"Boterdiep\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.straat\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.straat).to.eql(\"Boterdiep\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.huisnummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.huisnummer).to.eql(31);",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.huisletter\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.huisletter).to.eql(\"a\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.huisnummertoevoeging\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.huisnummertoevoeging).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.aanduidingBijHuisnummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.aanduidingBijHuisnummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.postcode\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.postcode).to.eql(\"3077AW\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.woonplaats\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.woonplaats).to.eql(\"Rotterdam\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.adresseerbaarObjectIdentificatie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.adresseerbaarObjectIdentificatie).to.eql(\"0599010000208579\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.nummeraanduidingIdentificatie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.nummeraanduidingIdentificatie).to.eql(\"0599200000219678\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.locatiebeschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.locatiebeschrijving).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.verblijfBuitenland\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.verblijfBuitenland).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.landVanwaarIngeschreven\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.landVanwaarIngeschreven).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.indicatieVestigingVanuitBuitenland Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.indicatieVestigingVanuitBuitenland).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.inOnderzoek\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.datumIngangGeldigheid.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumIngangGeldigheid.datum).to.eql(\"2001-12-29\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.datumIngangGeldigheid.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumIngangGeldigheid.jaar).to.eql(2001);",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.datumIngangGeldigheid.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumIngangGeldigheid.maand).to.eql(12);",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.datumIngangGeldigheid.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumIngangGeldigheid.dag).to.eql(29);",
									"});",
									"",
									"pm.test(\"verblijfstitel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfstitel).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"gezagsverhouding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gezagsverhouding).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"kiesrecht\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.kiesrecht).to.be.an(\"undefined\");",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].self.href\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].self.href).to.match(/^.*\\/ingeschrevenpersonen\\/999993653$/);",
									"});",
									"",
									"pm.test(\"['_links'].ouders Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].ouders.length).to.eql(2);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].ouders[0].href\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].ouders[0].href).to.match(/^.*\\/ingeschrevenpersonen\\/999993653\\/ouders\\/.*$/);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].ouders[1].href\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].ouders[1].href).to.match(/^.*\\/ingeschrevenpersonen\\/999993653\\/ouders\\/.*$/);",
									"});",
									"",
									"pm.test(\"['_links'].partners\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].partners).not.to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"['_links'].nummeraanduidingen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].nummeraanduidingen).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"['_links'].kinderen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].kinderen).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"['_links'].reisdocumenten\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].reisdocumenten).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"registergemeenteAkte.naam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.registergemeenteAkte.naam).to.eql(\"Eindhoven\");",
									"});",
									"",
									"pm.test.skip(\"indicatieOpschortingBijhouding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.indicatieOpschortingBijhouding).to.eql(\"false\");",
									"});",
									"",
									"pm.test(\"vanuitVertrokkenOnbekendWaarheen Existence Match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.vanuitVertrokkenOnbekendWaarheen).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geheimhoudingPersoonsgegevens Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geheimhoudingPersoonsgegevens).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.indicatieVestigingVanuitBuitenland Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.indicatieVestigingVanuitBuitenland).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"indicatieOpschortingBijhouding Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.indicatieOpschortingBijhouding).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									"",
									"pm.test(\"api-version HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"versie\"));",
									"});",
									"",
									"pm.test(\"content-type HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.match(/^application\\/hal\\+json/);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].partnerhistorie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].partnerhistorie.href).to.match(/^.*\\/haalcentraal\\/api\\/brphistorie\\/ingeschrevenpersonen\\/999993653\\/partnerhistorie$/);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].verblijfstitelhistorie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].verblijfstitelhistorie.href).to.match(/^.*\\/haalcentraal\\/api\\/brphistorie\\/ingeschrevenpersonen\\/999993653\\/verblijfstitelhistorie$/);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].verblijfplaatshistorie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].verblijfplaatshistorie.href).to.match(/^.*\\/haalcentraal\\/api\\/brphistorie\\/ingeschrevenpersonen\\/999993653\\/verblijfplaatshistorie$/);",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumVestigingInNederland.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumVestigingInNederland.datum).to.eql(\"2013-11-02\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumVestigingInNederland.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumVestigingInNederland.jaar).to.eql(2013);",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumVestigingInNederland.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumVestigingInNederland.maand).to.eql(11);",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumVestigingInNederland.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumVestigingInNederland.dag).to.eql(2);",
									"});",
									"",
									"pm.test(\"verblijfplaats.indicatieVestigingVanuitBuitenland\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.indicatieVestigingVanuitBuitenland).to.eql(true);",
									"});",
									"",
									"pm.test(\"['_links'].partners[0].href\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].partners[0].href).to.eql(baseUrl + \"/ingeschrevenpersonen/999993653/partners/1\");",
									"});",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "58b7987d-c266-425e-9070-67164df0e80b",
									"key": "burgerservicenummer",
									"value": "999993653",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "persoon - (zoeken)",
					"event": [
						{
							"script": {
								"id": "a440f9ea-af5e-4597-be9c-c8c3efdbd35b",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].burgerservicenummer).to.eql(\"999993653\");",
									"});",
									"",
									"pm.test(\"naam.voornamen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].naam.voornamen).to.eql(\"Suzanne\");",
									"});",
									"",
									"pm.test(\"naam.adellijkeTitel_predikaat\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].naam.adellijkeTitel_predikaat).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"naam.voorvoegsel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].naam.voorvoegsel).to.eql(\"van der\");",
									"});",
									"",
									"pm.test(\"naam.geslachtsnaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].naam.geslachtsnaam).to.eql(\"Moulin\");",
									"});",
									"",
									"pm.test(\"naam.aanduidingNaamgebruik\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].naam.aanduidingNaamgebruik).to.eql(\"eigen\");",
									"});",
									"",
									"pm.test(\"naam.inOnderzoek\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].naam.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].geboorte.datum.datum).to.eql(\"1985-12-01\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].geboorte.datum.jaar).to.eql(1985);",
									"});",
									"",
									"pm.test(\"geboorte.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].geboorte.datum.maand).to.eql(12);",
									"});",
									"",
									"pm.test(\"geboorte.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].geboorte.datum.dag).to.eql(1);",
									"});",
									"",
									"pm.test.skip(\"geboorte.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].geboorte.plaats.code).to.eql(\"0141\");",
									"});",
									"",
									"pm.test(\"geboorte.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].geboorte.plaats.omschrijving).to.eql(\"Thann\");",
									"});",
									"",
									"pm.test(\"geboorte.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].geboorte.land.code).to.eql(\"5001\");",
									"});",
									"",
									"pm.test(\"geboorte.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].geboorte.land.omschrijving).to.eql(\"Canada\");",
									"});",
									"",
									"pm.test(\"geboorte.inOnderzoek\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].geboorte.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geslachtsaanduiding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].geslachtsaanduiding).to.eql(\"vrouw\");",
									"});",
									"",
									"pm.test.skip(\"registergemeenteAkte.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].registergemeenteAkte.code).to.eql(\"0772\");",
									"});",
									"",
									"pm.test.skip(\"aktenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].aktenummer).to.eql(\"1AA0280\");",
									"});",
									"",
									"pm.test(\"datumOpschortingBijhouding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].datumOpschortingBijhouding).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"indicatieOpschortingBijhouding Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].indicatieOpschortingBijhouding).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"redenOpschortingBijhouding Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].redenOpschortingBijhouding).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"datumEersteInschrijvingGBA.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].datumEersteInschrijvingGBA.datum).to.eql(\"2001-12-29\");",
									"});",
									"",
									"pm.test.skip(\"indicatieGeheim\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].indicatieGeheim).to.eql(\"0\");",
									"});",
									"",
									"pm.test(\"inOnderzoek\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"nationaliteit Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].nationaliteiten.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].nationaliteit.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].nationaliteiten[0].nationaliteit.code).to.eql(\"0057\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].nationaliteit.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].nationaliteiten[0].nationaliteit.omschrijving).not.to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].redenOpname.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].nationaliteiten[0].redenOpname.code).to.eql(\"301\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].redenOpname.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].nationaliteiten[0].redenOpname.omschrijving).to.eql(\"Vaststelling bezit vreemde nationaliteit\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].redenOpname.soort\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].nationaliteiten[0].redenOpname.soort).to.eql(\"OP\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].aanduidingBijzonderNederlanderschap\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].nationaliteiten[0].aanduidingBijzonderNederlanderschap).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].inOnderzoek\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].nationaliteiten[0].inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].datumIngangGeldigheid.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].nationaliteiten[0].datumIngangGeldigheid.datum).to.eql(\"2001-12-29\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].datumIngangGeldigheid.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].nationaliteiten[0].datumIngangGeldigheid.jaar).to.eql(2001);",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].datumIngangGeldigheid.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].nationaliteiten[0].datumIngangGeldigheid.maand).to.eql(12);",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].datumIngangGeldigheid.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].nationaliteiten[0].datumIngangGeldigheid.dag).to.eql(29);",
									"});",
									"",
									"pm.test(\"overlijden\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].overlijden).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.gemeenteVanInschrijving.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.gemeenteVanInschrijving.code).to.eql(\"0599\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.gemeenteVanInschrijving.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.gemeenteVanInschrijving.omschrijving).to.eql(\"Rotterdam\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumInschrijvingInGemeente.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.datumInschrijvingInGemeente.datum).to.eql(\"2013-11-02\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumInschrijvingInGemeente.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.datumInschrijvingInGemeente.jaar).to.eql(2013);",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumInschrijvingInGemeente.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.datumInschrijvingInGemeente.maand).to.eql(11);",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumInschrijvingInGemeente.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.datumInschrijvingInGemeente.dag).to.eql(2);",
									"});",
									"",
									"pm.test(\"verblijfplaats.functieAdres\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.functieAdres).to.eql(\"woonadres\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.korteNaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.korteNaam).to.eql(\"Boterdiep\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.straat\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.straat).to.eql(\"Boterdiep\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.huisnummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.huisnummer).to.eql(31);",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.huisletter\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.huisletter).to.eql(\"a\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.huisnummertoevoeging\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.huisnummertoevoeging).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.aanduidingBijHuisnummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.aanduidingBijHuisnummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.postcode\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.postcode).to.eql(\"3077AW\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.woonplaats\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.woonplaats).to.eql(\"Rotterdam\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.adresseerbaarObjectIdentificatie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.adresseerbaarObjectIdentificatie).to.eql(\"0599010000208579\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.nummeraanduidingIdentificatie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.nummeraanduidingIdentificatie).to.eql(\"0599200000219678\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.locatiebeschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.locatiebeschrijving).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.verblijfBuitenland\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.verblijfBuitenland).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.landVanwaarIngeschreven\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.landVanwaarIngeschreven).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumVestigingInNederland\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.datumVestigingInNederland).not.to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.indicatieVestigingVanuitBuitenland Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.indicatieVestigingVanuitBuitenland).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.inOnderzoek\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.datumIngangGeldigheid.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.datumIngangGeldigheid.datum).to.eql(\"2001-12-29\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.datumIngangGeldigheid.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.datumIngangGeldigheid.jaar).to.eql(2001);",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.datumIngangGeldigheid.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.datumIngangGeldigheid.maand).to.eql(12);",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.datumIngangGeldigheid.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.datumIngangGeldigheid.dag).to.eql(29);",
									"});",
									"",
									"pm.test(\"verblijfstitel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfstitel).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"gezagsverhouding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].gezagsverhouding).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"kiesrecht\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].kiesrecht).to.be.an(\"undefined\");",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].self.href\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0]['_links'].self.href).to.match(/^.*\\/ingeschrevenpersonen\\/999993653$/);",
									"});",
									"",
									"pm.test(\"['_links'].ouders Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0]['_links'].ouders.length).to.eql(2);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].ouders[0].href\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0]['_links'].ouders[0].href).to.match(/^.*\\/ingeschrevenpersonen\\/999993653\\/ouders\\/.*$/);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].ouders[1].href\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0]['_links'].ouders[1].href).to.match(/^.*\\/ingeschrevenpersonen\\/999993653\\/ouders\\/.*$/);",
									"});",
									"",
									"pm.test(\"['_links'].partners\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0]['_links'].partners).not.to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"['_links'].nummeraanduidingen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0]['_links'].nummeraanduidingen).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"['_links'].kinderen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0]['_links'].kinderen).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"['_links'].reisdocumenten\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0]['_links'].reisdocumenten).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"ingeschrevenpersonen Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen.length).to.eql(1);",
									"});",
									"",
									"pm.test.skip(\"registergemeenteAkte.naam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].registergemeenteAkte.naam).to.eql(\"Eindhoven\");",
									"});",
									"",
									"pm.test.skip(\"indicatieOpschortingBijhouding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].indicatieOpschortingBijhouding).to.eql(\"false\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.indicatieVestigingVanuitBuitenland\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.indicatieVestigingVanuitBuitenland).to.eql(true);",
									"});",
									"",
									"pm.test(\"vanuitVertrokkenOnbekendWaarheen Existence Match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.vanuitVertrokkenOnbekendWaarheen).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geheimhoudingPersoonsgegevens Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].geheimhoudingPersoonsgegevens).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"indicatieOpschortingBijhouding Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].indicatieOpschortingBijhouding).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.indicatieVestigingVanuitBuitenland Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0].verblijfplaats.indicatieVestigingVanuitBuitenland).not.to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									"",
									"pm.test.skip(\"api-version HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"apiversion\"));",
									"});",
									"",
									"pm.test(\"content-type HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.match(/^application\\/hal\\+json/);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].partnerhistorie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0]['_links'].partnerhistorie.href).to.match(/^.*\\/haalcentraal\\/api\\/brphistorie\\/ingeschrevenpersonen\\/999993653\\/partnerhistorie$/);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].verblijfstitelhistorie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0]['_links'].verblijfstitelhistorie.href).to.match(/^.*\\/haalcentraal\\/api\\/brphistorie\\/ingeschrevenpersonen\\/999993653\\/verblijfstitelhistorie$/);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].verblijfplaatshistorie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ingeschrevenpersonen[0]['_links'].verblijfplaatshistorie.href).to.match(/^.*\\/haalcentraal\\/api\\/brphistorie\\/ingeschrevenpersonen\\/999993653\\/verblijfplaatshistorie$/);",
									"});",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen?burgerservicenummer=999993653&geboorte__datum=1985-12-01&naam__geslachtsnaam=Moulin&verblijfplaats__gemeenteVanInschrijving=0599",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								},
								{
									"key": "burgerservicenummer",
									"value": "999993653",
									"description": "Uniek persoonsnummer.\n"
								},
								{
									"key": "geboorte__datum",
									"value": "1985-12-01",
									"description": "Je kunt alleen zoeken met een volledig geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/parametervalidatie.feature)\n"
								},
								{
									"key": "geboorte__plaats",
									"value": "",
									"description": "Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/case_insensitive.feature).**\n",
									"disabled": true
								},
								{
									"key": "geslachtsaanduiding",
									"value": "",
									"description": "Geeft aan dat de persoon een man of een vrouw is, of dat het geslacht (nog) onbekend is.\n",
									"disabled": true
								},
								{
									"key": "inclusiefOverledenPersonen",
									"value": "",
									"description": "Als je ook overleden personen in het antwoord wilt, geef dan de parameter inclusiefOverledenPersonen op met waarde True.  Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/overleden_personen.feature)\n",
									"disabled": true
								},
								{
									"key": "naam__geslachtsnaam",
									"value": "Moulin",
									"description": "De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/case_insensitive.feature).**\n"
								},
								{
									"key": "naam__voorvoegsel",
									"value": "",
									"description": "Deel van de geslachtsnaam dat vooraf gaat aan de rest van de geslachtsnaam. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/case_insensitive.feature).**\n",
									"disabled": true
								},
								{
									"key": "naam__voornamen",
									"value": "",
									"description": "De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/case_insensitive.feature).**\n",
									"disabled": true
								},
								{
									"key": "verblijfplaats__gemeenteVanInschrijving",
									"value": "0599",
									"description": "Een code die aangeeft in welke gemeente de persoon woont, of de laatste gemeente waar de persoon heeft gewoond, of de gemeente waar de persoon voor het eerst is ingeschreven.\n"
								},
								{
									"key": "verblijfplaats__huisletter",
									"value": "",
									"description": "Een toevoeging aan een huisnummer in de vorm van een letter die door de gemeente aan een adresseerbaar object is gegeven.\n",
									"disabled": true
								},
								{
									"key": "verblijfplaats__huisnummer",
									"value": "",
									"description": "Een nummer dat door de gemeente aan een adresseerbaar object is gegeven.\n",
									"disabled": true
								},
								{
									"key": "verblijfplaats__huisnummertoevoeging",
									"value": "",
									"description": "Een toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter die door de gemeente aan een adresseerbaar object is gegeven.\n",
									"disabled": true
								},
								{
									"key": "verblijfplaats__nummeraanduidingIdentificatie",
									"value": "",
									"description": "Unieke identificatie van een nummeraanduiding (en het bijbehorende adres) in de BAG.\n",
									"disabled": true
								},
								{
									"key": "verblijfplaats__straat",
									"value": "",
									"description": "Een naam die door de gemeente aan een openbare ruimte is gegeven. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/case_insensitive.feature).\n",
									"disabled": true
								},
								{
									"key": "verblijfplaats__postcode",
									"value": "",
									"description": "De door PostNL vastgestelde code die bij een bepaalde combinatie van een straatnaam en een huisnummer hoort.\n",
									"disabled": true
								}
							]
						},
						"description": "Zoek personen met één van de onderstaande verplichte combinaties van parameters en vul ze evt. aan met parameters uit de andere combinaties.\n\n\nDefault krijg je personen terug die nog in leven zijn, tenzij je de inclusiefoverledenpersonen=true opgeeft.\n\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature)\n\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature)\n\n\n1.  Persoon\n    -  geboorte__datum\n    -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)\n\n\n2.  Persoon\n    -  verblijfplaats__gemeenteVanInschrijving\n    -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)\n\n\n3.  Persoon\n    -  burgerservicenummer\n\n\n4.  Postcode\n    -  verblijfplaats__postcode\n    -  verblijfplaats__huisnummer\n\n\n5.  Straat\n    -  verblijfplaats__straat (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) )\n    -  verblijfplaats__gemeenteVanInschrijving\n    -  verblijfplaats__huisnummer\n\n\n6.  Adres\n    -  verblijfplaats__nummeraanduidingIdentificatie\n"
					},
					"response": []
				},
				{
					"name": "geëmigreerd",
					"event": [
						{
							"script": {
								"id": "d9b9d3c2-2a4b-44ce-9658-d44c62a41003",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"let burgerservicenummer = pm.variables.get(\"burgerservicenummer\")",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999993483\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.adellijkeTitel_predikaat.adellijkeTitel_predikaat).to.eql(\"GI\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.adellijkeTitel_predikaat.omschrijving).to.eql(\"Gravin\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat.soort\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.adellijkeTitel_predikaat.soort).to.eql(\"T\");",
									"});",
									"",
									"pm.test.skip(\"datumEersteInschrijvingGBA.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.datumEersteInschrijvingGBA.datum).to.eql(\"1994-05-01\");",
									"});",
									"",
									"pm.test(\"geheimhoudingPersoonsgegevens\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geheimhoudingPersoonsgegevens).to.eql(true);",
									"});",
									"",
									"pm.test(\"inOnderzoek\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"nationaliteit Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].nationaliteit.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].nationaliteit.code).to.eql(\"0001\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].nationaliteit.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].nationaliteit.omschrijving).to.eql(\"Nederlandse\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].redenOpname.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].redenOpname.code).to.eql(\"014\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].redenOpname.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].redenOpname.omschrijving).to.eql(\"Wet op het Nederlanderschap 1892, art. 8b\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].redenOpname.soort\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].redenOpname.soort).to.eql(\"VK\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].aanduidingBijzonderNederlanderschap\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].aanduidingBijzonderNederlanderschap).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].datumIngangGeldigheid.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].datumIngangGeldigheid.datum).to.eql(\"1965-06-12\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].datumIngangGeldigheid.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].datumIngangGeldigheid.jaar).to.eql(1965);",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].datumIngangGeldigheid.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].datumIngangGeldigheid.maand).to.eql(6);",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].datumIngangGeldigheid.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].datumIngangGeldigheid.dag).to.eql(12);",
									"});",
									"",
									"pm.test(\"verblijfplaats.gemeenteVanInschrijving.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.gemeenteVanInschrijving.code).to.eql(\"1999\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.gemeenteVanInschrijving.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.gemeenteVanInschrijving.omschrijving).to.match(/^(Register Niet Ingezetenen)|(Registratie Niet Ingezetenen \\(RNI\\))$/);",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumInschrijvingInGemeente.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumInschrijvingInGemeente.datum).to.eql(\"2014-07-02\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.landVanwaarIngeschreven\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.landVanwaarIngeschreven).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumVestigingInNederland\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumVestigingInNederland).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.indicatieVestigingVanuitBuitenland Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.indicatieVestigingVanuitBuitenland).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.inOnderzoek\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.datumIngangGeldigheid.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumIngangGeldigheid.datum).to.eql(\"2014-07-02\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.datumIngangGeldigheid.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumIngangGeldigheid.jaar).to.eql(2014);",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.datumIngangGeldigheid.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumIngangGeldigheid.maand).to.eql(7);",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.datumIngangGeldigheid.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumIngangGeldigheid.dag).to.eql(2);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].self.href\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].self.href).to.match(/^.*\\/ingeschrevenpersonen\\/999993483$/);",
									"});",
									"",
									"pm.test(\"['_links'].ouders Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].ouders.length).to.eql(2);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].ouders[0].href\", function () {",
									"    var jsonData = pm.response.json();",
									"    let regex = new RegExp(\"^\" + baseUrl + \"\\/ingeschrevenpersonen\\/\" + burgerservicenummer + \"\\/ouders\\/.*$\");",
									"    pm.expect(jsonData['_links'].ouders[0].href).to.match(regex);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].ouders[1].href\", function () {",
									"    var jsonData = pm.response.json();",
									"    let regex = new RegExp(\"^\" + baseUrl + \"\\/ingeschrevenpersonen\\/\" + burgerservicenummer + \"\\/ouders\\/.*$\");",
									"    pm.expect(jsonData['_links'].ouders[1].href).to.match(regex);",
									"});",
									"",
									"pm.test(\"['_links'].partners Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].partners).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"['_links'].nummeraanduidingen Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].nummeraanduidingen).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"['_links'].reisdocumenten Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].reisdocumenten).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"opschortingBijhouding.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.opschortingBijhouding.datum.datum).to.eql(\"2014-07-02\");",
									"});",
									"",
									"pm.test(\"opschortingBijhouding.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.opschortingBijhouding.datum.jaar).to.eql(2014);",
									"});",
									"",
									"pm.test(\"opschortingBijhouding.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.opschortingBijhouding.datum.maand).to.eql(7);",
									"});",
									"",
									"pm.test(\"opschortingBijhouding.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.opschortingBijhouding.datum.dag).to.eql(2);",
									"});",
									"",
									"pm.test.skip(\"indicatieOpschortingBijhouding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.indicatieOpschortingBijhouding).to.eql(\"true\");",
									"});",
									"",
									"pm.test(\"opschortingBijhouding.reden\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.opschortingBijhouding.reden).to.eql(\"emigratie\");",
									"});",
									"",
									"pm.test.skip(\"datumEersteInschrijvingGBA.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.datumEersteInschrijvingGBA.maand).to.eql(5);",
									"});",
									"",
									"pm.test.skip(\"datumEersteInschrijvingGBA.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.datumEersteInschrijvingGBA.dag).to.eql(1);",
									"});",
									"",
									"pm.test(\"verblijfplaats.functieAdres\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.functieAdres).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumAanvangAdreshouding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumAanvangAdreshouding).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.korteNaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.korteNaam).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.straat\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.straat).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.huisnummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.huisnummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.huisletter\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.huisletter).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.huisnummertoevoeging\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.huisnummertoevoeging).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.aanduidingBijHuisnummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.aanduidingBijHuisnummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.postcode\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.postcode).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.woonplaats\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.woonplaats).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.adresseerbaarObjectIdentificatie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.adresseerbaarObjectIdentificatie).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.nummeraanduidingIdentificatie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.locatiebeschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.locatiebeschrijving).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.land.code).to.eql(\"5010\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.land.omschrijving).to.eql(\"België\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.adresregel1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.adresregel1).to.eql(\"Rue du pomme 25\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.adresregel2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.adresregel2).to.eql(\"Bruxelles\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.adresregel3\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.adresregel3).to.eql(\"postcode 1000\");",
									"});",
									"",
									"pm.test(\"['_links'].kinderen Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].kinderen.length).to.eql(2);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].kinderen[0].href\", function () {",
									"    var jsonData = pm.response.json();",
									"    let regex = new RegExp(\"^\" + baseUrl + \"\\/ingeschrevenpersonen\\/\" + burgerservicenummer + \"\\/kinderen\\/.*$\");",
									"    pm.expect(jsonData['_links'].kinderen[0].href).to.match(regex);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].kinderen[1].href\", function () {",
									"    var jsonData = pm.response.json();",
									"    let regex = new RegExp(\"^\" + baseUrl + \"\\/ingeschrevenpersonen\\/\" + burgerservicenummer + \"\\/kinderen\\/.*$\");",
									"    pm.expect(jsonData['_links'].kinderen[1].href).to.match(regex);",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.indicatieVestigingVanuitBuitenland\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.indicatieVestigingVanuitBuitenland).to.eql(false);",
									"});",
									"",
									"pm.test(\"vanuitVertrokkenOnbekendWaarheen Existence Match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.vanuitVertrokkenOnbekendWaarheen).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"vertrokkenOnbekendWaarheen Existence Match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.vertrokkenOnbekendWaarheen).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].partnerhistorie\", function () {",
									"    var jsonData = pm.response.json();",
									"    let regex = new RegExp(\"\\/ingeschrevenpersonen\\/\" + burgerservicenummer + \"\\/partnerhistorie$\");",
									"    pm.expect(jsonData['_links'].partnerhistorie.href).to.match(regex);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].verblijfstitelhistorie\", function () {",
									"    var jsonData = pm.response.json();",
									"    let regex = new RegExp(\"\\/ingeschrevenpersonen\\/\" + burgerservicenummer + \"\\/verblijfstitelhistorie$\");",
									"    pm.expect(jsonData['_links'].verblijfstitelhistorie.href).to.match(regex);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].verblijfplaatshistorie\", function () {",
									"    var jsonData = pm.response.json();",
									"    let regex = new RegExp(\"\\/ingeschrevenpersonen\\/\" + burgerservicenummer + \"\\/verblijfplaatshistorie$\");",
									"    pm.expect(jsonData['_links'].verblijfplaatshistorie.href).to.match(regex);",
									"});",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "729d5dae-a4db-4401-89f7-5821a5beeb23",
									"key": "burgerservicenummer",
									"value": "999993483",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "meerdere nationaliteiten",
					"event": [
						{
							"script": {
								"id": "d61d4d0d-9994-4e44-acbd-9e2f88f045b6",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999990457\");",
									"});",
									"",
									"pm.test(\"naam.voornamen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.voornamen).to.eql(\"Mălïka'stes\");",
									"});",
									"",
									"pm.test(\"naam.voorvoegsel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.voorvoegsel).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"naam.geslachtsnaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.geslachtsnaam).to.eql(\"VųlkovāsoØse \");",
									"});",
									"",
									"pm.test(\"naam.aanduidingNaamgebruik\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.aanduidingNaamgebruik).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"geboorte\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geslachtsaanduiding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geslachtsaanduiding).to.eql(\"vrouw\");",
									"});",
									"",
									"pm.test.skip(\"datumEersteInschrijvingGBA.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.datumEersteInschrijvingGBA.datum).to.eql(\"2012-10-21\");",
									"});",
									"",
									"pm.test.skip(\"indicatieGeheim\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.indicatieGeheim).to.eql(\"0\");",
									"});",
									"",
									"pm.test(\"inOnderzoek\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"nationaliteit Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"nationaliteiten[0038].nationaliteit.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten.find(item => item.nationaliteit.code=='0038').nationaliteit.omschrijving).to.eql(\"Belarussische\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].aanduidingBijzonderNederlanderschap Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].aanduidingBijzonderNederlanderschap).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"overlijden\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.gemeenteVanInschrijving.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.gemeenteVanInschrijving.code).to.eql(\"1999\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.gemeenteVanInschrijving.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.gemeenteVanInschrijving.omschrijving).to.match(/^(Register Niet Ingezetenen)|(Registratie Niet Ingezetenen \\(RNI\\))$/);",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumInschrijvingInGemeente.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumInschrijvingInGemeente.datum).to.eql(\"2012-10-21\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumInschrijvingInGemeente.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumInschrijvingInGemeente.jaar).to.eql(2012);",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumInschrijvingInGemeente.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumInschrijvingInGemeente.maand).to.eql(10);",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumInschrijvingInGemeente.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumInschrijvingInGemeente.dag).to.eql(21);",
									"});",
									"",
									"pm.test(\"verblijfplaats.locatiebeschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.locatiebeschrijving).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.verblijfBuitenland\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.verblijfBuitenland).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.landVanwaarIngeschreven\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.landVanwaarIngeschreven).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumVestigingInNederland\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumVestigingInNederland).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.indicatieVestigingVanuitBuitenland\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.indicatieVestigingVanuitBuitenland).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.inOnderzoek\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.datumIngangGeldigheid.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumIngangGeldigheid.datum).to.eql(\"2012-10-21\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.datumIngangGeldigheid.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumIngangGeldigheid.jaar).to.eql(2012);",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.datumIngangGeldigheid.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumIngangGeldigheid.maand).to.eql(10);",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.datumIngangGeldigheid.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumIngangGeldigheid.dag).to.eql(21);",
									"});",
									"",
									"pm.test(\"verblijfstitel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfstitel).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"gezagsverhouding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gezagsverhouding).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"kiesrecht\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.kiesrecht).to.be.an(\"undefined\");",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].self.href\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].self.href).to.match(/^.*\\/ingeschrevenpersonen\\/999990457$/);",
									"});",
									"",
									"pm.test(\"['_links'].ouders Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].ouders).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"['_links'].partners\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].partners).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"['_links'].nummeraanduidingen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].nummeraanduidingen).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"['_links'].kinderen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].kinderen).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"['_links'].reisdocumenten\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].reisdocumenten).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.plaats.code).to.eql(\"0000\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.plaats.omschrijving).to.eql(\"Onbekend\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.land.code).to.eql(\"0000\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.land.omschrijving).to.eql(\"Onbekend\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0027].nationaliteit.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten.find(item => item.nationaliteit.code=='0027').nationaliteit.omschrijving).to.eql(\"Slowaakse\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].datumIngangGeldigheid Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].datumIngangGeldigheid).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[1].aanduidingBijzonderNederlanderschap Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[1].aanduidingBijzonderNederlanderschap).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[1].inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[1].inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[1].datumIngangGeldigheid Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[1].datumIngangGeldigheid).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.verblijfBuitenland\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.verblijfBuitenland).not.to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.adresregel1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.adresregel1).to.eql(\"Street # 34 & House # 11\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.adresregel2\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.adresregel2).to.eql(\"Baghdad\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.adresregel3\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.adresregel3).to.eql(\"Park Al-Sadoums, Hay Al-Nidhal 103\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.land.code).to.eql(\"5043\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.land.omschrijving).to.eql(\"Irak\");",
									"});",
									"",
									"pm.test(\"geheimhoudingPersoonsgegevens Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geheimhoudingPersoonsgegevens).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "d58b0004-9c75-423f-9408-2d75e60951f1",
									"key": "burgerservicenummer",
									"value": "999990457",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "nationaliteit en overlijden onjuist",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999992855\");",
									"});",
									"",
									"pm.test(\"nationaliteit Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten.length).to.eql(3);",
									"});",
									"",
									"pm.test(\"nationaliteiten[0001].nationaliteit.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten.find(item => item.nationaliteit.code=='0001').nationaliteit.omschrijving).to.eql(\"Nederlandse\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].aanduidingBijzonderNederlanderschap Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].aanduidingBijzonderNederlanderschap).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0001].datumIngangGeldigheid.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten.find(item => item.nationaliteit.code=='0001').datumIngangGeldigheid.datum).to.eql(\"2004-10-15\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0445].nationaliteit.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten.find(item => item.nationaliteit.code=='0445').nationaliteit.omschrijving).to.eql(\"Kiribatische\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0445].datumIngangGeldigheid.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten.find(item => item.nationaliteit.code=='0445').datumIngangGeldigheid.datum).to.eql(\"1961-12-30\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0446].nationaliteit.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten.find(item => item.nationaliteit.code=='0446').nationaliteit.omschrijving).to.eql(\"Tuvaluaanse\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0446].datumIngangGeldigheid.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten.find(item => item.nationaliteit.code=='0446').datumIngangGeldigheid.datum).to.eql(\"1961-12-30\");",
									"});",
									"",
									"pm.test(\"opschortingBijhouding.reden\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.opschortingBijhouding.reden).to.eql(\"pl_aangelegd_in_de_rni\");",
									"});",
									"",
									"pm.test(\"overlijden Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer?fields=nationaliteit,burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "nationaliteit,burgerservicenummer",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)"
								}
							],
							"variable": [
								{
									"id": "448b8b8e-0aeb-4fb7-a208-d02e46917b92",
									"key": "burgerservicenummer",
									"value": "999992855",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "nationaliteit + bijzonder Nederlanderschap + historische nationaliteit",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999992806\");",
									"});",
									"",
									"pm.test(\"nationaliteit Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"nationaliteiten[0334].nationaliteit.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten.find(item => item.nationaliteit.code=='0334').nationaliteit.omschrijving).to.eql(\"Saoedi-Arabische\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0334].aanduidingBijzonderNederlanderschap Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten.find(item => item.nationaliteit.code=='0334').aanduidingBijzonderNederlanderschap).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[].aanduidingBijzonderNederlanderschap\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten.find(item => item.aanduidingBijzonderNederlanderschap=='vastgesteld_niet_nederlander').aanduidingBijzonderNederlanderschap).to.eql(\"vastgesteld_niet_nederlander\");",
									"});",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "66636385-a428-4a48-9d9a-1396c44b401f",
									"key": "burgerservicenummer",
									"value": "999992806",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "geboorte onbekend",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"geboorte\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "65767d90-89bb-43a6-abc0-54de831c4007",
									"key": "burgerservicenummer",
									"value": "999994220",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "geboortedag onbekend",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999992351\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.datum).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geboorte.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.plaats.omschrijving).to.eql(\"Peking\");",
									"});",
									"",
									"pm.test(\"geboorte.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.plaats.code).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geboorte.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.land.code).to.eql(\"6022\");",
									"});",
									"",
									"pm.test(\"geboorte.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.land.omschrijving).to.eql(\"China\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.dag).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.jaar).to.eql(1978);",
									"});",
									"",
									"pm.test(\"geboorte.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.maand).to.eql(3);",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "f119d770-185b-4a43-80ee-762b40e8caa1",
									"key": "burgerservicenummer",
									"value": "999992351",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "geboortemaand onbekend",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999992806\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.datum).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.jaar).to.eql(1968);",
									"});",
									"",
									"pm.test(\"geboorte.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.maand).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.dag).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geboorte.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.plaats.omschrijving).to.eql(\"Jalālābād\");",
									"});",
									"",
									"pm.test(\"geboorte.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.plaats.code).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geboorte.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.land.code).to.eql(\"7020\");",
									"});",
									"",
									"pm.test(\"geboorte.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.land.omschrijving).to.eql(\"Pakistan\");",
									"});",
									"",
									"pm.test(\"verblijfstitel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfstitel).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"['_links'].partners\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].partners).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"naam.aanduidingNaamgebruik\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.aanduidingNaamgebruik).to.eql(\"V\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "bb48cb64-3a47-4ef0-884b-384d9770055c",
									"key": "burgerservicenummer",
									"value": "999992806",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "overleden",
					"event": [
						{
							"script": {
								"id": "89023ea4-d603-4d40-8e37-05c794a816b5",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999992077\");",
									"});",
									"",
									"pm.test.skip(\"indicatieOpschortingBijhouding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.indicatieOpschortingBijhouding).to.eql(\"true\");",
									"});",
									"",
									"pm.test(\"opschortingBijhouding.reden\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.opschortingBijhouding.reden).to.eql(\"overlijden\");",
									"});",
									"",
									"pm.test(\"overlijden.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.datum.datum).to.eql(\"2015-10-01\");",
									"});",
									"",
									"pm.test(\"overlijden.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.datum.jaar).to.eql(2015);",
									"});",
									"",
									"pm.test(\"overlijden.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.datum.maand).to.eql(10);",
									"});",
									"",
									"pm.test(\"overlijden.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.datum.dag).to.eql(1);",
									"});",
									"",
									"pm.test(\"overlijden.indicatieOverleden\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.indicatieOverleden).to.eql(true);",
									"});",
									"",
									"pm.test.skip(\"overlijden.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.plaats.code).to.eql(\"0599\");",
									"});",
									"",
									"pm.test.skip(\"overlijden.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.plaats.omschrijving).to.eql(\"Rotterdam\");",
									"});",
									"",
									"pm.test.skip(\"overlijden.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.land.code).to.eql(\"6030\");",
									"});",
									"",
									"pm.test.skip(\"overlijden.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.land.omschrijving).to.eql(\"Nederland\");",
									"});",
									"",
									"pm.test.skip(\"overlijden.registergemeenteAkte.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.registergemeenteAkte.code).to.eql(\"0599\");",
									"});",
									"",
									"pm.test.skip(\"overlijden.registergemeenteAkte.naam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.registergemeenteAkte.naam).to.eql(\"Rotterdam\");",
									"});",
									"",
									"pm.test.skip(\"overlijden.aktenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.aktenummer).to.eql(\"20A1005\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.adresregel1\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.adresregel1).to.eql(\"Edificio Porteæo Plaza II\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									"",
									"pm.test(\"['_links'].partnerhistorie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].partnerhistorie.href).to.match(/^.*\\/haalcentraal\\/api\\/brphistorie\\/ingeschrevenpersonen\\/999992077\\/partnerhistorie$/);",
									"});",
									"",
									"pm.test(\"['_links'].verblijfstitelhistorie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].verblijfstitelhistorie.href).to.match(/^.*\\/haalcentraal\\/api\\/brphistorie\\/ingeschrevenpersonen\\/999992077\\/verblijfstitelhistorie$/);",
									"});",
									"",
									"pm.test(\"['_links'].verblijfplaatshistorie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].verblijfplaatshistorie.href).to.match(/^.*\\/haalcentraal\\/api\\/brphistorie\\/ingeschrevenpersonen\\/999992077\\/verblijfplaatshistorie$/);",
									"});",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "d42dc9f1-b340-4d35-9e19-66f1dbeb747d",
									"key": "burgerservicenummer",
									"value": "999992077",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "overlijdensdag onbekend",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999993008\");",
									"});",
									"",
									"pm.test(\"overlijden.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.datum.jaar).to.eql(2008);",
									"});",
									"",
									"pm.test(\"overlijden.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.datum.maand).to.eql(7);",
									"});",
									"",
									"pm.test(\"overlijden.indicatieOverleden\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.indicatieOverleden).to.eql(true);",
									"});",
									"",
									"pm.test.skip(\"overlijden.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.plaats.code).to.eql(\"0000\");",
									"});",
									"",
									"pm.test.skip(\"overlijden.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.plaats.omschrijving).to.eql(\"Onbekend\");",
									"});",
									"",
									"pm.test.skip(\"overlijden.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.land.code).to.eql(\"5022\");",
									"});",
									"",
									"pm.test.skip(\"overlijden.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.land.omschrijving).to.eql(\"Marokko\");",
									"});",
									"",
									"pm.test.skip(\"overlijden.registergemeenteAkte.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.registergemeenteAkte.code).to.eql(\"0518\");",
									"});",
									"",
									"pm.test.skip(\"overlijden.registergemeenteAkte.naam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.registergemeenteAkte.naam).to.eql(\"'s-Gravenhage\");",
									"});",
									"",
									"pm.test.skip(\"overlijden.aktenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.aktenummer).to.eql(\"2VA9998\");",
									"});",
									"",
									"pm.test(\"overlijden.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.datum.datum).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"overlijden.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.datum.dag).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"overlijden.inOnderzoek\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "85c3ac1c-4ed8-4c34-81ea-ca0ddd94d1f4",
									"key": "burgerservicenummer",
									"value": "999993008",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "overlijdensdag en maand onbekend",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999991139\");",
									"});",
									"",
									"pm.test(\"overlijden.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.datum.jaar).to.eql(2008);",
									"});",
									"",
									"pm.test(\"overlijden.indicatieOverleden\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.indicatieOverleden).to.eql(true);",
									"});",
									"",
									"pm.test.skip(\"overlijden.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.plaats.code).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"overlijden.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.plaats.omschrijving).to.eql(\"Łódź\");",
									"});",
									"",
									"pm.test.skip(\"overlijden.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.land.code).to.eql(\"7028\");",
									"});",
									"",
									"pm.test.skip(\"overlijden.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.land.omschrijving).to.eql(\"Polen\");",
									"});",
									"",
									"pm.test.skip(\"overlijden.registergemeenteAkte.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.registergemeenteAkte.code).to.eql(\"0518\");",
									"});",
									"",
									"pm.test.skip(\"overlijden.registergemeenteAkte.naam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.registergemeenteAkte.naam).to.eql(\"'s-Gravenhage\");",
									"});",
									"",
									"pm.test.skip(\"overlijden.aktenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.aktenummer).to.eql(\"2VA9999\");",
									"});",
									"",
									"pm.test(\"overlijden.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.datum.datum).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"overlijden.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.datum.dag).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"overlijden.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.datum.maand).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"overlijden.inOnderzoek\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"naam.voornamen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.voornamen).to.eql(\"Gerardus Rudolfus Adrianus Petrus Josephus Eduardus\");",
									"});",
									"",
									"pm.test(\"naam.voorvoegsel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.voorvoegsel).to.eql(\"de\");",
									"});",
									"",
									"pm.test(\"naam.geslachtsnaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.geslachtsnaam).to.eql(\"Vries alias Prins de Lignac, Ridder van het Land van Ooit, Baron van Bobbejaansland, Graaf van het Verdronken land van Saeftinghe, Markies van het Verdronken land van Reimerswaal\");",
									"});",
									"",
									"pm.test(\"geslachtsaanduiding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geslachtsaanduiding).to.eql(\"man\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.functieAdres\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.functieAdres).to.eql(\"briefadres\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "1bd6a2f8-47e7-4dc8-b1e3-c508fb1b777c",
									"key": "burgerservicenummer",
									"value": "999991139",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "gecorrigeerd overlijden",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999994669\");",
									"});",
									"",
									"pm.test(\"overlijden\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.overlijden).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"naam.voornamen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.voornamen).to.eql(\"Żáïŀëñøŕ Åłéèç Đëļŧå\");",
									"});",
									"",
									"pm.test(\"naam.voorvoegsel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.voorvoegsel).to.eql(\"'S\");",
									"});",
									"",
									"pm.test(\"naam.geslachtsnaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.geslachtsnaam).to.eql(\"Streeveld\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat.adellijkeTitel_predikaat\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.adellijkeTitel_predikaat.adellijkeTitel_predikaat).to.eql(\"JV\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.adellijkeTitel_predikaat.omschrijving).to.eql(\"Jonkvrouw\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat.soort\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.adellijkeTitel_predikaat.soort).to.eql(\"P\");",
									"});",
									"",
									"pm.test.skip(\"naam.aanduidingNaamgebruik\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.aanduidingNaamgebruik).to.eql(\"N\");",
									"});",
									"",
									"pm.test(\"verblijfstitel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfstitel).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"gezagsverhouding Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gezagsverhouding).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"kiesrecht Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.kiesrecht).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"kiesrecht.aanduidingEuropeesKiesrecht\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.kiesrecht.aanduidingEuropeesKiesrecht).to.eql(\"1 (of niet want is niet actueel, zie #192)\");",
									"});",
									"",
									"pm.test.skip(\"kiesrecht.datumEuropeesKiesrecht.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.kiesrecht.datumEuropeesKiesrecht.datum).to.eql(\"2004-10-20\");",
									"});",
									"",
									"pm.test.skip(\"kiesrecht.datumEuropeesKiesrechtOnbekend\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.kiesrecht.datumEuropeesKiesrechtOnbekend).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"kiesrecht.einddatumUitsluitingEuropeesKiesrecht.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.kiesrecht.einddatumUitsluitingEuropeesKiesrecht.datum).to.eql(\"2007-01-01\");",
									"});",
									"",
									"pm.test.skip(\"kiesrecht.einddatumUitsluitingEuropeesKiesrechtOnbekend\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.kiesrecht.einddatumUitsluitingEuropeesKiesrechtOnbekend).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"kiesrecht.aanduidingUitsluitingKiesrecht\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.kiesrecht.aanduidingUitsluitingKiesrecht).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"kiesrecht.einddatumUitsluitingKiesrecht\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.kiesrecht.einddatumUitsluitingKiesrecht).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"kiesrecht.einddatumUitsluitingKiesrechtOnbekend\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.kiesrecht.einddatumUitsluitingKiesrechtOnbekend).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"kiesrecht.inOnderzoek\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.kiesrecht.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"['_links'].ouders\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].ouders.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"['_links'].partners\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].partners.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"['_links'].kinderen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].kinderen.length).to.eql(2);",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "748d6247-4a22-45ec-a406-c63081ce446b",
									"key": "burgerservicenummer",
									"value": "999994669",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "bijzonder Nederlanderschap",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"000009866\");",
									"});",
									"",
									"pm.test(\"nationaliteit Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].nationaliteit Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].nationaliteit).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].redenOpname.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].redenOpname.code).to.eql(\"310\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].redenOpname.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].redenOpname.omschrijving).to.eql(\"Vaststelling bijzonder Nederlanderschap\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].redenOpname.soort\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].redenOpname.soort).to.eql(\"OP\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].aanduidingBijzonderNederlanderschap\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].aanduidingBijzonderNederlanderschap).to.eql(\"behandeld_als_nederlander\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].datumIngangGeldigheid.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].datumIngangGeldigheid.datum).to.eql(\"1957-01-15\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].datumIngangGeldigheid.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].datumIngangGeldigheid.jaar).to.eql(1957);",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].datumIngangGeldigheid.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].datumIngangGeldigheid.maand).to.eql(1);",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].datumIngangGeldigheid.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].datumIngangGeldigheid.dag).to.eql(15);",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "0cae322f-6922-4981-99e0-52cee7740013",
									"key": "burgerservicenummer",
									"value": "000009866",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "vastgesteld niet-Nederlander",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999994748\");",
									"});",
									"",
									"pm.test(\"nationaliteit Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].nationaliteit Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].nationaliteit).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].redenOpname.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].redenOpname.code).to.eql(\"310\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].redenOpname.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].redenOpname.omschrijving).to.eql(\"Vaststelling bijzonder Nederlanderschap\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].redenOpname.soort\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].redenOpname.soort).to.eql(\"OP\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].aanduidingBijzonderNederlanderschap\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].aanduidingBijzonderNederlanderschap).to.eql(\"vastgesteld_niet_nederlander\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].datumIngangGeldigheid.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].datumIngangGeldigheid.datum).to.eql(\"1975-06-15\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].datumIngangGeldigheid.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].datumIngangGeldigheid.jaar).to.eql(1975);",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].datumIngangGeldigheid.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].datumIngangGeldigheid.maand).to.eql(6);",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].datumIngangGeldigheid.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].datumIngangGeldigheid.dag).to.eql(15);",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "eed2297c-2bd6-4570-a4c3-a021761c8f13",
									"key": "burgerservicenummer",
									"value": "999994748",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "huisnummertoevoeging",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999990160\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.gemeenteVanInschrijving.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.gemeenteVanInschrijving.code).to.eql(\"0344\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.gemeenteVanInschrijving.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.gemeenteVanInschrijving.omschrijving).to.eql(\"Utrecht\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumInschrijvingInGemeente.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumInschrijvingInGemeente.datum).to.eql(\"1975-01-01\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumInschrijvingInGemeente.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumInschrijvingInGemeente.jaar).to.eql(1975);",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumInschrijvingInGemeente.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumInschrijvingInGemeente.maand).to.eql(1);",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumInschrijvingInGemeente.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumInschrijvingInGemeente.dag).to.eql(1);",
									"});",
									"",
									"pm.test(\"verblijfplaats.functieAdres\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.functieAdres).to.eql(\"woonadres\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumAanvangAdreshouding.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumAanvangAdreshouding.datum).to.eql(\"2009-01-01\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumAanvangAdreshouding.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumAanvangAdreshouding.jaar).to.eql(2009);",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumAanvangAdreshouding.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumAanvangAdreshouding.maand).to.eql(1);",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumAanvangAdreshouding.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumAanvangAdreshouding.dag).to.eql(1);",
									"});",
									"",
									"pm.test(\"verblijfplaats.korteNaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.korteNaam).to.eql(\"St. Jacobsstraat\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.straat\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.straat).to.eql(\"St. Jacobsstraat\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.huisnummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.huisnummer).to.eql(400);",
									"});",
									"",
									"pm.test(\"verblijfplaats.huisletter\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.huisletter).to.eql(\"L\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.huisnummertoevoeging\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.huisnummertoevoeging).to.eql(\"Toe\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.aanduidingBijHuisnummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.aanduidingBijHuisnummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.postcode\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.postcode).to.eql(\"3511BT\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.woonplaats\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.woonplaats).to.eql(\"Utrecht\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.adresseerbaarObjectIdentificatie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.adresseerbaarObjectIdentificatie).to.eql(\"0344010020400001\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.nummeraanduidingIdentificatie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.nummeraanduidingIdentificatie).to.eql(\"0344200020400001\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.locatiebeschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.locatiebeschrijving).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.verblijfBuitenland\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.verblijfBuitenland).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.landVanwaarIngeschreven.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.landVanwaarIngeschreven.code).to.eql(\"5003\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.landVanwaarIngeschreven.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.landVanwaarIngeschreven.omschrijving).to.eql(\"Zwitserland\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumVestigingInNederland.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumVestigingInNederland.datum).to.eql(\"1975-01-01\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumVestigingInNederland.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumVestigingInNederland.jaar).to.eql(1975);",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumVestigingInNederland.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumVestigingInNederland.maand).to.eql(1);",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumVestigingInNederland.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumVestigingInNederland.dag).to.eql(1);",
									"});",
									"",
									"pm.test(\"verblijfplaats.indicatieVestigingVanuitBuitenland\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.indicatieVestigingVanuitBuitenland).to.eql(true);",
									"});",
									"",
									"pm.test(\"verblijfplaats.inOnderzoek\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.datumIngangGeldigheid.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumIngangGeldigheid.datum).to.eql(\"2011-10-24\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.datumIngangGeldigheid.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumIngangGeldigheid.jaar).to.eql(2011);",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.datumIngangGeldigheid.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumIngangGeldigheid.maand).to.eql(10);",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.datumIngangGeldigheid.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumIngangGeldigheid.dag).to.eql(24);",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "5bd7ad0b-be0b-4882-bbb4-49da86f9cbce",
									"key": "burgerservicenummer",
									"value": "999990160",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "aanduidingBijHuisnummer to",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999990482\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.korteNaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.korteNaam).to.eql(\"1e Exloërmond\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.straat\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.straat).to.eql(\"1e Exloërmond\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.straat Esitance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.straat).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.huisnummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.huisnummer).to.eql(3);",
									"});",
									"",
									"pm.test(\"verblijfplaats.huisletter\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.huisletter).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.huisnummertoevoeging\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.huisnummertoevoeging).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.aanduidingBijHuisnummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.aanduidingBijHuisnummer).to.eql(\"tegenover\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.postcode\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.postcode).to.eql(\"9573PA\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.woonplaats Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.woonplaats).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.adresseerbaarObjectIdentificatie Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.adresseerbaarObjectIdentificatie).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.nummeraanduidingIdentificatie Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.locatiebeschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.locatiebeschrijving).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.verblijfBuitenland\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.verblijfBuitenland).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									"",
									"pm.test(\"verblijfplaats.woonplaats\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.woonplaats).to.eql(\"Borger-Odoorn\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.adresseerbaarObjectIdentificatie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.adresseerbaarObjectIdentificatie).to.eql(\"1681010000000215\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.nummeraanduidingIdentificatie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.nummeraanduidingIdentificatie).to.eql(\"1681200000000215\");",
									"});",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "4ebbd70e-6c40-4618-9ac2-1a7fd6e8bd51",
									"key": "burgerservicenummer",
									"value": "999990482",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "aanduidingBijHuisnummer by",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999990913\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.korteNaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.korteNaam).to.eql(\"Graan voor Visch\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.straat\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.straat).to.eql(\"Graan voor Visch\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.straat existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.straat).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.huisnummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.huisnummer).to.eql(15201);",
									"});",
									"",
									"pm.test(\"verblijfplaats.huisletter\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.huisletter).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.huisnummertoevoeging\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.huisnummertoevoeging).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.aanduidingBijHuisnummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.aanduidingBijHuisnummer).to.eql(\"bij\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.postcode\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.postcode).to.eql(\"2132EA\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.woonplaats existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.woonplaats).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.adresseerbaarObjectIdentificatie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.adresseerbaarObjectIdentificatie).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.nummeraanduidingIdentificatie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.locatiebeschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.locatiebeschrijving).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.verblijfBuitenland\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.verblijfBuitenland).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									"",
									"pm.test(\"verblijfplaats.woonplaats\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.woonplaats).to.eql(\"Haarlemmermeer\");",
									"});",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "9c4b51b6-2c22-4a17-a3bb-e4bcc9f90a9a",
									"key": "burgerservicenummer",
									"value": "999990913",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "locatiebeschrijving",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"000009921\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.gemeenteVanInschrijving.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.gemeenteVanInschrijving.code).to.eql(\"0518\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.gemeenteVanInschrijving.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.gemeenteVanInschrijving.omschrijving).to.eql(\"'s-Gravenhage\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumInschrijvingInGemeente.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumInschrijvingInGemeente.datum).to.eql(\"1989-03-01\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.functieAdres\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.functieAdres).to.eql(\"woonadres\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumAanvangAdreshouding.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumAanvangAdreshouding.datum).to.eql(\"2000-03-10\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.korteNaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.korteNaam).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.straat\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.straat).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.huisnummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.huisnummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.huisletter\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.huisletter).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.huisnummertoevoeging\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.huisnummertoevoeging).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.aanduidingBijHuisnummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.aanduidingBijHuisnummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.postcode\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.postcode).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.woonplaats Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.woonplaats).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.adresseerbaarObjectIdentificatie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.adresseerbaarObjectIdentificatie).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.nummeraanduidingIdentificatie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.locatiebeschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.locatiebeschrijving).to.eql(\"Woonboot in de Grote Sloot\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.verblijfBuitenland\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.verblijfBuitenland).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									"",
									"pm.test(\"verblijfplaats.woonplaats\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.woonplaats).to.eql(\"'s-Gravenhage\");",
									"});",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "afa8643d-23e2-4e86-99bf-5c3e4bb528e5",
									"key": "burgerservicenummer",
									"value": "000009921",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "BAG identificatie onbekend",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999991802\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.korteNaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.korteNaam).to.eql(\"Zomerdijkstrtaat\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.straat\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.straat).to.eql(\"St. Jacobsstraat\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.huisnummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.huisnummer).to.eql(17);",
									"});",
									"",
									"pm.test(\"verblijfplaats.postcode\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.postcode).to.eql(\"1079WZ\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.woonplaats\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.woonplaats).to.eql(\"Amsterdam\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.identificatiecodeVerblijfplaats\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.identificatiecodeVerblijfplaats).to.eql(\"0000000000000000\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.nummeraanduidingIdentificatie\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.nummeraanduidingIdentificatie).to.eql(\"0000000000000000\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.adresseerbaarObjectIdentificatie Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.adresseerbaarObjectIdentificatie).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.nummeraanduidingIdentificatie Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.nummeraanduidingIdentificatie).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "b8f231eb-de96-4380-a241-1eda528461c4",
									"key": "burgerservicenummer",
									"value": "999991802",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "vertrokkenOnbekendWaarheen",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"opschortingBijhouding.reden\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['opschortingBijhouding']['reden']).to.eql(\"ministerieel_besluit\");",
									"});",
									"",
									"pm.test(\"vertrokkenOnbekendWaarheen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.vertrokkenOnbekendWaarheen).to.eql(true);",
									"});",
									"",
									"pm.test(\"landVanwaarIngeschreven Existence Match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.landVanwaarIngeschreven).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"vanuitVertrokkenOnbekendWaarheen Existence Match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.vanuitVertrokkenOnbekendWaarheen).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"land Existence Match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.land).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "180fe537-6500-4808-8802-2f45a75a17d3",
									"key": "burgerservicenummer",
									"value": "999993586",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "opschorting onbekende dag en maand",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999992338\");",
									"});",
									"",
									"pm.test(\"opschortingBijhouding.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.opschortingBijhouding.datum.jaar).to.eql(1996);",
									"});",
									"",
									"pm.test(\"opschortingBijhouding.datum.datum Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.opschortingBijhouding.datum.datum).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"opschortingBijhouding.datum.maand Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.opschortingBijhouding.datum.maand).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"opschortingBijhouding.datum.dag Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.opschortingBijhouding.datum.dag).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"indicatieOpschortingBijhouding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.indicatieOpschortingBijhouding).to.eql(\"true\");",
									"});",
									"",
									"pm.test(\"opschortingBijhouding.reden\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.opschortingBijhouding.reden).to.eql(\"emigratie\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "3bb7c81b-e5ce-4be6-ae39-1645c4979ec1",
									"key": "burgerservicenummer",
									"value": "999992338",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "geen nationaliteit",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999990883\");",
									"});",
									"",
									"pm.test(\"nationaliteit Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteit).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "ce59e56f-5599-4d1f-b1e5-9a77614d770a",
									"key": "burgerservicenummer",
									"value": "999990883",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "verblijfstitel",
					"event": [
						{
							"script": {
								"id": "490ee058-0867-435e-8d3a-370460e14fa4",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999995017\");",
									"});",
									"",
									"pm.test(\"verblijfstitel.aanduiding.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfstitel.aanduiding.code).to.eql(\"27\");",
									"});",
									"",
									"pm.test(\"verblijfstitel.aanduiding.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    //pm.expect(jsonData.verblijfstitel.aanduiding.omschrijving).to.match(/^Vw 2000 art. 8.*arbeid vrij$/);",
									"    pm.expect(jsonData.verblijfstitel.aanduiding.omschrijving).to.eql(\"Vw 2000 art. 8, sub d, verg. asiel onbep. tijd of langdurig ingez., arbeid vrij\")",
									"});",
									"",
									"pm.test(\"verblijfstitel.datumEinde\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfstitel.datumEinde).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"verblijfstitel.datumIngang.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfstitel.datumIngang.datum).to.eql(\"2001-09-01\");",
									"});",
									"",
									"pm.test(\"verblijfstitel.datumIngang.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfstitel.datumIngang.jaar).to.eql(2001);",
									"});",
									"",
									"pm.test(\"verblijfstitel.datumIngang.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfstitel.datumIngang.maand).to.eql(9);",
									"});",
									"",
									"pm.test(\"verblijfstitel.datumIngang.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfstitel.datumIngang.dag).to.eql(1);",
									"});",
									"",
									"pm.test(\"verblijfstitel.inOnderzoek\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfstitel.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "5fe24e8a-9865-4f58-a36e-680e44943968",
									"key": "burgerservicenummer",
									"value": "999995017",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "gezag minderjarige",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999990408\");",
									"});",
									"",
									"pm.test(\"gezagsverhouding.indicatieGezagMinderjarige\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gezagsverhouding.indicatieGezagMinderjarige).to.eql(\"ouder2\");",
									"});",
									"",
									"pm.test(\"gezagsverhouding.indicatieCurateleRegister Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gezagsverhouding.indicatieCurateleRegister).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"gezagsverhouding.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gezagsverhouding.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "2e064543-bf3d-4cbf-894e-ec9c53d3825a",
									"key": "burgerservicenummer",
									"value": "999990408",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "gezag bij derde",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999991711\");",
									"});",
									"",
									"pm.test(\"gezagsverhouding.indicatieGezagMinderjarige\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gezagsverhouding.indicatieGezagMinderjarige).to.eql(\"derden\");",
									"});",
									"",
									"pm.test(\"gezagsverhouding.indicatieCurateleRegister Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gezagsverhouding.indicatieCurateleRegister).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"gezagsverhouding.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gezagsverhouding.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "0791f341-db12-4698-9696-ee83e20eddc3",
									"key": "burgerservicenummer",
									"value": "999991711",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "gezag bij ouder 1",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999992089\");",
									"});",
									"",
									"pm.test(\"gezagsverhouding.indicatieGezagMinderjarige\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gezagsverhouding.indicatieGezagMinderjarige).to.eql(\"ouder1\");",
									"});",
									"",
									"pm.test(\"gezagsverhouding.indicatieCurateleRegister Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gezagsverhouding.indicatieCurateleRegister).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"gezagsverhouding.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gezagsverhouding.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "dc6f4ef7-6b57-4f05-8f52-9d1665aa42dc",
									"key": "burgerservicenummer",
									"value": "999992089",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "gezag beëindigd",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999992132\");",
									"});",
									"",
									"pm.test.skip(\"gezagsverhouding.indicatieGezagMinderjarige\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gezagsverhouding.indicatieGezagMinderjarige).to.eql(\"D\");",
									"});",
									"",
									"pm.test(\"gezagsverhouding Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gezagsverhouding).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "48107fca-847c-4aa3-bccf-bcd3a2de0b85",
									"key": "burgerservicenummer",
									"value": "999992132",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "curatele",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999993690\");",
									"});",
									"",
									"pm.test(\"gezagsverhouding.indicatieGezagMinderjarige Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gezagsverhouding.indicatieGezagMinderjarige).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"gezagsverhouding.indicatieCurateleRegister\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gezagsverhouding.indicatieCurateleRegister).to.eql(true);",
									"});",
									"",
									"pm.test(\"gezagsverhouding.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.gezagsverhouding.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "2a695aaf-5798-4921-a22c-a4ada7c4c470",
									"key": "burgerservicenummer",
									"value": "999993690",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "kind onjuist",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(pm.variables.get(\"burgerservicenummer\"));",
									"});",
									"",
									"pm.test(\"['_links'].kinderen Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].kinderen).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "fe9b277c-8979-4b12-808a-e15f7d3fc935",
									"key": "burgerservicenummer",
									"value": "999991449",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "voorloopnul(len)",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"000009921\");",
									"});",
									"",
									"pm.test(\"geboorte.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.plaats.code).to.eql(\"0947\");",
									"});",
									"",
									"pm.test(\"geboorte.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.plaats.omschrijving).to.eql(\"Neer\");",
									"});",
									"",
									"pm.test.skip(\"registergemeenteAkte.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.registergemeenteAkte.code).to.eql(\"0599\");",
									"});",
									"",
									"pm.test.skip(\"registergemeenteAkte.naam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.registergemeenteAkte.naam).to.eql(\"Rotterdam\");",
									"});",
									"",
									"pm.test.skip(\"aktenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.aktenummer).to.eql(\"1 H0042\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].nationaliteit.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].nationaliteit.code).to.eql(\"0001\");",
									"});",
									"",
									"pm.test(\"nationaliteiten[0].nationaliteit.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].nationaliteit.omschrijving).to.eql(\"Nederlandse\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].redenOpname.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].redenOpname.code).to.eql(\"001\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].redenOpname.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].redenOpname.omschrijving).to.eql(\"Wet op het Nederlanderschap 1892, art.1, lid 1a\");",
									"});",
									"",
									"pm.test.skip(\"nationaliteiten[0].redenOpname.soort\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.nationaliteiten[0].redenOpname.soort).to.eql(\"VK\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.gemeenteVanInschrijving.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.gemeenteVanInschrijving.code).to.eql(\"0518\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.gemeenteVanInschrijving.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.gemeenteVanInschrijving.omschrijving).to.eql(\"'s-Gravenhage\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "a4178da5-d07f-4d2b-8e16-b03420d81172",
									"key": "burgerservicenummer",
									"value": "000009921",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "verblijfplaats datums",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999993872\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumInschrijvingInGemeente\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumInschrijvingInGemeente.datum).to.eql(\"1991-02-01\");",
									"});",
									"",
									"pm.test(\"verblijfplaats.datumAanvangAdreshouding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumAanvangAdreshouding.datum).to.eql(\"1998-04-01\");",
									"});",
									"",
									"pm.test.skip(\"verblijfplaats.datumIngangGeldigheid\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.verblijfplaats.datumIngangGeldigheid.datum).to.eql(\"2011-02-05\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).",
									"disabled": true
								},
								{
									"key": "fields",
									"value": "",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)",
									"disabled": true
								}
							],
							"variable": [
								{
									"id": "c57ace21-a597-4036-8f13-33b261e2efc1",
									"key": "burgerservicenummer",
									"value": "999993872",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "ouders",
			"item": [
				{
					"name": "niet-ingeschreven ouder",
					"event": [
						{
							"script": {
								"id": "a42a408c-a157-455b-8cdf-f3a1861c640b",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'] (collection)\", function () {",
									"    var jsonData = pm.response.json();",
									"    let regex = new RegExp(\"^\" + baseUrl + \"\\/ingeschrevenpersonen\\/\" + pm.variables.get(\"burgerservicenummer\") + \"\\/ouders$\");",
									"    pm.expect(jsonData['_links'].self.href).to.match(regex);",
									"});",
									"",
									"pm.test(\"ouders Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"ouder1.burgerservicenummer Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').burgerservicenummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"ouder1.naam.voornamen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').naam.voornamen).to.eql(\"Wilhelmina\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.naam.adellijkeTitel_predikaat.adellijkeTitel_predikaat\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').naam.adellijkeTitel_predikaat.adellijkeTitel_predikaat).to.eql(\"BS\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.naam.adellijkeTitel_predikaat.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').naam.adellijkeTitel_predikaat.omschrijving).to.eql(\"Barones\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.naam.adellijkeTitel_predikaat.soort\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').naam.adellijkeTitel_predikaat.soort).to.eql(\"T\");",
									"});",
									"",
									"pm.test(\"ouder1.naam.voorvoegsel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').naam.voorvoegsel).to.eql(\"von\");",
									"});",
									"",
									"pm.test(\"ouder1.naam.geslachtsnaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').naam.geslachtsnaam).to.eql(\"Schonhof\");",
									"});",
									"",
									"pm.test(\"ouder1.naam.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').naam.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"ouder1.geboorte.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').geboorte.datum.datum).to.eql(\"1934-07-12\");",
									"});",
									"",
									"pm.test(\"ouder1.geboorte.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').geboorte.datum.jaar).to.eql(1934);",
									"});",
									"",
									"pm.test(\"ouder1.geboorte.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').geboorte.datum.maand).to.eql(7);",
									"});",
									"",
									"pm.test(\"ouder1.geboorte.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').geboorte.datum.dag).to.eql(12);",
									"});",
									"",
									"pm.test(\"ouder1.geboorte.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').geboorte.plaats.code).to.eql(\"0518\");",
									"});",
									"",
									"pm.test(\"ouder1.geboorte.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').geboorte.plaats.omschrijving).to.eql(\"'s-Gravenhage\");",
									"});",
									"",
									"pm.test(\"ouder1.geboorte.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').geboorte.land.code).to.eql(\"6030\");",
									"});",
									"",
									"pm.test(\"ouder1.geboorte.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').geboorte.land.omschrijving).to.eql(\"Nederland\");",
									"});",
									"",
									"pm.test(\"ouder1.geboorte.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').geboorte.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.geslachtsaanduiding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').geslachtsaanduiding).to.eql(\"vrouw\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.datumAanvangFamilierechtelijkeBetrekking.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').datumIngangFamilierechtelijkeBetrekking.datum).to.eql(\"1954-04-21\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.datumAanvangFamilierechtelijkeBetrekking.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').datumIngangFamilierechtelijkeBetrekking.jaar).to.eql(1954);",
									"});",
									"",
									"pm.test.skip(\"ouder1.datumAanvangFamilierechtelijkeBetrekking.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').datumIngangFamilierechtelijkeBetrekking.maand).to.eql(4);",
									"});",
									"",
									"pm.test.skip(\"ouder1.datumAanvangFamilierechtelijkeBetrekking.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').datumIngangFamilierechtelijkeBetrekking.dag).to.eql(21);",
									"});",
									"",
									"pm.test.skip(\"ouder1.registergemeenteAkte Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').registergemeenteAkte).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.aktenummer Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').aktenummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"ouder1.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"ouder1['_links'].self\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1')['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/ouders/1\");",
									"});",
									"",
									"pm.test(\"ouder1['_links'].ingeschrevenPersoon Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1')['_links'].ingeschrevenPersoon).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"ouder2.burgerservicenummer Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').burgerservicenummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"ouder2.naam.voornamen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').naam.voornamen).to.eql(\"Marcelius Gerardus Franciscus Michaelis Vincentius\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.naam.adellijkeTitel_predikaat.adellijkeTitel_predikaat\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').naam.adellijkeTitel_predikaat.adellijkeTitel_predikaat).to.eql(\"B\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.naam.adellijkeTitel_predikaat.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').naam.adellijkeTitel_predikaat.omschrijving).to.eql(\"Baron\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.naam.adellijkeTitel_predikaat.soort\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').naam.adellijkeTitel_predikaat.soort).to.eql(\"T\");",
									"});",
									"",
									"pm.test(\"ouder2.naam.voorvoegsel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').naam.voorvoegsel).to.eql(\"van\");",
									"});",
									"",
									"pm.test(\"ouder2.naam.geslachtsnaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').naam.geslachtsnaam).to.eql(\"Brest naar Kempen\");",
									"});",
									"",
									"pm.test(\"ouder2.naam.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').naam.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"ouder2.geboorte.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').geboorte.datum.datum).to.eql(\"1935-01-24\");",
									"});",
									"",
									"pm.test(\"ouder2.geboorte.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').geboorte.datum.jaar).to.eql(1935);",
									"});",
									"",
									"pm.test(\"ouder2.geboorte.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').geboorte.datum.maand).to.eql(1);",
									"});",
									"",
									"pm.test(\"ouder2.geboorte.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').geboorte.datum.dag).to.eql(24);",
									"});",
									"",
									"pm.test(\"ouder2.geboorte.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').geboorte.plaats.code).to.eql(\"0518\");",
									"});",
									"",
									"pm.test(\"ouder2.geboorte.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').geboorte.plaats.omschrijving).to.eql(\"'s-Gravenhage\");",
									"});",
									"",
									"pm.test(\"ouder2.geboorte.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').geboorte.land.code).to.eql(\"6030\");",
									"});",
									"",
									"pm.test(\"ouder2.geboorte.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').geboorte.land.omschrijving).to.eql(\"Nederland\");",
									"});",
									"",
									"pm.test(\"ouder2.geboorte.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').geboorte.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.geslachtsaanduiding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').geslachtsaanduiding).to.eql(\"man\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.datumAanvangFamilierechtelijkeBetrekking.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').datumIngangFamilierechtelijkeBetrekking.datum).to.eql(\"1954-04-21\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.datumAanvangFamilierechtelijkeBetrekking.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').datumIngangFamilierechtelijkeBetrekking.jaar).to.eql(1954);",
									"});",
									"",
									"pm.test.skip(\"ouder2.datumAanvangFamilierechtelijkeBetrekking.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').datumIngangFamilierechtelijkeBetrekking.maand).to.eql(4);",
									"});",
									"",
									"pm.test.skip(\"ouder2.datumAanvangFamilierechtelijkeBetrekking.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').datumIngangFamilierechtelijkeBetrekking.dag).to.eql(21);",
									"});",
									"",
									"pm.test.skip(\"ouder2.registergemeenteAkte Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').registergemeenteAkte).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.aktenummer Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').aktenummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"ouder2.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"ouder2['_links'].self\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2')['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/ouders/2\");",
									"});",
									"",
									"pm.test(\"ouder2['_links'].ingeschrevenPersoon Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2')['_links'].ingeschrevenPersoon).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									"",
									"pm.test(\"api-version HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"versie\"));",
									"});",
									"",
									"pm.test(\"content-type HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.match(/^application\\/hal\\+json/);",
									"});",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/ouders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"ouders"
							],
							"variable": [
								{
									"id": "4ca6e482-a657-4e99-8b60-d0418aca8bb7",
									"key": "burgerservicenummer",
									"value": "999993422",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Levert de ouders van een persoon\n"
					},
					"response": []
				},
				{
					"name": "ingeschreven ouder",
					"event": [
						{
							"script": {
								"id": "a6f24545-65a5-42c0-84ff-cb7227bd3405",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'] (collection)\", function () {",
									"    var jsonData = pm.response.json();",
									"    let regex = new RegExp(\"^\" + baseUrl + \"\\/ingeschrevenpersonen\\/\" + pm.variables.get(\"burgerservicenummer\") + \"\\/ouders$\");",
									"    pm.expect(jsonData['_links'].self.href).to.match(regex);",
									"});",
									"",
									"pm.test(\"ouders Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"ouder1.burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').burgerservicenummer).to.eql(\"999990937\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.registergemeenteAkte.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').registergemeenteAkte.code).to.eql(\"0530\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.registergemeenteAkte.naam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').registergemeenteAkte.naam).to.eql(\"Hellevoetsluis\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.aktenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').aktenummer).to.eql(\"1AA0026\");",
									"});",
									"",
									"pm.test(\"ouder1['_links'].self\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1')['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/ouders/1\");",
									"});",
									"",
									"pm.test(\"ouder1['_links'].ingeschrevenPersoon\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1')['_links'].ingeschrevenPersoon.href).to.eql(baseUrl + \"/ingeschrevenpersonen/999990937\");",
									"});",
									"",
									"pm.test(\"ouder2.burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').burgerservicenummer).to.eql(\"999993562\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.registergemeenteAkte.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').registergemeenteAkte.code).to.eql(\"0530\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.registergemeenteAkte.naam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').registergemeenteAkte.naam).to.eql(\"Hellevoetsluis\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.aktenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').aktenummer).to.eql(\"1AA0026\");",
									"});",
									"",
									"pm.test(\"ouder2['_links'].self\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2')['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/ouders/2\");",
									"});",
									"",
									"pm.test(\"ouder2['_links'].ingeschrevenPersoon\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2')['_links'].ingeschrevenPersoon.href).to.eql(baseUrl + \"/ingeschrevenpersonen/999993562\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									"",
									"pm.test.skip(\"api-version HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"apiversion\"));",
									"});",
									"",
									"pm.test(\"content-type HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.match(/^application\\/hal\\+json/);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var ouderUri = jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2')['_links'].self.href;",
									"pm.collectionVariables.set(\"relId\", ouderUri.substr(ouderUri.lastIndexOf('/') + 1)); // get ouder id",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/ouders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"ouders"
							],
							"variable": [
								{
									"id": "a2f048fb-0268-4fd0-9f69-abbac93c831c",
									"key": "burgerservicenummer",
									"value": "999991711",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Levert de ouders van een persoon\n"
					},
					"response": []
				},
				{
					"name": "ingeschreven ouder (raadplegen op id)",
					"event": [
						{
							"script": {
								"id": "bb070b50-9842-4902-b5b3-b22ff50b18e2",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-3]); // get request path parameter(s)",
									"",
									"pm.collectionVariables.set(\"id\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"ouderAanduiding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.ouderAanduiding).to.eql(\"ouder2\");",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999993562\");",
									"});",
									"",
									"pm.test(\"naam.voornamen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.voornamen).to.eql(\"Lennert\");",
									"});",
									"",
									"pm.test(\"naam.geslachtsnaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.geslachtsnaam).to.eql(\"Lapzwans\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.datum).to.eql(\"1980-01-23\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.jaar).to.eql(1980);",
									"});",
									"",
									"pm.test(\"geboorte.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.maand).to.eql(1);",
									"});",
									"",
									"pm.test(\"geboorte.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.dag).to.eql(23);",
									"});",
									"",
									"pm.test(\"geboorte.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.plaats.code).to.eql(\"0530\");",
									"});",
									"",
									"pm.test(\"geboorte.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.plaats.omschrijving).to.eql(\"Hellevoetsluis\");",
									"});",
									"",
									"pm.test(\"geboorte.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.land.code).to.eql(\"6030\");",
									"});",
									"",
									"pm.test(\"geboorte.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.land.omschrijving).to.eql(\"Nederland\");",
									"});",
									"",
									"pm.test.skip(\"geslachtsaanduiding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geslachtsaanduiding).to.eql(\"man\");",
									"});",
									"",
									"pm.test.skip(\"datumIngangFamilierechtelijkeBetrekking.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.datumIngangFamilierechtelijkeBetrekking.datum).to.eql(\"2002-12-20\");",
									"});",
									"",
									"pm.test.skip(\"datumIngangFamilierechtelijkeBetrekking.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.datumIngangFamilierechtelijkeBetrekking.jaar).to.eql(2002);",
									"});",
									"",
									"pm.test.skip(\"datumIngangFamilierechtelijkeBetrekking.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.datumIngangFamilierechtelijkeBetrekking.maand).to.eql(12);",
									"});",
									"",
									"pm.test.skip(\"datumIngangFamilierechtelijkeBetrekking.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.datumIngangFamilierechtelijkeBetrekking.dag).to.eql(20);",
									"});",
									"",
									"pm.test.skip(\"registergemeenteAkte.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.registergemeenteAkte.code).to.eql(\"0530\");",
									"});",
									"",
									"pm.test.skip(\"registergemeenteAkte.naam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.registergemeenteAkte.naam).to.eql(\"Hellevoetsluis\");",
									"});",
									"",
									"pm.test.skip(\"aktenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.aktenummer).to.eql(\"1AA0026\");",
									"});",
									"",
									"pm.test(\"['_links'].self\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/ouders/\" + pm.variables.get(\"id\"));",
									"});",
									"",
									"pm.test(\"['_links'].ingeschrevenPersoon\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].ingeschrevenPersoon.href).to.eql(baseUrl + \"/ingeschrevenpersonen/999993562\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									"",
									"pm.test.skip(\"api-version HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"apiversion\"));",
									"});",
									"",
									"pm.test(\"content-type HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.match(/^application\\/hal\\+json/);",
									"});",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/ouders/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"ouders",
								":id"
							],
							"variable": [
								{
									"id": "c7fafb7f-a5be-4e9f-9912-11bb22a6477a",
									"key": "burgerservicenummer",
									"value": "999991711",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								},
								{
									"id": "475b465d-de17-4405-9718-53269a8df35e",
									"key": "id",
									"value": "{{relId}}",
									"type": "string",
									"description": "De identificatie van de ouder.\n"
								}
							]
						},
						"description": "Raadpleeg een ouder van een persoon\n"
					},
					"response": []
				},
				{
					"name": "ingeschreven ouder (embedded)",
					"event": [
						{
							"script": {
								"id": "c7e5d0ef-cc26-4780-a510-508d01886620",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'] (collection)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].self.href).to.match(/^.*\\/ingeschrevenpersonen\\/999991711.*$/);",
									"});",
									"",
									"pm.test(\"ouders Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"ouder1.burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').burgerservicenummer).to.eql(\"999990937\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.registergemeenteAkte.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').registergemeenteAkte.code).to.eql(\"0530\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.registergemeenteAkte.naam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').registergemeenteAkte.naam).to.eql(\"Hellevoetsluis\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.aktenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').aktenummer).to.eql(\"1AA0026\");",
									"});",
									"",
									"pm.test(\"ouder1['_links'].self\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1')['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/ouders/1\");",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"ouder1['_links'].ingeschrevenPersoon\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1')['_links'].ingeschrevenPersoon.href).to.match(/^.*\\/ingeschrevenpersonen\\/999990937$/);",
									"});",
									"",
									"pm.test(\"ouder2.burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').burgerservicenummer).to.eql(\"999993562\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.registergemeenteAkte.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').registergemeenteAkte.code).to.eql(\"0530\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.registergemeenteAkte.naam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').registergemeenteAkte.naam).to.eql(\"Hellevoetsluis\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.aktenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').aktenummer).to.eql(\"1AA0026\");",
									"});",
									"",
									"pm.test(\"ouder2['_links'].self\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2')['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/ouders/2\");",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"ouder2['_links'].ingeschrevenPersoon\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2')['_links'].ingeschrevenPersoon.href).to.match(/^.*\\/ingeschrevenpersonen\\/999993562$/);",
									"});",
									"",
									"pm.test(\"ouder1['_links'].self == ['_links'].ouders(1)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[0]['_links'].self.href).to.eql(jsonData['_links'].ouders[0].href);",
									"});",
									"",
									"pm.test(\"ouder2['_links'].self == ['_links'].ouders(2)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[1]['_links'].self.href).to.eql(jsonData['_links'].ouders[1].href);",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									"",
									"pm.test(\"api-version HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"versie\"));",
									"});",
									"",
									"pm.test(\"content-type HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.match(/^application\\/hal\\+json/);",
									"});",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer?expand=ouders&fields=burgerservicenummer,ouders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "ouders",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature)."
								},
								{
									"key": "fields",
									"value": "burgerservicenummer,ouders",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)"
								}
							],
							"variable": [
								{
									"id": "3e777b8c-6b84-4c4d-be0a-aaec5554d938",
									"key": "burgerservicenummer",
									"value": "999991711",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "buitenlandse ouder",
					"event": [
						{
							"script": {
								"id": "3dfc3981-8853-4de6-a7d0-8f9f36da2ce8",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'] (collection)\", function () {",
									"    var jsonData = pm.response.json();",
									"    let regex = new RegExp(\"^\" + baseUrl + \"\\/ingeschrevenpersonen\\/\" + pm.variables.get(\"burgerservicenummer\") + \"\\/ouders$\");",
									"    pm.expect(jsonData['_links'].self.href).to.match(regex);",
									"});",
									"",
									"pm.test(\"ouders Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.length).to.eql(2);",
									"});",
									"",
									"pm.test(\"ouder2.burgerservicenummer Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').burgerservicenummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"ouder2.naam.voornamen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').naam.voornamen).to.eql(\"Alexandr Alēxevitsj\");",
									"});",
									"",
									"pm.test(\"ouder2.geboorte.datum.datum Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').geboorte.datum.datum).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"ouder2.geboorte.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').geboorte.datum.jaar).to.eql(1938);",
									"});",
									"",
									"pm.test(\"ouder2.geboorte.datum.maand Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').geboorte.datum.maand).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"ouder2.geboorte.datum.dag Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').geboorte.datum.dag).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"ouder2.geboorte.plaats.code Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').geboorte.plaats.code).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"ouder2.geboorte.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').geboorte.plaats.omschrijving).to.eql(\"Krasnogvardeyskoye\");",
									"});",
									"",
									"pm.test(\"ouder2.geboorte.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').geboorte.land.code).to.eql(\"9049\");",
									"});",
									"",
									"pm.test(\"ouder2.geboorte.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').geboorte.land.omschrijving).to.eql(\"Sovjet-Unie\");",
									"});",
									"",
									"pm.test(\"ouder2['_links'].ingeschrevenPersoon Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2')['_links'].ingeschrevenPersoon).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"ouder2['_links'].self\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2')['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/ouders/2\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/ouders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"ouders"
							],
							"variable": [
								{
									"id": "3eb222c5-1ff1-4af3-a393-a112088b0842",
									"key": "burgerservicenummer",
									"value": "999993343",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Levert de ouders van een persoon\n"
					},
					"response": []
				},
				{
					"name": "onbekend",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"['_links'] (collection)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/ouders\");",
									"});",
									"",
									"pm.test(\"ouders Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.burgerservicenummer Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[0].burgerservicenummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.naam Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[0].naam).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.naam.voorvoegsel Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[0].naam.voorvoegsel).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.naam.geslachtsnaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[0].naam.geslachtsnaam).to.eql(\".\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.geboorte Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[0].geboorte).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.geslachtsaanduiding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[0].geslachtsaanduiding).to.eql(\"vrouw\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.datumIngangFamilierechtelijkeBetrekking\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1').datumIngangFamilierechtelijkeBetrekking.datum).to.eql(\"1980-05-06\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.aktenummer Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[0].aktenummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"ouder1.registergemeenteAkte Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[0].registergemeenteAkte).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"ouder1['_links'].self Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[0]['_links'].self.href).not.to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"ouder1['_links'].ingeschrevenPersoon Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder1')['_links'].ingeschrevenPersoon).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.burgerservicenummer Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[1].burgerservicenummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.naam Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[1].naam).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.naam.voorvoegsel Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[1].naam.voorvoegsel).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.naam.geslachtsnaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[1].naam.geslachtsnaam).to.eql(\".\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.geboorte Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[1].geboorte).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.geslachtsaanduiding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders.find(item => item.ouderAanduiding=='ouder2').geslachtsaanduiding).to.eql(\"man\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.datumIngangFamilierechtelijkeBetrekking\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[1].datumIngangFamilierechtelijkeBetrekking.datum).to.eql(\"1980-05-06\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.aktenummer Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[1].aktenummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"ouder2.registergemeenteAkte Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[1].registergemeenteAkte).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"ouder2['_links'].ingeschrevenPersoon Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[1]['_links'].ingeschrevenPersoon).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"ouder2['_links'].self Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[1]['_links'].self.href).not.to.be.an(\"undefined\");",
									"});",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/ouders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"ouders"
							],
							"variable": [
								{
									"id": "fdf490de-cb46-40d3-8ce8-b60729ccc6e8",
									"key": "burgerservicenummer",
									"value": "999991796",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Levert de ouders van een persoon\n"
					},
					"response": []
				},
				{
					"name": "indicatie geheim",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"[0].geheimhoudingPersoonsgegevens\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[0].geheimhoudingPersoonsgegevens).to.eql(true);",
									"});",
									"",
									"pm.test(\"[1].geheimhoudingPersoonsgegevens\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].ouders[1].geheimhoudingPersoonsgegevens).to.eql(true);",
									"});",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/ouders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"ouders"
							],
							"variable": [
								{
									"id": "c5ffa4fe-13f6-47ed-a0fa-3ba7eddc6650",
									"key": "burgerservicenummer",
									"value": "999993483",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Levert de ouders van een persoon\n"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "partners",
			"item": [
				{
					"name": "huwelijk",
					"event": [
						{
							"script": {
								"id": "68c412f5-be3a-4f99-86fd-83066b5beb2f",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"partners Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"['_links'] (collection)\", function () {",
									"    var jsonData = pm.response.json();",
									"    let regex = new RegExp(\"^\" + baseUrl + \"\\/ingeschrevenpersonen\\/\" + pm.variables.get(\"burgerservicenummer\") + \"\\/partners$\");",
									"    pm.expect(jsonData['_links'].self.href).to.match(regex);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].burgerservicenummer).to.eql(\"999994037\");",
									"});",
									"",
									"pm.test(\"naam.voornamen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.voornamen).to.eql(\"Carolina\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat.adellijkeTitel_predikaat\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.adellijkeTitel_predikaat.adellijkeTitel_predikaat).to.eql(\"BS\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.adellijkeTitel_predikaat.omschrijving).to.eql(\"Barones\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat.soort\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.adellijkeTitel_predikaat.soort).to.eql(\"T\");",
									"});",
									"",
									"pm.test(\"naam.voorvoegsel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.voorvoegsel).to.eql(\"van der\");",
									"});",
									"",
									"pm.test(\"naam.geslachtsnaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.geslachtsnaam).to.eql(\"Hom\");",
									"});",
									"",
									"pm.test(\"naam.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.datum.datum).to.eql(\"1955-12-12\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.datum.jaar).to.eql(1955);",
									"});",
									"",
									"pm.test(\"geboorte.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.datum.maand).to.eql(12);",
									"});",
									"",
									"pm.test(\"geboorte.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.datum.dag).to.eql(12);",
									"});",
									"",
									"pm.test.skip(\"geboorte.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.plaats.code).to.eql(\"0344\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.plaats.omschrijving).to.eql(\"Utrecht\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.land.code).to.eql(\"6030\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.land.omschrijving).to.eql(\"Nederland\");",
									"});",
									"",
									"pm.test(\"geboorte.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"geslachtsaanduiding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geslachtsaanduiding).to.eql(\"vrouw\");",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1982-05-11\");",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.datum.jaar).to.eql(1982);",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.datum.maand).to.eql(5);",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.datum.dag).to.eql(11);",
									"});",
									"",
									"pm.test.skip(\"aangaanHuwelijkPartnerschap.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.plaats.code).to.eql(\"0518\");",
									"});",
									"",
									"pm.test.skip(\"aangaanHuwelijkPartnerschap.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.plaats.omschrijving).to.eql(\"'s-Gravenhage\");",
									"});",
									"",
									"pm.test.skip(\"aangaanHuwelijkPartnerschap.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.land.code).to.eql(\"6030\");",
									"});",
									"",
									"pm.test.skip(\"aangaanHuwelijkPartnerschap.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.land.omschrijving).to.eql(\"Nederland\");",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"soortVerbintenis\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].soortVerbintenis).to.eql(\"huwelijk\");",
									"});",
									"",
									"pm.test(\"registergemeenteAkte Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].registergemeenteAkte).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"aktenummer Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aktenummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].self\", function () {",
									"    var jsonData = pm.response.json();",
									"    let regex = new RegExp(\"^\" + baseUrl + \"\\/ingeschrevenpersonen\\/\" + pm.variables.get(\"burgerservicenummer\") + \"\\/partners\\/\");",
									"    pm.expect(jsonData['_embedded'].partners[0]['_links'].self.href).to.match(regex);",
									"});",
									"",
									"pm.test(\"['_links'].ingeschrevenPersoon\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0]['_links'].ingeschrevenPersoon.href).to.eql(baseUrl + \"/ingeschrevenpersonen/999994037\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									"",
									"pm.test(\"api-version HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"versie\"));",
									"});",
									"",
									"pm.test(\"content-type HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.match(/^application\\/hal\\+json/);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var partnerUri = jsonData['_embedded'].partners[0]['_links'].self.href;",
									"pm.collectionVariables.set(\"relId\", partnerUri.substr(partnerUri.lastIndexOf('/') + 1)); // get partner id"
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partners",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"partners"
							],
							"variable": [
								{
									"id": "b10cdf0c-ad7e-4906-abbc-145613a835e3",
									"key": "burgerservicenummer",
									"value": "999993422",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Levert de actuele partners van een persoon. Partners uit beëindigde huwelijken of partnerschappen worden niet geretourneerd\n"
					},
					"response": []
				},
				{
					"name": "huwelijk (raadplegen op id)",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b5d1c3a-5d2f-405d-ac3a-108a5be1d394",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-3]); // get request path parameter(s)",
									"",
									"pm.collectionVariables.set(\"id\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999994037\");",
									"});",
									"",
									"pm.test(\"naam.voornamen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.voornamen).to.eql(\"Carolina\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat.adellijkeTitel_predikaat\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.adellijkeTitel_predikaat.adellijkeTitel_predikaat).to.eql(\"BS\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.adellijkeTitel_predikaat.omschrijving).to.eql(\"Barones\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat.soort\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.adellijkeTitel_predikaat.soort).to.eql(\"T\");",
									"});",
									"",
									"pm.test(\"naam.voorvoegsel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.voorvoegsel).to.eql(\"van der\");",
									"});",
									"",
									"pm.test(\"naam.geslachtsnaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.geslachtsnaam).to.eql(\"Hom\");",
									"});",
									"",
									"pm.test(\"naam.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.datum).to.eql(\"1955-12-12\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.jaar).to.eql(1955);",
									"});",
									"",
									"pm.test(\"geboorte.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.maand).to.eql(12);",
									"});",
									"",
									"pm.test(\"geboorte.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.dag).to.eql(12);",
									"});",
									"",
									"pm.test.skip(\"geboorte.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.plaats.code).to.eql(\"0344\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.plaats.omschrijving).to.eql(\"Utrecht\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.land.code).to.eql(\"6030\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.land.omschrijving).to.eql(\"Nederland\");",
									"});",
									"",
									"pm.test(\"geboorte.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"geslachtsaanduiding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geslachtsaanduiding).to.eql(\"vrouw\");",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1982-05-11\");",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.aangaanHuwelijkPartnerschap.datum.jaar).to.eql(1982);",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.aangaanHuwelijkPartnerschap.datum.maand).to.eql(5);",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.aangaanHuwelijkPartnerschap.datum.dag).to.eql(11);",
									"});",
									"",
									"pm.test.skip(\"aangaanHuwelijkPartnerschap.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.aangaanHuwelijkPartnerschap.plaats.code).to.eql(\"0518\");",
									"});",
									"",
									"pm.test.skip(\"aangaanHuwelijkPartnerschap.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.aangaanHuwelijkPartnerschap.plaats.omschrijving).to.eql(\"'s-Gravenhage\");",
									"});",
									"",
									"pm.test.skip(\"aangaanHuwelijkPartnerschap.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.aangaanHuwelijkPartnerschap.land.code).to.eql(\"6030\");",
									"});",
									"",
									"pm.test.skip(\"aangaanHuwelijkPartnerschap.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.aangaanHuwelijkPartnerschap.land.omschrijving).to.eql(\"Nederland\");",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.aangaanHuwelijkPartnerschap.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"soortVerbintenis\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.soortVerbintenis).to.eql(\"huwelijk\");",
									"});",
									"",
									"pm.test(\"registergemeenteAkte Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.registergemeenteAkte).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"aktenummer Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.aktenummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].self\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/partners/\" + pm.variables.get(\"relId\"));",
									"});",
									"",
									"pm.test(\"['_links'].ingeschrevenPersoon\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].ingeschrevenPersoon.href).to.eql(baseUrl + \"/ingeschrevenpersonen/999994037\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									"",
									"pm.test(\"api-version HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"versie\"));",
									"});",
									"",
									"pm.test(\"content-type HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.match(/^application\\/hal\\+json/);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partners/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"partners",
								":id"
							],
							"variable": [
								{
									"id": "5a016e12-c2eb-4341-85f9-a30c527a64de",
									"key": "burgerservicenummer",
									"value": "999993422",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								},
								{
									"id": "547c22e6-0832-46aa-af96-977cf6d7f351",
									"key": "id",
									"value": "{{relId}}",
									"type": "string",
									"description": "De identificatie van de partner.\n"
								}
							]
						},
						"description": "Raadpleeg de partner van een persoon\n"
					},
					"response": []
				},
				{
					"name": "huwelijk (embedded)",
					"event": [
						{
							"script": {
								"id": "7bd465fd-c53b-48eb-b833-7535398c8032",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"partners Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners.length).to.eql(1);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test.skip(\"['_links'] (collection) *wildcard*\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].self.href).to.match(/^.*\\/ingeschrevenpersonen\\/999993422\\?expand\\=partners\\&fields\\=burgerservicenummer$/);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].burgerservicenummer).to.eql(\"999994037\");",
									"});",
									"",
									"pm.test(\"naam.voornamen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.voornamen).to.eql(\"Carolina\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat.adellijkeTitel_predikaat\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.adellijkeTitel_predikaat.adellijkeTitel_predikaat).to.eql(\"BS\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.adellijkeTitel_predikaat.omschrijving).to.eql(\"Barones\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat.soort\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.adellijkeTitel_predikaat.soort).to.eql(\"T\");",
									"});",
									"",
									"pm.test(\"naam.voorvoegsel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.voorvoegsel).to.eql(\"van der\");",
									"});",
									"",
									"pm.test(\"naam.geslachtsnaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.geslachtsnaam).to.eql(\"Hom\");",
									"});",
									"",
									"pm.test(\"naam.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.datum.datum).to.eql(\"1955-12-12\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.datum.jaar).to.eql(1955);",
									"});",
									"",
									"pm.test(\"geboorte.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.datum.maand).to.eql(12);",
									"});",
									"",
									"pm.test(\"geboorte.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.datum.dag).to.eql(12);",
									"});",
									"",
									"pm.test.skip(\"geboorte.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.plaats.code).to.eql(\"0344\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.plaats.omschrijving).to.eql(\"Utrecht\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.land.code).to.eql(\"6030\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.land.omschrijving).to.eql(\"Nederland\");",
									"});",
									"",
									"pm.test(\"geboorte.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"geslachtsaanduiding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geslachtsaanduiding).to.eql(\"vrouw\");",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"1982-05-11\");",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.datum.jaar).to.eql(1982);",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.datum.maand).to.eql(5);",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.datum.dag).to.eql(11);",
									"});",
									"",
									"pm.test.skip(\"aangaanHuwelijkPartnerschap.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.plaats.code).to.eql(\"0518\");",
									"});",
									"",
									"pm.test.skip(\"aangaanHuwelijkPartnerschap.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.plaats.omschrijving).to.eql(\"'s-Gravenhage\");",
									"});",
									"",
									"pm.test.skip(\"aangaanHuwelijkPartnerschap.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.land.code).to.eql(\"6030\");",
									"});",
									"",
									"pm.test.skip(\"aangaanHuwelijkPartnerschap.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.land.omschrijving).to.eql(\"Nederland\");",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"soortVerbintenis\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].soortVerbintenis).to.eql(\"huwelijk\");",
									"});",
									"",
									"pm.test.skip(\"registergemeenteAkte Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].registergemeenteAkte).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"aktenummer Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aktenummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].ingeschrevenPersoon\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0]['_links'].ingeschrevenPersoon.href).to.match(/^.*\\/ingeschrevenpersonen\\/999994037$/);",
									"});",
									"",
									"pm.test(\"['_links'].partners == ['_embedded'].partners['_links'].self\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0]['_links'].self.href).to.eql(jsonData['_links'].partners[0].href);",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									"",
									"pm.test.skip(\"api-version HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"apiversion\"));",
									"});",
									"",
									"pm.test(\"content-type HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.match(/^application\\/hal\\+json/);",
									"});",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer?expand=partners&fields=burgerservicenummer,partners",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "partners",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature)."
								},
								{
									"key": "fields",
									"value": "burgerservicenummer,partners",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)"
								}
							],
							"variable": [
								{
									"id": "448556b5-3ff0-4045-9ea9-19dddc2b561e",
									"key": "burgerservicenummer",
									"value": "999993422",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "partnerschap",
					"event": [
						{
							"script": {
								"id": "fc04b640-1833-4997-89ae-ce74d3499b76",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"partners Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"['_links'] (collection)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/partners\");",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].burgerservicenummer).to.eql(\"999995170\");",
									"});",
									"",
									"pm.test(\"naam.voornamen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.voornamen).to.eql(\"Marjolein\");",
									"});",
									"",
									"pm.test(\"naam.adellijkeTitel_predikaat Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.adellijkeTitel_predikaat).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"naam.voorvoegsel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.voorvoegsel).to.eql(\"de\");",
									"});",
									"",
									"pm.test(\"naam.geslachtsnaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.geslachtsnaam).to.eql(\"Goede\");",
									"});",
									"",
									"pm.test(\"naam.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.datum.datum).to.eql(\"1990-06-07\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.datum.jaar).to.eql(1990);",
									"});",
									"",
									"pm.test(\"geboorte.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.datum.maand).to.eql(6);",
									"});",
									"",
									"pm.test(\"geboorte.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.datum.dag).to.eql(7);",
									"});",
									"",
									"pm.test(\"geboorte.plaats Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.plaats).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.land.code).to.eql(\"6030\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.land.omschrijving).to.eql(\"Nederland\");",
									"});",
									"",
									"pm.test(\"geboorte.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"geslachtsaanduiding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geslachtsaanduiding).to.eql(\"vrouw\");",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.datum.datum).to.eql(\"2012-09-13\");",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.datum.jaar).to.eql(2012);",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.datum.maand).to.eql(9);",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.datum.dag).to.eql(13);",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.plaats Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.plaats).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.land Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.land).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"aangaanHuwelijkPartnerschap.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.land.omschrijving).to.eql(\"Nederland\");",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap.inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"soortVerbintenis\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].soortVerbintenis).to.eql(\"geregistreerd_partnerschap\");",
									"});",
									"",
									"pm.test(\"inOnderzoek Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"['_links'].self\", function () {",
									"    var jsonData = pm.response.json();",
									"    let regex = new RegExp(\"^\" + baseUrl + \"\\/ingeschrevenpersonen\\/\" + pm.variables.get(\"burgerservicenummer\") + \"\\/partners\\/.+$\");",
									"    pm.expect(jsonData['_embedded'].partners[0]['_links'].self.href).to.match(regex);",
									"});",
									"",
									"pm.test(\"['_links'].ingeschrevenpersonen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0]['_links'].ingeschrevenPersoon.href).to.eql(baseUrl + \"/ingeschrevenpersonen/999995170\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partners",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"partners"
							],
							"variable": [
								{
									"id": "dfaf9388-8b35-4ce1-a0db-bd9ef9d2aed0",
									"key": "burgerservicenummer",
									"value": "999991292",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Levert de actuele partners van een persoon. Partners uit beëindigde huwelijken of partnerschappen worden niet geretourneerd\n"
					},
					"response": []
				},
				{
					"name": "diakrieten",
					"event": [
						{
							"script": {
								"id": "07437b20-d91e-4fd0-a875-e8cf2f3c8a81",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"partners Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"['_links'] (collection)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/partners\");",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].burgerservicenummer).to.eql(\"999992454\");",
									"});",
									"",
									"pm.test(\"naam.voornamen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.voornamen).to.eql(\"Drača\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.adellijkeTitel_predikaat).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"naam.voorvoegsel Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.voorvoegsel).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"naam.geslachtsnaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.geslachtsnaam).to.eql(\"Bilgiç\");",
									"});",
									"",
									"pm.test(\"geboorte.plaats Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.plaats).to.be.an(\"undefined\");",
									"});",
									"",
									"",
									"pm.test(\"geboorte.land Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.land).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"['_links'].self\", function () {",
									"    var jsonData = pm.response.json();",
									"    let regex = new RegExp(\"^\" + baseUrl + \"\\/ingeschrevenpersonen\\/\" + pm.variables.get(\"burgerservicenummer\") + \"\\/partners\\/.+$\");",
									"    pm.expect(jsonData['_embedded'].partners[0]['_links'].self.href).to.match(regex);",
									"});",
									"",
									"pm.test(\"['_links'].ingeschrevenPersoon\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0]['_links'].ingeschrevenPersoon.href).to.eql(baseUrl + \"/ingeschrevenpersonen/999992454\");",
									"});",
									"",
									"pm.test(\"geboorte.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.datum.datum).to.eql(\"1930-05-21\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partners",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"partners"
							],
							"variable": [
								{
									"id": "938d5b55-47b3-4dd0-801b-691ffbbd2752",
									"key": "burgerservicenummer",
									"value": "999991188",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Levert de actuele partners van een persoon. Partners uit beëindigde huwelijken of partnerschappen worden niet geretourneerd\n"
					},
					"response": []
				},
				{
					"name": "niet-ingeschreven",
					"event": [
						{
							"script": {
								"id": "a50dbe21-6883-493b-b34c-b911a2a0c92e",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"partners Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners.length).to.eql(1);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'] (collection)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/partners\");",
									"});",
									"",
									"pm.test(\"burgerservicenummer Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].burgerservicenummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"naam.voornamen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.voornamen).to.eql(\"Jéan\");",
									"});",
									"",
									"pm.test(\"naam.adellijkeTitel_predikaat Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.adellijkeTitel_predikaat).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"naam.voorvoegsel Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.voorvoegsel).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"naam.geslachtsnaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.geslachtsnaam).to.eql(\"Roussæx\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.datum.datum).to.eql(\"1930-01-01\");",
									"});",
									"",
									"pm.test(\"geboorte.plaats Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.plaats).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.plaats.omschrijving).to.eql(\"Lille\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.land.code).to.eql(\"5002\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.land.omschrijving).to.eql(\"Frankrijk\");",
									"});",
									"",
									"pm.test.skip(\"geslachtsaanduiding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geslachtsaanduiding).to.eql(\"man\");",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].self *wildcard*\", function () {",
									"    var jsonData = pm.response.json();",
									"    let regex = new RegExp(\"^\" + baseUrl + \"\\/ingeschrevenpersonen\\/\" + pm.variables.get(\"burgerservicenummer\") + \"\\/partners\\/.+$\");",
									"    pm.expect(jsonData['_embedded'].partners[0]['_links'].self.href).to.match(regex);",
									"});",
									"",
									"pm.test(\"['_links'].ingeschrevenPersoon Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0]['_links'].ingeschrevenPersoon).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"['_links'].ingeschrevenPersoon Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0]['_links'].ingeschrevenPersoon).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partners",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"partners"
							],
							"variable": [
								{
									"id": "02fb25f4-0800-4fbd-a3ab-c5031829c202",
									"key": "burgerservicenummer",
									"value": "999993550",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Levert de actuele partners van een persoon. Partners uit beëindigde huwelijken of partnerschappen worden niet geretourneerd\n"
					},
					"response": []
				},
				{
					"name": "onbekend",
					"event": [
						{
							"script": {
								"id": "5553be11-c240-4b64-b7d7-2ba2bbdbc65e",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"partners Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"['_links'] (collection)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/partners\");",
									"});",
									"",
									"pm.test(\"naam.voornamen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.voornamen).to.eql(\"%im ;soms genaamd Kim | Jim\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.adellijkeTitel_predikaat).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"naam.voorvoegsel Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.voorvoegsel).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"naam.geslachtsnaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].naam.geslachtsnaam).to.eql(\"@tenborough\");",
									"});",
									"",
									"pm.test(\"geboorte Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.plaats.code).to.eql(\"0000\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.plaats.omschrijving).to.eql(\"Onbekend\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.land.code).to.eql(\"0000\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geboorte.land.omschrijving).to.eql(\"Onbekend\");",
									"});",
									"",
									"pm.test.skip(\"geslachtsaanduiding\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geslachtsaanduiding).to.eql(\"onbekend\");",
									"});",
									"",
									"pm.test(\"aangaanHuwelijkPartnerschap Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"['_links'].self\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0]['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/partners/1\");",
									"});",
									"",
									"pm.test(\"['_links'].ingeschrevenPersoon Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0]['_links'].ingeschrevenPersoon).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"burgerservicenummer Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].burgerservicenummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"aangaanHuwelijkPartnerschap.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].aangaanHuwelijkPartnerschap.plaats.code).to.eql(\"0000\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partners",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"partners"
							],
							"variable": [
								{
									"id": "8ebc98a4-54b7-4d0a-b81a-651ae31b90b3",
									"key": "burgerservicenummer",
									"value": "999991449",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Levert de actuele partners van een persoon. Partners uit beëindigde huwelijken of partnerschappen worden niet geretourneerd\n"
					},
					"response": []
				},
				{
					"name": "geen partner",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"partners Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"['_links'] (collection)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/partners\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partners",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"partners"
							],
							"variable": [
								{
									"id": "eb633edb-fc4c-49b9-9221-c1cb129c91b0",
									"key": "burgerservicenummer",
									"value": "999990032",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Levert de actuele partners van een persoon. Partners uit beëindigde huwelijken of partnerschappen worden niet geretourneerd\n"
					},
					"response": []
				},
				{
					"name": "indicatie geheim",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"[0].geheimhoudingPersoonsgegevens\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].partners[0].geheimhoudingPersoonsgegevens).to.eql(true);",
									"});",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/partners",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"partners"
							],
							"variable": [
								{
									"id": "e0523082-b740-4c35-b289-30ae18f89fe2",
									"key": "burgerservicenummer",
									"value": "999992715",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Levert de actuele partners van een persoon. Partners uit beëindigde huwelijken of partnerschappen worden niet geretourneerd\n"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "kinderen",
			"item": [
				{
					"name": "Nederlands kind",
					"event": [
						{
							"script": {
								"id": "380a0566-124b-4230-b055-631b1eae0f6f",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'] (collection) *wildcard*\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/kinderen\");",
									"});",
									"",
									"pm.test(\"kinderen Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].burgerservicenummer).to.eql(\"999992892\");",
									"});",
									"",
									"pm.test(\"naam.voornamen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].naam.voornamen).to.eql(\"Marietje\");",
									"});",
									"",
									"pm.test(\"naam.adellijkeTitel_predikaat\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].naam.adellijkeTitel_predikaat).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"naam.voorvoegsel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].naam.voorvoegsel).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"naam.geslachtsnaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].naam.geslachtsnaam).to.eql(\"Verstraten\");",
									"});",
									"",
									"pm.test(\"naam.inOnderzoek Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].naam.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.datum.datum).to.eql(\"1994-11-29\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.datum.jaar).to.eql(1994);",
									"});",
									"",
									"pm.test(\"geboorte.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.datum.maand).to.eql(11);",
									"});",
									"",
									"pm.test(\"geboorte.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.datum.dag).to.eql(29);",
									"});",
									"",
									"pm.test.skip(\"geboorte.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.plaats.omschrijving).to.eql(\"Zevenaar\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.plaats.code).to.eql(\"0299\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.land.code).to.eql(\"6030\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.land.omschrijving).to.eql(\"Nederland\");",
									"});",
									"",
									"pm.test(\"geboorte.inOnderzoek Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"inOnderzoek Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"['_links'].self\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0]['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/kinderen/1\");",
									"});",
									"",
									"pm.test(\"['_links'].ingeschrevenPersoon\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0]['_links'].ingeschrevenPersoon.href).to.eql(baseUrl + \"/ingeschrevenpersonen/999992892\");",
									"});",
									"",
									"pm.test.skip(\"registergemeenteAkte Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].registergemeenteAkte).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test.skip(\"aktenummer Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].aktenummer).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									"",
									"pm.test(\"api-version HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"versie\"));",
									"});",
									"",
									"pm.test(\"content-type HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.match(/^application\\/hal\\+json/);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"var kindUri = jsonData['_embedded'].kinderen[0]['_links'].self.href;",
									"pm.collectionVariables.set(\"relId\", kindUri.substr(kindUri.lastIndexOf('/') + 1)); // get kind id"
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/kinderen",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"kinderen"
							],
							"variable": [
								{
									"id": "4b02f3b6-baf7-4329-922e-e05218d5b9ec",
									"key": "burgerservicenummer",
									"value": "999992715",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Levert de kinderen van een persoon\n"
					},
					"response": []
				},
				{
					"name": "Nederlands kind (raadplegen op uuid)",
					"event": [
						{
							"script": {
								"id": "ced564c1-4fcb-4fd8-a7b8-4501765ad417",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-3]); // get request path parameter(s)",
									"",
									"pm.collectionVariables.set(\"id\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.burgerservicenummer).to.eql(\"999992892\");",
									"});",
									"",
									"pm.test(\"naam.voornamen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.voornamen).to.eql(\"Marietje\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.adellijkeTitel_predikaat).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"naam.voorvoegsel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.voorvoegsel).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"naam.geslachtsnaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.geslachtsnaam).to.eql(\"Verstraten\");",
									"});",
									"",
									"pm.test(\"naam.inOnderzoek Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.naam.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.datum).to.eql(\"1994-11-29\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.jaar).to.eql(1994);",
									"});",
									"",
									"pm.test(\"geboorte.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.maand).to.eql(11);",
									"});",
									"",
									"pm.test(\"geboorte.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.datum.dag).to.eql(29);",
									"});",
									"",
									"pm.test.skip(\"geboorte.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.plaats.code).to.eql(\"0299\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.plaats.omschrijving).to.eql(\"Zevenaar\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.land.code).to.eql(\"6030\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.land.omschrijving).to.eql(\"Nederland\");",
									"});",
									"",
									"pm.test(\"geboorte.inOnderzoek Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.geboorte.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"inOnderzoek Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"// TODO: correct ${uuid}",
									"pm.test(\"['_links'].self\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/kinderen/${uuid}\");",
									"});",
									"*/",
									"",
									"pm.test(\"['_links'].ingeschrevenPersoon\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].ingeschrevenPersoon.href).to.eql(baseUrl + \"/ingeschrevenpersonen/999992892\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									"",
									"pm.test(\"api-version HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"versie\"));",
									"});",
									"",
									"pm.test(\"content-type HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.match(/^application\\/hal\\+json/);",
									"});",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/kinderen/:id",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"kinderen",
								":id"
							],
							"variable": [
								{
									"id": "b08c2dcc-4531-4d6d-ad3d-155cd4e74d25",
									"key": "burgerservicenummer",
									"value": "999992715",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								},
								{
									"id": "a5754dc9-840e-4efd-9a4a-6bd88f60978d",
									"key": "id",
									"value": "{{relId}}",
									"type": "string",
									"description": "De identificatie van het kind.\n"
								}
							]
						},
						"description": "Raadpleeg een kind van een persoon\n"
					},
					"response": []
				},
				{
					"name": "Nederlands kind (embedded)",
					"event": [
						{
							"script": {
								"id": "4ee49d31-8fea-4ddd-81cf-0a8dc1d4d929",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-1]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'] (ingeschreven persoon) *wildcard*\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].self.href).to.match(/^.*\\/ingeschrevenpersonen\\/999992715$/);",
									"});",
									"",
									"pm.test(\"kinderen Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].burgerservicenummer).to.eql(\"999992892\");",
									"});",
									"",
									"pm.test(\"naam.voornamen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].naam.voornamen).to.eql(\"Marietje\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].naam.adellijkeTitel_predikaat).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"naam.voorvoegsel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].naam.voorvoegsel).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"naam.geslachtsnaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].naam.geslachtsnaam).to.eql(\"Verstraten\");",
									"});",
									"",
									"pm.test(\"naam.inOnderzoek Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].naam.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.datum.datum).to.eql(\"1994-11-29\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.datum.jaar).to.eql(1994);",
									"});",
									"",
									"pm.test(\"geboorte.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.datum.maand).to.eql(11);",
									"});",
									"",
									"pm.test(\"geboorte.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.datum.dag).to.eql(29);",
									"});",
									"",
									"pm.test.skip(\"geboorte.plaats.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.plaats.code).to.eql(\"0299\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.plaats.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.plaats.omschrijving).to.eql(\"Zevenaar\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.land.code\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.land.code).to.eql(\"6030\");",
									"});",
									"",
									"pm.test.skip(\"geboorte.land.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.land.omschrijving).to.eql(\"Nederland\");",
									"});",
									"",
									"pm.test(\"geboorte.inOnderzoek Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"inOnderzoek Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].self (embedded kind)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0]['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/kinderen/\" + pm.variables.get(\"relId\"));",
									"});",
									"",
									"pm.test(\"['_links'].ingeschrevenPersoon\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0]['_links'].ingeschrevenPersoon.href).to.eql(baseUrl + \"/ingeschrevenpersonen/999992892\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									"",
									"pm.test(\"api-version HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"api-version\")).to.eql(pm.variables.get(\"versie\"));",
									"});",
									"",
									"pm.test(\"content-type HTTP Header Equals\", () => {",
									"    pm.expect(pm.response.headers.get(\"content-type\")).to.match(/^application\\/hal\\+json/);",
									"});",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer?expand=kinderen&fields=burgerservicenummer,kinderen",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer"
							],
							"query": [
								{
									"key": "expand",
									"value": "kinderen",
									"description": "Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature)."
								},
								{
									"key": "fields",
									"value": "burgerservicenummer,kinderen",
									"description": "Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature)"
								}
							],
							"variable": [
								{
									"id": "172d47f5-d6b4-4e95-81a1-564aa5c83f40",
									"key": "burgerservicenummer",
									"value": "999992715",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Raadpleeg een (overleden) persoon.\n\nGebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).\n\nGebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).\n"
					},
					"response": []
				},
				{
					"name": "ridder",
					"event": [
						{
							"script": {
								"id": "d0f3e45f-fa79-4b3c-ab7a-7bc725e8162f",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'] (collection)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/kinderen\");",
									"});",
									"",
									"pm.test(\"kinderen Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].burgerservicenummer).to.eql(\"999991528\");",
									"});",
									"",
									"pm.test(\"naam.voornamen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].naam.voornamen).to.eql(\"Piet\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat.adellijkeTitel_predikaat\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].naam.adellijkeTitel_predikaat.adellijkeTitel_predikaat).to.eql(\"R\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat.omschrijving\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].naam.adellijkeTitel_predikaat.omschrijving).to.eql(\"Ridder\");",
									"});",
									"",
									"pm.test.skip(\"naam.adellijkeTitel_predikaat.soort\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].naam.adellijkeTitel_predikaat.soort).to.eql(\"T\");",
									"});",
									"",
									"pm.test(\"naam.voorvoegsel\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].naam.voorvoegsel).to.eql(\"de\");",
									"});",
									"",
									"pm.test(\"naam.geslachtsnaam\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].naam.geslachtsnaam).to.eql(\"Brink\");",
									"});",
									"",
									"pm.test(\"naam.inOnderzoek Existance\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].naam.inOnderzoek).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/kinderen",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"kinderen"
							],
							"variable": [
								{
									"id": "946d601c-8c58-4d1c-ab81-f7a567c7f711",
									"key": "burgerservicenummer",
									"value": "999990160",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Levert de kinderen van een persoon\n"
					},
					"response": []
				},
				{
					"name": "met diakriet | geen burgerservicenummer",
					"event": [
						{
							"script": {
								"id": "83815935-0d5f-4d30-9a1a-41ec79230596",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'] (collection)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/kinderen\");",
									"});",
									"",
									"pm.test(\"kinderen Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen.length).to.eql(5);",
									"});",
									"",
									"pm.test.skip(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].burgerservicenummer).to.eql(\"999991760\");",
									"});",
									"",
									"pm.test(\"naam.voornamen\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen.find(item => item.burgerservicenummer=='999991760').naam.voornamen).to.eql(\"Angélie Francisca\");",
									"});",
									"",
									"// JsonPath Match with Wildcard",
									"pm.test(\"['_links'].ingeschrevenPersoon\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen.find(item => item.burgerservicenummer=='999991760')['_links'].ingeschrevenPersoon.href).to.match(/^.*\\/ingeschrevenpersonen\\/999991760$/);",
									"});",
									"",
									"pm.test(\"@Eveline Johanna.burgerservicenummer Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen.find(item => item.naam.voornamen=='Eveline Johanna').burgerservicenummer).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"@Eveline Johanna['_links'].ingeschrevenpersonen Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen.find(item => item.naam.voornamen=='Eveline Johanna')['_links'].ingeschrevenpersonen).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/kinderen",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"kinderen"
							],
							"variable": [
								{
									"id": "30744ab3-dde2-43e1-b29b-6dee1c38f2b8",
									"key": "burgerservicenummer",
									"value": "999990421",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Levert de kinderen van een persoon\n"
					},
					"response": []
				},
				{
					"name": "onjuist",
					"event": [
						{
							"script": {
								"id": "722db001-afc7-4b38-907c-8eaf58b168a2",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"['_links'] (collection)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/kinderen\");",
									"});",
									"",
									"pm.test(\"kinderen Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/kinderen",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"kinderen"
							],
							"variable": [
								{
									"id": "7375053b-b453-4a71-adae-4626b3f83ec3",
									"key": "burgerservicenummer",
									"value": "999991449",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Levert de kinderen van een persoon\n"
					},
					"response": []
				},
				{
					"name": "geboorte locatie",
					"event": [
						{
							"script": {
								"id": "40bcc8c6-5e63-481a-a889-ff76afd3b23f",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"['_links'] (collection)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/kinderen\");",
									"});",
									"",
									"pm.test(\"kinderen Count\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen.length).to.eql(1);",
									"});",
									"",
									"pm.test(\"burgerservicenummer\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].burgerservicenummer).to.eql(\"999990299\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.datum\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.datum.datum).to.eql(\"1999-09-09\");",
									"});",
									"",
									"pm.test(\"geboorte.datum.jaar\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.datum.jaar).to.eql(1999);",
									"});",
									"",
									"pm.test(\"geboorte.datum.maand\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.datum.maand).to.eql(9);",
									"});",
									"",
									"pm.test(\"geboorte.datum.dag\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.datum.dag).to.eql(9);",
									"});",
									"",
									"pm.test(\"geboorte.plaats Existence Match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.plaats).to.be.an(\"undefined\");",
									"});",
									"",
									"pm.test(\"geboorte.land Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geboorte.land).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/kinderen",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"kinderen"
							],
							"variable": [
								{
									"id": "6f16af38-3dd2-4254-8386-f8db6c27556f",
									"key": "burgerservicenummer",
									"value": "999991966",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Levert de kinderen van een persoon\n"
					},
					"response": []
				},
				{
					"name": "geen kinderen",
					"event": [
						{
							"script": {
								"id": "13cd4352-0668-4705-9400-0708bbd3d3ef",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"['_links'] (collection)\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_links'].self.href).to.eql(baseUrl + \"/ingeschrevenpersonen/\" + pm.variables.get(\"burgerservicenummer\") + \"/kinderen\");",
									"});",
									"",
									"pm.test(\"kinderen Existence\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen).to.be.an(\"undefined\");",
									"});",
									"",
									"/*",
									"    TODO: validate response to schema",
									"*/",
									""
								],
								"type": "text/javascript"
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/kinderen",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"kinderen"
							],
							"variable": [
								{
									"id": "f17ab0a5-d285-4a70-9ce7-977078b4b738",
									"key": "burgerservicenummer",
									"value": "000009866",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Levert de kinderen van een persoon\n"
					},
					"response": []
				},
				{
					"name": "indicatie geheim",
					"event": [
						{
							"script": {
								"type": "text/javascript",
								"exec": [
									"let baseUrl = pm.variables.get(\"baseUrl\");",
									"// zet query parameters in variabelen",
									"pm.request.url.query.members.forEach( p => pm.collectionVariables.set(p[\"key\"], decodeURI(p[\"value\"])) );",
									"",
									"pm.collectionVariables.set(\"burgerservicenummer\", pm.request.url.path[pm.request.url.path.length-2]); // get request path parameter(s)",
									"",
									"pm.test(\"Valid HTTP Status Codes\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									"",
									"pm.test(\"[0].geheimhoudingPersoonsgegevens\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[0].geheimhoudingPersoonsgegevens).to.eql(true);",
									"});",
									"",
									"pm.test(\"[1].geheimhoudingPersoonsgegevens\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData['_embedded'].kinderen[1].geheimhoudingPersoonsgegevens).to.eql(true);",
									"});",
									""
								]
							},
							"listen": "test"
						}
					],
					"request": {
						"method": "get",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/ingeschrevenpersonen/:burgerservicenummer/kinderen",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"ingeschrevenpersonen",
								":burgerservicenummer",
								"kinderen"
							],
							"variable": [
								{
									"id": "aeff8dd8-10c4-4c2d-8237-3b1fee074333",
									"key": "burgerservicenummer",
									"value": "999993483",
									"type": "string",
									"description": "Uniek persoonsnummer\n"
								}
							]
						},
						"description": "Levert de kinderen van een persoon\n"
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "RlI5nAFCOdzKcZIu2OsfwdvStf91Oh8k",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-API-KEY",
				"type": "string"
			},
			{
				"key": "in",
				"value": "header",
				"type": "string"
			}
		]
	},
	"variable": [
		{
			"id": "10536453-91cf-4052-b15c-407cd6a6fa4f",
			"key": "baseUrl",
			"value": "https://www.haalcentraal.nl/haalcentraal/api/brp"
		},
		{
			"id": "0a385fb6-00dd-4d15-95fc-f95392ad4e58",
			"key": "apikey",
			"value": null
		},
		{
			"id": "4b61b48f-b597-4746-b10c-9079a7a8f0a2",
			"key": "contenttype",
			"value": null
		},
		{
			"id": "51f5c5ee-a410-4787-9a4d-75aebd25bf07",
			"key": "apiversion",
			"value": null
		},
		{
			"id": "1ff17cd1-444a-47ff-b4ef-a0633f6d9a2e",
			"key": "saml",
			"value": null
		},
		{
			"id": "186458e2-bf00-47aa-8fca-5883d05c9d08",
			"key": "certificate",
			"value": null
		},
		{
			"id": "07d31a9d-8496-4da4-9d44-be50b47999a4",
			"key": "burgerservicenummer",
			"value": ""
		},
		{
			"id": "c5d6341f-44ac-4005-9397-f739e366631b",
			"key": "expand",
			"value": ""
		},
		{
			"id": "1288a635-a1aa-4915-b133-56cd42b4bf0f",
			"key": "fields",
			"value": ""
		},
		{
			"id": "e55fefec-6d98-42c2-a40d-6ff5b955f6e8",
			"key": "geboorte__datum",
			"value": ""
		},
		{
			"id": "aa8b4af9-a2ea-4858-bcaa-9195404b1329",
			"key": "naam__geslachtsnaam",
			"value": ""
		},
		{
			"id": "f96f467d-f59e-4eef-b701-15737b419209",
			"key": "verblijfplaats__gemeenteVanInschrijving",
			"value": ""
		},
		{
			"id": "2c871b20-73af-4bb9-8f70-ef21a961942f",
			"key": "relId",
			"value": ""
		},
		{
			"id": "0f818a71-45ee-495a-a596-73b187a18536",
			"key": "id",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}