# coding: utf-8

"""
    Bevragingen ingeschreven personen

    API voor het ontsluiten van gegevens van ingeschreven personen en aanverwante gegevens uit de GBA en RNI. Met deze API worden de actuele gegevens van ingeschreven personen, hun kinderen, partners en ouders ontsloten. <br> Heeft een persoon bijvoorbeeld geen geldige nationaliteit, dan wordt nationaliteit niet geretourneerd. <br> Heeft een persoon een beëindigd partnerschap of huwelijk, dan wordt de partner niet geretourneerd. <br> <br> Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/tree/master/features) voor nadere toelichting. <br>   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class IngeschrevenpersonenApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def ingeschreven_natuurlijk_personen(self, **kwargs):  # noqa: E501
        """ingeschreven_natuurlijk_personen  # noqa: E501

        Het ophalen van een collectie ingeschreven personen inclusief het verblijfsadres, ouders, partners, kinderen en reisdocumenten. Het betreft alleen actuele gegevens van de betreffende ingeschreven personen. Ten minste één van de volgende combinaties van parameters moet zijn opgenomen:   1.  Persoon     -  geboorte__datum     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) ) 2.  Persoon     -  verblijfplaats__gemeentevaninschrijving     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) ) 3.  Persoon     -  burgerservicenummer   4.  Postcode     -  verblijfplaats__postcode     -  verblijfplaats__huisnummer   5.  NaamOpenbareRuimte     -  verblijfplaats__naamopenbareruimte (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) )      -  verblijfplaats__gemeentevaninschrijving     -  verblijfplaats__huisnummer   6.  Nummeraanduiding     -  verblijfplaats__identificatiecodenummeraanduiding  De bovenstaande combinaties van parameters mogen gecombineerd worden met de overige beschikbare query-parameters, maar binnen iedere combinatie zijn de hier genoemde velden **verplicht**.   Default levert een zoekvraag alleen personen op die nog in leven zijn. Indien **_inclusiefoverledenpersonen_** de waarde **_true_** heeft worden [overleden personen](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature) opgenomen in het zoekresultaat.   Het maximale aantal zoekresultaten dat geretourneerd wordt is aan de provider om te bepalen. Als het resultaat van de de request dit aantal overtreft worden er geen resultaten geretourneerd en volgt er een foutmelding.    Er vind geen sortering plaats.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingeschreven_natuurlijk_personen(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str expand: Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature).
        :param str fields: Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)
        :param list[str] burgerservicenummer: Het burgerservicenummer, bedoeld in artikel 1.1 van de Wet algemene bepalingen burgerservicenummer. Alle nummers waarvoor geldt dat, indien aangeduid als (s0 s1 s2 s3 s4 s5 s6 s7 s8), het resultaat van (9*s0) + (8*s1) + (7*s2) +...+ (2*s7) - (1*s8) deelbaar is door elf. Er moeten dus 9 cijfers aanwezig zijn.
        :param date geboorte__datum: Datum waarop de INGESCHREVEN NATUURLIJK PERSOON geboren is. Er kan alleen gezocht worden met een volledige geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/parametervalidatie.feature)
        :param str geboorte__plaats: Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**
        :param GeslachtEnum geslachtsaanduiding: Een aanduiding die aangeeft dat de ingeschrevene een man of een vrouw is, of dat het geslacht (nog) onbekend is.
        :param bool inclusiefoverledenpersonen: Indien in het antwoord op de zoekvraag ook overleden personen moeten worden geretourneerd, dan dient de parameter *inclusiefOverledenPersonen* opgenomen te zijn met de waarde _True_. Indien de parameter *inclusiefOverledenPersonen* ontbreekt of de waarde _False_ heeft worden geen overleden personen opgenomen in het zoekresultaat. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature)
        :param str naam__geslachtsnaam: De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels en adellijke titel/predikaat zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**
        :param str naam__voornamen: De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**
        :param str verblijfplaats__gemeentevaninschrijving: Een code die aangeeft in welke gemeente de PL zich bevindt of de gemeente waarnaar de PL is uitgeschreven of de gemeente waar de PL voor de eerste keer is opgenomen. De waarde (0000) is geen geldige inhoud voor de query-parameter.
        :param str verblijfplaats__huisletter: Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken.
        :param int verblijfplaats__huisnummer: Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Alle natuurlijke getallen tussen 1 en 99999.
        :param str verblijfplaats__huisnummertoevoeging: Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. a - z , A - Z , 0 – 9
        :param str verblijfplaats__identificatiecodenummeraanduiding: De unieke aanduiding van een NUMMERAANDUIDING. Combinatie van de viercijferige 'gemeentecode' , de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding.
        :param str verblijfplaats__naamopenbareruimte: Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** Tekens gecodeerd volgens de UTF-8 standaard
        :param str verblijfplaats__postcode: De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer
        :param str naam__voorvoegsel: Dat deel van de geslachtsnaam dat voorkomt in de Voorvoegseltabel en, gescheiden door een spatie, vooraf gaat aan de rest van de geslachtsnaam. **De tabel bevat vorvoegsels met hoofdletters en met kleine letters. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: IngeschrevenPersoonHalCollectie
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.ingeschreven_natuurlijk_personen_with_http_info(**kwargs)  # noqa: E501

    def ingeschreven_natuurlijk_personen_with_http_info(self, **kwargs):  # noqa: E501
        """ingeschreven_natuurlijk_personen  # noqa: E501

        Het ophalen van een collectie ingeschreven personen inclusief het verblijfsadres, ouders, partners, kinderen en reisdocumenten. Het betreft alleen actuele gegevens van de betreffende ingeschreven personen. Ten minste één van de volgende combinaties van parameters moet zijn opgenomen:   1.  Persoon     -  geboorte__datum     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) ) 2.  Persoon     -  verblijfplaats__gemeentevaninschrijving     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) ) 3.  Persoon     -  burgerservicenummer   4.  Postcode     -  verblijfplaats__postcode     -  verblijfplaats__huisnummer   5.  NaamOpenbareRuimte     -  verblijfplaats__naamopenbareruimte (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) )      -  verblijfplaats__gemeentevaninschrijving     -  verblijfplaats__huisnummer   6.  Nummeraanduiding     -  verblijfplaats__identificatiecodenummeraanduiding  De bovenstaande combinaties van parameters mogen gecombineerd worden met de overige beschikbare query-parameters, maar binnen iedere combinatie zijn de hier genoemde velden **verplicht**.   Default levert een zoekvraag alleen personen op die nog in leven zijn. Indien **_inclusiefoverledenpersonen_** de waarde **_true_** heeft worden [overleden personen](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature) opgenomen in het zoekresultaat.   Het maximale aantal zoekresultaten dat geretourneerd wordt is aan de provider om te bepalen. Als het resultaat van de de request dit aantal overtreft worden er geen resultaten geretourneerd en volgt er een foutmelding.    Er vind geen sortering plaats.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingeschreven_natuurlijk_personen_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str expand: Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature).
        :param str fields: Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)
        :param list[str] burgerservicenummer: Het burgerservicenummer, bedoeld in artikel 1.1 van de Wet algemene bepalingen burgerservicenummer. Alle nummers waarvoor geldt dat, indien aangeduid als (s0 s1 s2 s3 s4 s5 s6 s7 s8), het resultaat van (9*s0) + (8*s1) + (7*s2) +...+ (2*s7) - (1*s8) deelbaar is door elf. Er moeten dus 9 cijfers aanwezig zijn.
        :param date geboorte__datum: Datum waarop de INGESCHREVEN NATUURLIJK PERSOON geboren is. Er kan alleen gezocht worden met een volledige geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/parametervalidatie.feature)
        :param str geboorte__plaats: Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**
        :param GeslachtEnum geslachtsaanduiding: Een aanduiding die aangeeft dat de ingeschrevene een man of een vrouw is, of dat het geslacht (nog) onbekend is.
        :param bool inclusiefoverledenpersonen: Indien in het antwoord op de zoekvraag ook overleden personen moeten worden geretourneerd, dan dient de parameter *inclusiefOverledenPersonen* opgenomen te zijn met de waarde _True_. Indien de parameter *inclusiefOverledenPersonen* ontbreekt of de waarde _False_ heeft worden geen overleden personen opgenomen in het zoekresultaat. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature)
        :param str naam__geslachtsnaam: De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels en adellijke titel/predikaat zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**
        :param str naam__voornamen: De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**
        :param str verblijfplaats__gemeentevaninschrijving: Een code die aangeeft in welke gemeente de PL zich bevindt of de gemeente waarnaar de PL is uitgeschreven of de gemeente waar de PL voor de eerste keer is opgenomen. De waarde (0000) is geen geldige inhoud voor de query-parameter.
        :param str verblijfplaats__huisletter: Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken.
        :param int verblijfplaats__huisnummer: Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Alle natuurlijke getallen tussen 1 en 99999.
        :param str verblijfplaats__huisnummertoevoeging: Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. a - z , A - Z , 0 – 9
        :param str verblijfplaats__identificatiecodenummeraanduiding: De unieke aanduiding van een NUMMERAANDUIDING. Combinatie van de viercijferige 'gemeentecode' , de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding.
        :param str verblijfplaats__naamopenbareruimte: Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** Tekens gecodeerd volgens de UTF-8 standaard
        :param str verblijfplaats__postcode: De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer
        :param str naam__voorvoegsel: Dat deel van de geslachtsnaam dat voorkomt in de Voorvoegseltabel en, gescheiden door een spatie, vooraf gaat aan de rest van de geslachtsnaam. **De tabel bevat vorvoegsels met hoofdletters en met kleine letters. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).**
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(IngeschrevenPersoonHalCollectie, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'expand',
            'fields',
            'burgerservicenummer',
            'geboorte__datum',
            'geboorte__plaats',
            'geslachtsaanduiding',
            'inclusiefoverledenpersonen',
            'naam__geslachtsnaam',
            'naam__voornamen',
            'verblijfplaats__gemeentevaninschrijving',
            'verblijfplaats__huisletter',
            'verblijfplaats__huisnummer',
            'verblijfplaats__huisnummertoevoeging',
            'verblijfplaats__identificatiecodenummeraanduiding',
            'verblijfplaats__naamopenbareruimte',
            'verblijfplaats__postcode',
            'naam__voorvoegsel'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ingeschreven_natuurlijk_personen" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and ('geboorte__plaats' in local_var_params and  # noqa: E501
                                                        len(local_var_params['geboorte__plaats']) > 40):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `geboorte__plaats` when calling `ingeschreven_natuurlijk_personen`, length must be less than or equal to `40`")  # noqa: E501
        if self.api_client.client_side_validation and ('naam__geslachtsnaam' in local_var_params and  # noqa: E501
                                                        len(local_var_params['naam__geslachtsnaam']) > 200):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `naam__geslachtsnaam` when calling `ingeschreven_natuurlijk_personen`, length must be less than or equal to `200`")  # noqa: E501
        if self.api_client.client_side_validation and ('naam__voornamen' in local_var_params and  # noqa: E501
                                                        len(local_var_params['naam__voornamen']) > 200):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `naam__voornamen` when calling `ingeschreven_natuurlijk_personen`, length must be less than or equal to `200`")  # noqa: E501
        if self.api_client.client_side_validation and ('verblijfplaats__gemeentevaninschrijving' in local_var_params and  # noqa: E501
                                                        len(local_var_params['verblijfplaats__gemeentevaninschrijving']) > 4):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `verblijfplaats__gemeentevaninschrijving` when calling `ingeschreven_natuurlijk_personen`, length must be less than or equal to `4`")  # noqa: E501
        if self.api_client.client_side_validation and ('verblijfplaats__huisletter' in local_var_params and  # noqa: E501
                                                        len(local_var_params['verblijfplaats__huisletter']) > 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `verblijfplaats__huisletter` when calling `ingeschreven_natuurlijk_personen`, length must be less than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'verblijfplaats__huisnummer' in local_var_params and local_var_params['verblijfplaats__huisnummer'] > 99999:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `verblijfplaats__huisnummer` when calling `ingeschreven_natuurlijk_personen`, must be a value less than or equal to `99999`")  # noqa: E501
        if self.api_client.client_side_validation and ('verblijfplaats__huisnummertoevoeging' in local_var_params and  # noqa: E501
                                                        len(local_var_params['verblijfplaats__huisnummertoevoeging']) > 4):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `verblijfplaats__huisnummertoevoeging` when calling `ingeschreven_natuurlijk_personen`, length must be less than or equal to `4`")  # noqa: E501
        if self.api_client.client_side_validation and ('verblijfplaats__identificatiecodenummeraanduiding' in local_var_params and  # noqa: E501
                                                        len(local_var_params['verblijfplaats__identificatiecodenummeraanduiding']) > 16):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `verblijfplaats__identificatiecodenummeraanduiding` when calling `ingeschreven_natuurlijk_personen`, length must be less than or equal to `16`")  # noqa: E501
        if self.api_client.client_side_validation and ('verblijfplaats__naamopenbareruimte' in local_var_params and  # noqa: E501
                                                        len(local_var_params['verblijfplaats__naamopenbareruimte']) > 80):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `verblijfplaats__naamopenbareruimte` when calling `ingeschreven_natuurlijk_personen`, length must be less than or equal to `80`")  # noqa: E501
        if self.api_client.client_side_validation and 'verblijfplaats__postcode' in local_var_params and not re.search(r'^[1-9]{1}[0-9]{3}[A-Z]{2}$', local_var_params['verblijfplaats__postcode']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `verblijfplaats__postcode` when calling `ingeschreven_natuurlijk_personen`, must conform to the pattern `/^[1-9]{1}[0-9]{3}[A-Z]{2}$/`")  # noqa: E501
        if self.api_client.client_side_validation and ('naam__voorvoegsel' in local_var_params and  # noqa: E501
                                                        len(local_var_params['naam__voorvoegsel']) > 10):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `naam__voorvoegsel` when calling `ingeschreven_natuurlijk_personen`, length must be less than or equal to `10`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in local_var_params and local_var_params['expand'] is not None:  # noqa: E501
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'burgerservicenummer' in local_var_params and local_var_params['burgerservicenummer'] is not None:  # noqa: E501
            query_params.append(('burgerservicenummer', local_var_params['burgerservicenummer']))  # noqa: E501
            collection_formats['burgerservicenummer'] = 'csv'  # noqa: E501
        if 'geboorte__datum' in local_var_params and local_var_params['geboorte__datum'] is not None:  # noqa: E501
            query_params.append(('geboorte__datum', local_var_params['geboorte__datum']))  # noqa: E501
        if 'geboorte__plaats' in local_var_params and local_var_params['geboorte__plaats'] is not None:  # noqa: E501
            query_params.append(('geboorte__plaats', local_var_params['geboorte__plaats']))  # noqa: E501
        if 'geslachtsaanduiding' in local_var_params and local_var_params['geslachtsaanduiding'] is not None:  # noqa: E501
            query_params.append(('geslachtsaanduiding', local_var_params['geslachtsaanduiding']))  # noqa: E501
        if 'inclusiefoverledenpersonen' in local_var_params and local_var_params['inclusiefoverledenpersonen'] is not None:  # noqa: E501
            query_params.append(('inclusiefoverledenpersonen', local_var_params['inclusiefoverledenpersonen']))  # noqa: E501
        if 'naam__geslachtsnaam' in local_var_params and local_var_params['naam__geslachtsnaam'] is not None:  # noqa: E501
            query_params.append(('naam__geslachtsnaam', local_var_params['naam__geslachtsnaam']))  # noqa: E501
        if 'naam__voornamen' in local_var_params and local_var_params['naam__voornamen'] is not None:  # noqa: E501
            query_params.append(('naam__voornamen', local_var_params['naam__voornamen']))  # noqa: E501
        if 'verblijfplaats__gemeentevaninschrijving' in local_var_params and local_var_params['verblijfplaats__gemeentevaninschrijving'] is not None:  # noqa: E501
            query_params.append(('verblijfplaats__gemeentevaninschrijving', local_var_params['verblijfplaats__gemeentevaninschrijving']))  # noqa: E501
        if 'verblijfplaats__huisletter' in local_var_params and local_var_params['verblijfplaats__huisletter'] is not None:  # noqa: E501
            query_params.append(('verblijfplaats__huisletter', local_var_params['verblijfplaats__huisletter']))  # noqa: E501
        if 'verblijfplaats__huisnummer' in local_var_params and local_var_params['verblijfplaats__huisnummer'] is not None:  # noqa: E501
            query_params.append(('verblijfplaats__huisnummer', local_var_params['verblijfplaats__huisnummer']))  # noqa: E501
        if 'verblijfplaats__huisnummertoevoeging' in local_var_params and local_var_params['verblijfplaats__huisnummertoevoeging'] is not None:  # noqa: E501
            query_params.append(('verblijfplaats__huisnummertoevoeging', local_var_params['verblijfplaats__huisnummertoevoeging']))  # noqa: E501
        if 'verblijfplaats__identificatiecodenummeraanduiding' in local_var_params and local_var_params['verblijfplaats__identificatiecodenummeraanduiding'] is not None:  # noqa: E501
            query_params.append(('verblijfplaats__identificatiecodenummeraanduiding', local_var_params['verblijfplaats__identificatiecodenummeraanduiding']))  # noqa: E501
        if 'verblijfplaats__naamopenbareruimte' in local_var_params and local_var_params['verblijfplaats__naamopenbareruimte'] is not None:  # noqa: E501
            query_params.append(('verblijfplaats__naamopenbareruimte', local_var_params['verblijfplaats__naamopenbareruimte']))  # noqa: E501
        if 'verblijfplaats__postcode' in local_var_params and local_var_params['verblijfplaats__postcode'] is not None:  # noqa: E501
            query_params.append(('verblijfplaats__postcode', local_var_params['verblijfplaats__postcode']))  # noqa: E501
        if 'naam__voorvoegsel' in local_var_params and local_var_params['naam__voorvoegsel'] is not None:  # noqa: E501
            query_params.append(('naam__voorvoegsel', local_var_params['naam__voorvoegsel']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ingeschrevenpersonen', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IngeschrevenPersoonHalCollectie',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ingeschreven_natuurlijk_persoon(self, burgerservicenummer, **kwargs):  # noqa: E501
        """ingeschreven_natuurlijk_persoon  # noqa: E501

        Het ophalen de actuele gegevens van een Ingeschreven Persoon, inclusief verblijfplaats, kinderen, partners en ouders. Het betreft alleen actuele gegevens van de betreffende ingeschreven personen.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingeschreven_natuurlijk_persoon(burgerservicenummer, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: (required)
        :param str expand: Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature).
        :param str fields: Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: IngeschrevenPersoonHal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.ingeschreven_natuurlijk_persoon_with_http_info(burgerservicenummer, **kwargs)  # noqa: E501

    def ingeschreven_natuurlijk_persoon_with_http_info(self, burgerservicenummer, **kwargs):  # noqa: E501
        """ingeschreven_natuurlijk_persoon  # noqa: E501

        Het ophalen de actuele gegevens van een Ingeschreven Persoon, inclusief verblijfplaats, kinderen, partners en ouders. Het betreft alleen actuele gegevens van de betreffende ingeschreven personen.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingeschreven_natuurlijk_persoon_with_http_info(burgerservicenummer, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: (required)
        :param str expand: Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature).
        :param str fields: Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(IngeschrevenPersoonHal, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'burgerservicenummer',
            'expand',
            'fields'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ingeschreven_natuurlijk_persoon" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'burgerservicenummer' is set
        if self.api_client.client_side_validation and ('burgerservicenummer' not in local_var_params or  # noqa: E501
                                                        local_var_params['burgerservicenummer'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `burgerservicenummer` when calling `ingeschreven_natuurlijk_persoon`")  # noqa: E501

        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) > 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `ingeschreven_natuurlijk_persoon`, length must be less than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) < 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `ingeschreven_natuurlijk_persoon`, length must be greater than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and 'burgerservicenummer' in local_var_params and not re.search(r'^[0-9]*$', local_var_params['burgerservicenummer']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `ingeschreven_natuurlijk_persoon`, must conform to the pattern `/^[0-9]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'burgerservicenummer' in local_var_params:
            path_params['burgerservicenummer'] = local_var_params['burgerservicenummer']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params and local_var_params['expand'] is not None:  # noqa: E501
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ingeschrevenpersonen/{burgerservicenummer}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IngeschrevenPersoonHal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ingeschrevenpersonen_burgerservicenummerkinderen(self, burgerservicenummer, **kwargs):  # noqa: E501
        """ingeschrevenpersonen_burgerservicenummerkinderen  # noqa: E501

        Het ophalen de kind-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Er vind geen sortering plaats.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingeschrevenpersonen_burgerservicenummerkinderen(burgerservicenummer, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: KindHalCollectie
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.ingeschrevenpersonen_burgerservicenummerkinderen_with_http_info(burgerservicenummer, **kwargs)  # noqa: E501

    def ingeschrevenpersonen_burgerservicenummerkinderen_with_http_info(self, burgerservicenummer, **kwargs):  # noqa: E501
        """ingeschrevenpersonen_burgerservicenummerkinderen  # noqa: E501

        Het ophalen de kind-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Er vind geen sortering plaats.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingeschrevenpersonen_burgerservicenummerkinderen_with_http_info(burgerservicenummer, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(KindHalCollectie, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'burgerservicenummer'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ingeschrevenpersonen_burgerservicenummerkinderen" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'burgerservicenummer' is set
        if self.api_client.client_side_validation and ('burgerservicenummer' not in local_var_params or  # noqa: E501
                                                        local_var_params['burgerservicenummer'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerkinderen`")  # noqa: E501

        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) > 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerkinderen`, length must be less than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) < 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerkinderen`, length must be greater than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and 'burgerservicenummer' in local_var_params and not re.search(r'^[0-9]*$', local_var_params['burgerservicenummer']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerkinderen`, must conform to the pattern `/^[0-9]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'burgerservicenummer' in local_var_params:
            path_params['burgerservicenummer'] = local_var_params['burgerservicenummer']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ingeschrevenpersonen/{burgerservicenummer}/kinderen', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KindHalCollectie',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ingeschrevenpersonen_burgerservicenummerkinderen_id(self, burgerservicenummer, id, **kwargs):  # noqa: E501
        """ingeschrevenpersonen_burgerservicenummerkinderen_id  # noqa: E501

        Het ophalen de kind-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingeschrevenpersonen_burgerservicenummerkinderen_id(burgerservicenummer, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: (required)
        :param str id: De identificatie van het kind. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: KindHal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.ingeschrevenpersonen_burgerservicenummerkinderen_id_with_http_info(burgerservicenummer, id, **kwargs)  # noqa: E501

    def ingeschrevenpersonen_burgerservicenummerkinderen_id_with_http_info(self, burgerservicenummer, id, **kwargs):  # noqa: E501
        """ingeschrevenpersonen_burgerservicenummerkinderen_id  # noqa: E501

        Het ophalen de kind-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingeschrevenpersonen_burgerservicenummerkinderen_id_with_http_info(burgerservicenummer, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: (required)
        :param str id: De identificatie van het kind. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(KindHal, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'burgerservicenummer',
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ingeschrevenpersonen_burgerservicenummerkinderen_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'burgerservicenummer' is set
        if self.api_client.client_side_validation and ('burgerservicenummer' not in local_var_params or  # noqa: E501
                                                        local_var_params['burgerservicenummer'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerkinderen_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `ingeschrevenpersonen_burgerservicenummerkinderen_id`")  # noqa: E501

        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) > 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerkinderen_id`, length must be less than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) < 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerkinderen_id`, length must be greater than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and 'burgerservicenummer' in local_var_params and not re.search(r'^[0-9]*$', local_var_params['burgerservicenummer']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerkinderen_id`, must conform to the pattern `/^[0-9]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'burgerservicenummer' in local_var_params:
            path_params['burgerservicenummer'] = local_var_params['burgerservicenummer']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ingeschrevenpersonen/{burgerservicenummer}/kinderen/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KindHal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ingeschrevenpersonen_burgerservicenummerouders(self, burgerservicenummer, **kwargs):  # noqa: E501
        """ingeschrevenpersonen_burgerservicenummerouders  # noqa: E501

        Het ophalen de ouder-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Er vind geen sortering plaats.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingeschrevenpersonen_burgerservicenummerouders(burgerservicenummer, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: OuderHalCollectie
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.ingeschrevenpersonen_burgerservicenummerouders_with_http_info(burgerservicenummer, **kwargs)  # noqa: E501

    def ingeschrevenpersonen_burgerservicenummerouders_with_http_info(self, burgerservicenummer, **kwargs):  # noqa: E501
        """ingeschrevenpersonen_burgerservicenummerouders  # noqa: E501

        Het ophalen de ouder-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Er vind geen sortering plaats.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingeschrevenpersonen_burgerservicenummerouders_with_http_info(burgerservicenummer, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(OuderHalCollectie, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'burgerservicenummer'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ingeschrevenpersonen_burgerservicenummerouders" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'burgerservicenummer' is set
        if self.api_client.client_side_validation and ('burgerservicenummer' not in local_var_params or  # noqa: E501
                                                        local_var_params['burgerservicenummer'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerouders`")  # noqa: E501

        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) > 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerouders`, length must be less than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) < 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerouders`, length must be greater than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and 'burgerservicenummer' in local_var_params and not re.search(r'^[0-9]*$', local_var_params['burgerservicenummer']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerouders`, must conform to the pattern `/^[0-9]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'burgerservicenummer' in local_var_params:
            path_params['burgerservicenummer'] = local_var_params['burgerservicenummer']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ingeschrevenpersonen/{burgerservicenummer}/ouders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OuderHalCollectie',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ingeschrevenpersonen_burgerservicenummerouders_id(self, burgerservicenummer, id, **kwargs):  # noqa: E501
        """ingeschrevenpersonen_burgerservicenummerouders_id  # noqa: E501

        Het ophalen de ouder-gegevens van een van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen..  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingeschrevenpersonen_burgerservicenummerouders_id(burgerservicenummer, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: (required)
        :param str id: De identificatie van de ouder. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: OuderHal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.ingeschrevenpersonen_burgerservicenummerouders_id_with_http_info(burgerservicenummer, id, **kwargs)  # noqa: E501

    def ingeschrevenpersonen_burgerservicenummerouders_id_with_http_info(self, burgerservicenummer, id, **kwargs):  # noqa: E501
        """ingeschrevenpersonen_burgerservicenummerouders_id  # noqa: E501

        Het ophalen de ouder-gegevens van een van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen..  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingeschrevenpersonen_burgerservicenummerouders_id_with_http_info(burgerservicenummer, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: (required)
        :param str id: De identificatie van de ouder. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(OuderHal, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'burgerservicenummer',
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ingeschrevenpersonen_burgerservicenummerouders_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'burgerservicenummer' is set
        if self.api_client.client_side_validation and ('burgerservicenummer' not in local_var_params or  # noqa: E501
                                                        local_var_params['burgerservicenummer'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerouders_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `ingeschrevenpersonen_burgerservicenummerouders_id`")  # noqa: E501

        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) > 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerouders_id`, length must be less than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) < 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerouders_id`, length must be greater than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and 'burgerservicenummer' in local_var_params and not re.search(r'^[0-9]*$', local_var_params['burgerservicenummer']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerouders_id`, must conform to the pattern `/^[0-9]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'burgerservicenummer' in local_var_params:
            path_params['burgerservicenummer'] = local_var_params['burgerservicenummer']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ingeschrevenpersonen/{burgerservicenummer}/ouders/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OuderHal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ingeschrevenpersonen_burgerservicenummerpartners(self, burgerservicenummer, **kwargs):  # noqa: E501
        """ingeschrevenpersonen_burgerservicenummerpartners  # noqa: E501

        Het ophalen de actuele partner-gegevens van een van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Een beëindigd huwelijk of geregistreerd partnerschap wordt niet opgenomen in het antwoord. De gevonden huwelijken/partnerschappen worden ongesorteerd teruggegeven.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingeschrevenpersonen_burgerservicenummerpartners(burgerservicenummer, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PartnerHalCollectie
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.ingeschrevenpersonen_burgerservicenummerpartners_with_http_info(burgerservicenummer, **kwargs)  # noqa: E501

    def ingeschrevenpersonen_burgerservicenummerpartners_with_http_info(self, burgerservicenummer, **kwargs):  # noqa: E501
        """ingeschrevenpersonen_burgerservicenummerpartners  # noqa: E501

        Het ophalen de actuele partner-gegevens van een van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Een beëindigd huwelijk of geregistreerd partnerschap wordt niet opgenomen in het antwoord. De gevonden huwelijken/partnerschappen worden ongesorteerd teruggegeven.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingeschrevenpersonen_burgerservicenummerpartners_with_http_info(burgerservicenummer, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PartnerHalCollectie, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'burgerservicenummer'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ingeschrevenpersonen_burgerservicenummerpartners" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'burgerservicenummer' is set
        if self.api_client.client_side_validation and ('burgerservicenummer' not in local_var_params or  # noqa: E501
                                                        local_var_params['burgerservicenummer'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerpartners`")  # noqa: E501

        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) > 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerpartners`, length must be less than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) < 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerpartners`, length must be greater than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and 'burgerservicenummer' in local_var_params and not re.search(r'^[0-9]*$', local_var_params['burgerservicenummer']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerpartners`, must conform to the pattern `/^[0-9]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'burgerservicenummer' in local_var_params:
            path_params['burgerservicenummer'] = local_var_params['burgerservicenummer']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ingeschrevenpersonen/{burgerservicenummer}/partners', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartnerHalCollectie',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def ingeschrevenpersonen_burgerservicenummerpartners_id(self, burgerservicenummer, id, **kwargs):  # noqa: E501
        """ingeschrevenpersonen_burgerservicenummerpartners_id  # noqa: E501

        Het ophalen de partner-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingeschrevenpersonen_burgerservicenummerpartners_id(burgerservicenummer, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: (required)
        :param str id: De identificatie van de partner. (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PartnerHal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.ingeschrevenpersonen_burgerservicenummerpartners_id_with_http_info(burgerservicenummer, id, **kwargs)  # noqa: E501

    def ingeschrevenpersonen_burgerservicenummerpartners_id_with_http_info(self, burgerservicenummer, id, **kwargs):  # noqa: E501
        """ingeschrevenpersonen_burgerservicenummerpartners_id  # noqa: E501

        Het ophalen de partner-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.ingeschrevenpersonen_burgerservicenummerpartners_id_with_http_info(burgerservicenummer, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: (required)
        :param str id: De identificatie van de partner. (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PartnerHal, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'burgerservicenummer',
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method ingeschrevenpersonen_burgerservicenummerpartners_id" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'burgerservicenummer' is set
        if self.api_client.client_side_validation and ('burgerservicenummer' not in local_var_params or  # noqa: E501
                                                        local_var_params['burgerservicenummer'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerpartners_id`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `ingeschrevenpersonen_burgerservicenummerpartners_id`")  # noqa: E501

        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) > 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerpartners_id`, length must be less than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) < 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerpartners_id`, length must be greater than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and 'burgerservicenummer' in local_var_params and not re.search(r'^[0-9]*$', local_var_params['burgerservicenummer']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `ingeschrevenpersonen_burgerservicenummerpartners_id`, must conform to the pattern `/^[0-9]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'burgerservicenummer' in local_var_params:
            path_params['burgerservicenummer'] = local_var_params['burgerservicenummer']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ingeschrevenpersonen/{burgerservicenummer}/partners/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartnerHal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
