"""
    Bevragen Ingeschreven Personen

    API voor het bevragen van ingeschreven personen uit de basisregistratie personen (BRP), inclusief de registratie niet-ingezeten (RNI). Met deze API kun je personen zoeken en actuele gegevens over personen, kinderen, partners en ouders raadplegen.  Gegevens die er niet zijn of niet actueel zijn krijg je niet terug. Heeft een persoon bijvoorbeeld geen geldige nationaliteit, en alleen een beëindigd partnerschap, dan krijg je geen gegevens over nationaliteit en partner.  Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/tree/v1.1.0/features) voor nadere toelichting.   # noqa: E501

    The version of the OpenAPI document: 1.2.0
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from openapi_client.api_client import ApiClient, Endpoint
from openapi_client.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from openapi_client.model.bad_request_foutbericht import BadRequestFoutbericht
from openapi_client.model.foutbericht import Foutbericht
from openapi_client.model.geslacht_enum import GeslachtEnum
from openapi_client.model.ingeschreven_persoon_hal import IngeschrevenPersoonHal
from openapi_client.model.ingeschreven_persoon_hal_collectie import IngeschrevenPersoonHalCollectie
from openapi_client.model.kind_hal_basis import KindHalBasis
from openapi_client.model.kind_hal_collectie import KindHalCollectie
from openapi_client.model.ouder_hal_basis import OuderHalBasis
from openapi_client.model.ouder_hal_collectie import OuderHalCollectie
from openapi_client.model.partner_hal_basis import PartnerHalBasis
from openapi_client.model.partner_hal_collectie import PartnerHalCollectie


class IngeschrevenPersonenApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

        def __get_ingeschreven_personen(
            self,
            **kwargs
        ):
            """Vindt personen  # noqa: E501

            Zoek personen met één van de onderstaande verplichte combinaties van parameters en vul ze evt. aan met parameters uit de andere combinaties.   Default krijg je personen terug die nog in leven zijn, tenzij je de inclusiefoverledenpersonen=true opgeeft.   Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature)   Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature)   1.  Persoon     -  geboorte__datum     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   2.  Persoon     -  verblijfplaats__gemeenteVanInschrijving     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   3.  Persoon     -  burgerservicenummer   4.  Postcode     -  verblijfplaats__postcode     -  verblijfplaats__huisnummer   5.  Straat     -  verblijfplaats__straat (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) )     -  verblijfplaats__gemeenteVanInschrijving     -  verblijfplaats__huisnummer   6.  Adres     -  verblijfplaats__nummeraanduidingIdentificatie   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_ingeschreven_personen(async_req=True)
            >>> result = thread.get()


            Keyword Args:
                expand (str): Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).. [optional]
                fields (str): Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature). [optional]
                burgerservicenummer ([str]): Uniek persoonsnummer. . [optional]
                geboorte__datum (date): Je kunt alleen zoeken met een volledig geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/parametervalidatie.feature) . [optional]
                geboorte__plaats (str): Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/case_insensitive.feature).** . [optional]
                geslachtsaanduiding (GeslachtEnum): Geeft aan dat de persoon een man of een vrouw is, of dat het geslacht (nog) onbekend is. . [optional]
                inclusief_overleden_personen (bool): Als je ook overleden personen in het antwoord wilt, geef dan de parameter inclusiefOverledenPersonen op met waarde True.  Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/overleden_personen.feature) . [optional]
                naam__geslachtsnaam (str): De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/case_insensitive.feature).** . [optional]
                naam__voorvoegsel (str): Deel van de geslachtsnaam dat vooraf gaat aan de rest van de geslachtsnaam. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/case_insensitive.feature).** . [optional]
                naam__voornamen (str): De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/case_insensitive.feature).** . [optional]
                verblijfplaats__gemeente_van_inschrijving (str): Een code die aangeeft in welke gemeente de persoon woont, of de laatste gemeente waar de persoon heeft gewoond, of de gemeente waar de persoon voor het eerst is ingeschreven. . [optional]
                verblijfplaats__huisletter (str): Een toevoeging aan een huisnummer in de vorm van een letter die door de gemeente aan een adresseerbaar object is gegeven. . [optional]
                verblijfplaats__huisnummer (int): Een nummer dat door de gemeente aan een adresseerbaar object is gegeven. . [optional]
                verblijfplaats__huisnummertoevoeging (str): Een toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter die door de gemeente aan een adresseerbaar object is gegeven. . [optional]
                verblijfplaats__nummeraanduiding_identificatie (str): Unieke identificatie van een nummeraanduiding (en het bijbehorende adres) in de BAG. . [optional]
                verblijfplaats__straat (str): Een naam die door de gemeente aan een openbare ruimte is gegeven. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/case_insensitive.feature). . [optional]
                verblijfplaats__postcode (str): De door PostNL vastgestelde code die bij een bepaalde combinatie van een straatnaam en een huisnummer hoort. . [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IngeschrevenPersoonHalCollectie
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            return self.call_with_http_info(**kwargs)

        self.get_ingeschreven_personen = Endpoint(
            settings={
                'response_type': (IngeschrevenPersoonHalCollectie,),
                'auth': [],
                'endpoint_path': '/ingeschrevenpersonen',
                'operation_id': 'get_ingeschreven_personen',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'expand',
                    'fields',
                    'burgerservicenummer',
                    'geboorte__datum',
                    'geboorte__plaats',
                    'geslachtsaanduiding',
                    'inclusief_overleden_personen',
                    'naam__geslachtsnaam',
                    'naam__voorvoegsel',
                    'naam__voornamen',
                    'verblijfplaats__gemeente_van_inschrijving',
                    'verblijfplaats__huisletter',
                    'verblijfplaats__huisnummer',
                    'verblijfplaats__huisnummertoevoeging',
                    'verblijfplaats__nummeraanduiding_identificatie',
                    'verblijfplaats__straat',
                    'verblijfplaats__postcode',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'geboorte__plaats',
                    'naam__geslachtsnaam',
                    'naam__voorvoegsel',
                    'naam__voornamen',
                    'verblijfplaats__gemeente_van_inschrijving',
                    'verblijfplaats__huisletter',
                    'verblijfplaats__huisnummer',
                    'verblijfplaats__huisnummertoevoeging',
                    'verblijfplaats__nummeraanduiding_identificatie',
                    'verblijfplaats__straat',
                    'verblijfplaats__postcode',
                ]
            },
            root_map={
                'validations': {
                    ('geboorte__plaats',): {
                        'max_length': 40,
                    },
                    ('naam__geslachtsnaam',): {
                        'max_length': 200,
                    },
                    ('naam__voorvoegsel',): {
                        'max_length': 10,
                    },
                    ('naam__voornamen',): {
                        'max_length': 200,
                    },
                    ('verblijfplaats__gemeente_van_inschrijving',): {
                        'max_length': 4,
                    },
                    ('verblijfplaats__huisletter',): {
                        'max_length': 1,
                    },
                    ('verblijfplaats__huisnummer',): {

                        'inclusive_maximum': 99999,
                    },
                    ('verblijfplaats__huisnummertoevoeging',): {
                        'max_length': 4,
                    },
                    ('verblijfplaats__nummeraanduiding_identificatie',): {
                        'max_length': 16,
                    },
                    ('verblijfplaats__straat',): {
                        'max_length': 80,
                    },
                    ('verblijfplaats__postcode',): {

                        'regex': {
                            'pattern': r'^[1-9]{1}[0-9]{3}[A-Z]{2}$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'expand':
                        (str,),
                    'fields':
                        (str,),
                    'burgerservicenummer':
                        ([str],),
                    'geboorte__datum':
                        (date,),
                    'geboorte__plaats':
                        (str,),
                    'geslachtsaanduiding':
                        (GeslachtEnum,),
                    'inclusief_overleden_personen':
                        (bool,),
                    'naam__geslachtsnaam':
                        (str,),
                    'naam__voorvoegsel':
                        (str,),
                    'naam__voornamen':
                        (str,),
                    'verblijfplaats__gemeente_van_inschrijving':
                        (str,),
                    'verblijfplaats__huisletter':
                        (str,),
                    'verblijfplaats__huisnummer':
                        (int,),
                    'verblijfplaats__huisnummertoevoeging':
                        (str,),
                    'verblijfplaats__nummeraanduiding_identificatie':
                        (str,),
                    'verblijfplaats__straat':
                        (str,),
                    'verblijfplaats__postcode':
                        (str,),
                },
                'attribute_map': {
                    'expand': 'expand',
                    'fields': 'fields',
                    'burgerservicenummer': 'burgerservicenummer',
                    'geboorte__datum': 'geboorte__datum',
                    'geboorte__plaats': 'geboorte__plaats',
                    'geslachtsaanduiding': 'geslachtsaanduiding',
                    'inclusief_overleden_personen': 'inclusiefOverledenPersonen',
                    'naam__geslachtsnaam': 'naam__geslachtsnaam',
                    'naam__voorvoegsel': 'naam__voorvoegsel',
                    'naam__voornamen': 'naam__voornamen',
                    'verblijfplaats__gemeente_van_inschrijving': 'verblijfplaats__gemeenteVanInschrijving',
                    'verblijfplaats__huisletter': 'verblijfplaats__huisletter',
                    'verblijfplaats__huisnummer': 'verblijfplaats__huisnummer',
                    'verblijfplaats__huisnummertoevoeging': 'verblijfplaats__huisnummertoevoeging',
                    'verblijfplaats__nummeraanduiding_identificatie': 'verblijfplaats__nummeraanduidingIdentificatie',
                    'verblijfplaats__straat': 'verblijfplaats__straat',
                    'verblijfplaats__postcode': 'verblijfplaats__postcode',
                },
                'location_map': {
                    'expand': 'query',
                    'fields': 'query',
                    'burgerservicenummer': 'query',
                    'geboorte__datum': 'query',
                    'geboorte__plaats': 'query',
                    'geslachtsaanduiding': 'query',
                    'inclusief_overleden_personen': 'query',
                    'naam__geslachtsnaam': 'query',
                    'naam__voorvoegsel': 'query',
                    'naam__voornamen': 'query',
                    'verblijfplaats__gemeente_van_inschrijving': 'query',
                    'verblijfplaats__huisletter': 'query',
                    'verblijfplaats__huisnummer': 'query',
                    'verblijfplaats__huisnummertoevoeging': 'query',
                    'verblijfplaats__nummeraanduiding_identificatie': 'query',
                    'verblijfplaats__straat': 'query',
                    'verblijfplaats__postcode': 'query',
                },
                'collection_format_map': {
                    'burgerservicenummer': 'csv',
                }
            },
            headers_map={
                'accept': [
                    'application/hal+json',
                    'application/problem+json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_ingeschreven_personen
        )

        def __get_ingeschreven_persoon(
            self,
            burgerservicenummer,
            **kwargs
        ):
            """Raadpleeg een persoon  # noqa: E501

            Raadpleeg een (overleden) persoon.  Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/fields_extensie.feature).  Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_ingeschreven_persoon(burgerservicenummer, async_req=True)
            >>> result = thread.get()

            Args:
                burgerservicenummer (str): Uniek persoonsnummer 

            Keyword Args:
                expand (str): Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/expand.feature).. [optional]
                fields (str): Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/fields.feature). [optional]
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                IngeschrevenPersoonHal
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['burgerservicenummer'] = \
                burgerservicenummer
            return self.call_with_http_info(**kwargs)

        self.get_ingeschreven_persoon = Endpoint(
            settings={
                'response_type': (IngeschrevenPersoonHal,),
                'auth': [],
                'endpoint_path': '/ingeschrevenpersonen/{burgerservicenummer}',
                'operation_id': 'get_ingeschreven_persoon',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'burgerservicenummer',
                    'expand',
                    'fields',
                ],
                'required': [
                    'burgerservicenummer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'burgerservicenummer',
                ]
            },
            root_map={
                'validations': {
                    ('burgerservicenummer',): {
                        'max_length': 9,
                        'min_length': 9,
                        'regex': {
                            'pattern': r'^[0-9]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'burgerservicenummer':
                        (str,),
                    'expand':
                        (str,),
                    'fields':
                        (str,),
                },
                'attribute_map': {
                    'burgerservicenummer': 'burgerservicenummer',
                    'expand': 'expand',
                    'fields': 'fields',
                },
                'location_map': {
                    'burgerservicenummer': 'path',
                    'expand': 'query',
                    'fields': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/hal+json',
                    'application/problem+json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_ingeschreven_persoon
        )

        def __get_kind(
            self,
            burgerservicenummer,
            id,
            **kwargs
        ):
            """Raadpleeg een kind van een persoon  # noqa: E501

            Raadpleeg een kind van een persoon   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_kind(burgerservicenummer, id, async_req=True)
            >>> result = thread.get()

            Args:
                burgerservicenummer (str): Uniek persoonsnummer 
                id (str): De identificatie van het kind. 

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                KindHalBasis
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['burgerservicenummer'] = \
                burgerservicenummer
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_kind = Endpoint(
            settings={
                'response_type': (KindHalBasis,),
                'auth': [],
                'endpoint_path': '/ingeschrevenpersonen/{burgerservicenummer}/kinderen/{id}',
                'operation_id': 'get_kind',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'burgerservicenummer',
                    'id',
                ],
                'required': [
                    'burgerservicenummer',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'burgerservicenummer',
                ]
            },
            root_map={
                'validations': {
                    ('burgerservicenummer',): {
                        'max_length': 9,
                        'min_length': 9,
                        'regex': {
                            'pattern': r'^[0-9]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'burgerservicenummer':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'burgerservicenummer': 'burgerservicenummer',
                    'id': 'id',
                },
                'location_map': {
                    'burgerservicenummer': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/hal+json',
                    'application/problem+json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_kind
        )

        def __get_kinderen(
            self,
            burgerservicenummer,
            **kwargs
        ):
            """Levert de kinderen van een persoon  # noqa: E501

            Levert de kinderen van een persoon   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_kinderen(burgerservicenummer, async_req=True)
            >>> result = thread.get()

            Args:
                burgerservicenummer (str): Uniek persoonsnummer 

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                KindHalCollectie
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['burgerservicenummer'] = \
                burgerservicenummer
            return self.call_with_http_info(**kwargs)

        self.get_kinderen = Endpoint(
            settings={
                'response_type': (KindHalCollectie,),
                'auth': [],
                'endpoint_path': '/ingeschrevenpersonen/{burgerservicenummer}/kinderen',
                'operation_id': 'get_kinderen',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'burgerservicenummer',
                ],
                'required': [
                    'burgerservicenummer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'burgerservicenummer',
                ]
            },
            root_map={
                'validations': {
                    ('burgerservicenummer',): {
                        'max_length': 9,
                        'min_length': 9,
                        'regex': {
                            'pattern': r'^[0-9]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'burgerservicenummer':
                        (str,),
                },
                'attribute_map': {
                    'burgerservicenummer': 'burgerservicenummer',
                },
                'location_map': {
                    'burgerservicenummer': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/hal+json',
                    'application/problem+json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_kinderen
        )

        def __get_ouder(
            self,
            burgerservicenummer,
            id,
            **kwargs
        ):
            """Raadpleeg een ouder van een persoon  # noqa: E501

            Raadpleeg een ouder van een persoon   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_ouder(burgerservicenummer, id, async_req=True)
            >>> result = thread.get()

            Args:
                burgerservicenummer (str): Uniek persoonsnummer 
                id (str): De identificatie van de ouder. 

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OuderHalBasis
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['burgerservicenummer'] = \
                burgerservicenummer
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_ouder = Endpoint(
            settings={
                'response_type': (OuderHalBasis,),
                'auth': [],
                'endpoint_path': '/ingeschrevenpersonen/{burgerservicenummer}/ouders/{id}',
                'operation_id': 'get_ouder',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'burgerservicenummer',
                    'id',
                ],
                'required': [
                    'burgerservicenummer',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'burgerservicenummer',
                ]
            },
            root_map={
                'validations': {
                    ('burgerservicenummer',): {
                        'max_length': 9,
                        'min_length': 9,
                        'regex': {
                            'pattern': r'^[0-9]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'burgerservicenummer':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'burgerservicenummer': 'burgerservicenummer',
                    'id': 'id',
                },
                'location_map': {
                    'burgerservicenummer': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/hal+json',
                    'application/problem+json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_ouder
        )

        def __get_ouders(
            self,
            burgerservicenummer,
            **kwargs
        ):
            """Levert de ouders van een persoon  # noqa: E501

            Levert de ouders van een persoon   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_ouders(burgerservicenummer, async_req=True)
            >>> result = thread.get()

            Args:
                burgerservicenummer (str): Uniek persoonsnummer 

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                OuderHalCollectie
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['burgerservicenummer'] = \
                burgerservicenummer
            return self.call_with_http_info(**kwargs)

        self.get_ouders = Endpoint(
            settings={
                'response_type': (OuderHalCollectie,),
                'auth': [],
                'endpoint_path': '/ingeschrevenpersonen/{burgerservicenummer}/ouders',
                'operation_id': 'get_ouders',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'burgerservicenummer',
                ],
                'required': [
                    'burgerservicenummer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'burgerservicenummer',
                ]
            },
            root_map={
                'validations': {
                    ('burgerservicenummer',): {
                        'max_length': 9,
                        'min_length': 9,
                        'regex': {
                            'pattern': r'^[0-9]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'burgerservicenummer':
                        (str,),
                },
                'attribute_map': {
                    'burgerservicenummer': 'burgerservicenummer',
                },
                'location_map': {
                    'burgerservicenummer': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/hal+json',
                    'application/problem+json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_ouders
        )

        def __get_partner(
            self,
            burgerservicenummer,
            id,
            **kwargs
        ):
            """Raadpleeg de partner van een persoon  # noqa: E501

            Raadpleeg de partner van een persoon   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_partner(burgerservicenummer, id, async_req=True)
            >>> result = thread.get()

            Args:
                burgerservicenummer (str): Uniek persoonsnummer 
                id (str): De identificatie van de partner. 

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PartnerHalBasis
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['burgerservicenummer'] = \
                burgerservicenummer
            kwargs['id'] = \
                id
            return self.call_with_http_info(**kwargs)

        self.get_partner = Endpoint(
            settings={
                'response_type': (PartnerHalBasis,),
                'auth': [],
                'endpoint_path': '/ingeschrevenpersonen/{burgerservicenummer}/partners/{id}',
                'operation_id': 'get_partner',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'burgerservicenummer',
                    'id',
                ],
                'required': [
                    'burgerservicenummer',
                    'id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'burgerservicenummer',
                ]
            },
            root_map={
                'validations': {
                    ('burgerservicenummer',): {
                        'max_length': 9,
                        'min_length': 9,
                        'regex': {
                            'pattern': r'^[0-9]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'burgerservicenummer':
                        (str,),
                    'id':
                        (str,),
                },
                'attribute_map': {
                    'burgerservicenummer': 'burgerservicenummer',
                    'id': 'id',
                },
                'location_map': {
                    'burgerservicenummer': 'path',
                    'id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/hal+json',
                    'application/problem+json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_partner
        )

        def __get_partners(
            self,
            burgerservicenummer,
            **kwargs
        ):
            """Levert de actuele partners van een persoon  # noqa: E501

            Levert de actuele partners van een persoon. Partners uit beëindigde huwelijken of partnerschappen worden niet geretourneerd   # noqa: E501
            This method makes a synchronous HTTP request by default. To make an
            asynchronous HTTP request, please pass async_req=True

            >>> thread = api.get_partners(burgerservicenummer, async_req=True)
            >>> result = thread.get()

            Args:
                burgerservicenummer (str): Uniek persoonsnummer 

            Keyword Args:
                _return_http_data_only (bool): response data without head status
                    code and headers. Default is True.
                _preload_content (bool): if False, the urllib3.HTTPResponse object
                    will be returned without reading/decoding response data.
                    Default is True.
                _request_timeout (float/tuple): timeout setting for this request. If one
                    number provided, it will be total request timeout. It can also
                    be a pair (tuple) of (connection, read) timeouts.
                    Default is None.
                _check_input_type (bool): specifies if type checking
                    should be done one the data sent to the server.
                    Default is True.
                _check_return_type (bool): specifies if type checking
                    should be done one the data received from the server.
                    Default is True.
                _host_index (int/None): specifies the index of the server
                    that we want to use.
                    Default is read from the configuration.
                async_req (bool): execute request asynchronously

            Returns:
                PartnerHalCollectie
                    If the method is called asynchronously, returns the request
                    thread.
            """
            kwargs['async_req'] = kwargs.get(
                'async_req', False
            )
            kwargs['_return_http_data_only'] = kwargs.get(
                '_return_http_data_only', True
            )
            kwargs['_preload_content'] = kwargs.get(
                '_preload_content', True
            )
            kwargs['_request_timeout'] = kwargs.get(
                '_request_timeout', None
            )
            kwargs['_check_input_type'] = kwargs.get(
                '_check_input_type', True
            )
            kwargs['_check_return_type'] = kwargs.get(
                '_check_return_type', True
            )
            kwargs['_host_index'] = kwargs.get('_host_index')
            kwargs['burgerservicenummer'] = \
                burgerservicenummer
            return self.call_with_http_info(**kwargs)

        self.get_partners = Endpoint(
            settings={
                'response_type': (PartnerHalCollectie,),
                'auth': [],
                'endpoint_path': '/ingeschrevenpersonen/{burgerservicenummer}/partners',
                'operation_id': 'get_partners',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'burgerservicenummer',
                ],
                'required': [
                    'burgerservicenummer',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                    'burgerservicenummer',
                ]
            },
            root_map={
                'validations': {
                    ('burgerservicenummer',): {
                        'max_length': 9,
                        'min_length': 9,
                        'regex': {
                            'pattern': r'^[0-9]*$',  # noqa: E501
                        },
                    },
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'burgerservicenummer':
                        (str,),
                },
                'attribute_map': {
                    'burgerservicenummer': 'burgerservicenummer',
                },
                'location_map': {
                    'burgerservicenummer': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/hal+json',
                    'application/problem+json'
                ],
                'content_type': [],
            },
            api_client=api_client,
            callable=__get_partners
        )
