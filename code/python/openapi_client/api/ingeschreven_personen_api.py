# coding: utf-8

"""
    Bevragen Ingeschreven Personen

    API voor het bevragen van ingeschreven personen uit de basisregistratie personen (BRP), inclusief de registratie niet-ingezeten (RNI). Met deze API kun je personen zoeken en actuele gegevens over personen, kinderen, partners en ouders raadplegen.  Gegevens die er niet zijn of niet actueel zijn krijg je niet terug. Heeft een persoon bijvoorbeeld geen geldige nationaliteit, en alleen een beëindigd partnerschap, dan krijg je geen gegevens over nationaliteit en partner.  Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/tree/v1.0.0/features) voor nadere toelichting.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openapi_client.api_client import ApiClient
from openapi_client.exceptions import (  # noqa: F401
    ApiTypeError,
    ApiValueError
)


class IngeschrevenPersonenApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_ingeschreven_personen(self, **kwargs):  # noqa: E501
        """Vindt personen  # noqa: E501

        Zoek personen met één van de onderstaande verplichte combinaties van parameters en vul ze evt. aan met parameters uit de andere combinaties.   Default krijg je personen terug die nog in leven zijn, tenzij je de inclusiefoverledenpersonen=true opgeeft.   Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/fields_extensie.feature)   Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature)   1.  Persoon     -  geboorte__datum     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   2.  Persoon     -  verblijfplaats__gemeenteVanInschrijving     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   3.  Persoon     -  burgerservicenummer   4.  Postcode     -  verblijfplaats__postcode     -  verblijfplaats__huisnummer   5.  Straat     -  verblijfplaats__straat (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) )     -  verblijfplaats__gemeenteVanInschrijving     -  verblijfplaats__huisnummer   6.  Adres     -  verblijfplaats__nummeraanduidingIdentificatie   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ingeschreven_personen(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str expand: Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature).
        :param str fields: Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)
        :param list[str] burgerservicenummer: Uniek persoonsnummer. 
        :param date geboorte__datum: Je kunt alleen zoeken met een volledig geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/parametervalidatie.feature) 
        :param str geboorte__plaats: Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).** 
        :param GeslachtEnum geslachtsaanduiding: Geeft aan dat de persoon een man of een vrouw is, of dat het geslacht (nog) onbekend is. 
        :param bool inclusief_overleden_personen: Als je ook overleden personen in het antwoord wilt, geef dan de parameter inclusiefOverledenPersonen op met waarde True.  Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/overleden_personen.feature) 
        :param str naam__geslachtsnaam: De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).** 
        :param str naam__voorvoegsel: Deel van de geslachtsnaam dat vooraf gaat aan de rest van de geslachtsnaam. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).** 
        :param str naam__voornamen: De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).** 
        :param str verblijfplaats__gemeente_van_inschrijving: Een code die aangeeft in welke gemeente de persoon woont, of de laatste gemeente waar de persoon heeft gewoond, of de gemeente waar de persoon voor het eerst is ingeschreven. 
        :param str verblijfplaats__huisletter: Een toevoeging aan een huisnummer in de vorm van een letter die door de gemeente aan een adresseerbaar object is gegeven. 
        :param int verblijfplaats__huisnummer: Een nummer dat door de gemeente aan een adresseerbaar object is gegeven. 
        :param str verblijfplaats__huisnummertoevoeging: Een toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter die door de gemeente aan een adresseerbaar object is gegeven. 
        :param str verblijfplaats__nummeraanduiding_identificatie: Unieke identificatie van een nummeraanduiding (en het bijbehorende adres) in de BAG. 
        :param str verblijfplaats__straat: Een naam die door de gemeente aan een openbare ruimte is gegeven. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature). 
        :param str verblijfplaats__postcode: De door PostNL vastgestelde code die bij een bepaalde combinatie van een straatnaam en een huisnummer hoort. 
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: IngeschrevenPersoonHalCollectie
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_ingeschreven_personen_with_http_info(**kwargs)  # noqa: E501

    def get_ingeschreven_personen_with_http_info(self, **kwargs):  # noqa: E501
        """Vindt personen  # noqa: E501

        Zoek personen met één van de onderstaande verplichte combinaties van parameters en vul ze evt. aan met parameters uit de andere combinaties.   Default krijg je personen terug die nog in leven zijn, tenzij je de inclusiefoverledenpersonen=true opgeeft.   Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/fields_extensie.feature)   Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature)   1.  Persoon     -  geboorte__datum     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   2.  Persoon     -  verblijfplaats__gemeenteVanInschrijving     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   3.  Persoon     -  burgerservicenummer   4.  Postcode     -  verblijfplaats__postcode     -  verblijfplaats__huisnummer   5.  Straat     -  verblijfplaats__straat (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) )     -  verblijfplaats__gemeenteVanInschrijving     -  verblijfplaats__huisnummer   6.  Adres     -  verblijfplaats__nummeraanduidingIdentificatie   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ingeschreven_personen_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str expand: Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature).
        :param str fields: Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)
        :param list[str] burgerservicenummer: Uniek persoonsnummer. 
        :param date geboorte__datum: Je kunt alleen zoeken met een volledig geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/parametervalidatie.feature) 
        :param str geboorte__plaats: Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).** 
        :param GeslachtEnum geslachtsaanduiding: Geeft aan dat de persoon een man of een vrouw is, of dat het geslacht (nog) onbekend is. 
        :param bool inclusief_overleden_personen: Als je ook overleden personen in het antwoord wilt, geef dan de parameter inclusiefOverledenPersonen op met waarde True.  Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/overleden_personen.feature) 
        :param str naam__geslachtsnaam: De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).** 
        :param str naam__voorvoegsel: Deel van de geslachtsnaam dat vooraf gaat aan de rest van de geslachtsnaam. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).** 
        :param str naam__voornamen: De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).** 
        :param str verblijfplaats__gemeente_van_inschrijving: Een code die aangeeft in welke gemeente de persoon woont, of de laatste gemeente waar de persoon heeft gewoond, of de gemeente waar de persoon voor het eerst is ingeschreven. 
        :param str verblijfplaats__huisletter: Een toevoeging aan een huisnummer in de vorm van een letter die door de gemeente aan een adresseerbaar object is gegeven. 
        :param int verblijfplaats__huisnummer: Een nummer dat door de gemeente aan een adresseerbaar object is gegeven. 
        :param str verblijfplaats__huisnummertoevoeging: Een toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter die door de gemeente aan een adresseerbaar object is gegeven. 
        :param str verblijfplaats__nummeraanduiding_identificatie: Unieke identificatie van een nummeraanduiding (en het bijbehorende adres) in de BAG. 
        :param str verblijfplaats__straat: Een naam die door de gemeente aan een openbare ruimte is gegeven. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature). 
        :param str verblijfplaats__postcode: De door PostNL vastgestelde code die bij een bepaalde combinatie van een straatnaam en een huisnummer hoort. 
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(IngeschrevenPersoonHalCollectie, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'expand',
            'fields',
            'burgerservicenummer',
            'geboorte__datum',
            'geboorte__plaats',
            'geslachtsaanduiding',
            'inclusief_overleden_personen',
            'naam__geslachtsnaam',
            'naam__voorvoegsel',
            'naam__voornamen',
            'verblijfplaats__gemeente_van_inschrijving',
            'verblijfplaats__huisletter',
            'verblijfplaats__huisnummer',
            'verblijfplaats__huisnummertoevoeging',
            'verblijfplaats__nummeraanduiding_identificatie',
            'verblijfplaats__straat',
            'verblijfplaats__postcode'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ingeschreven_personen" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']

        if self.api_client.client_side_validation and ('geboorte__plaats' in local_var_params and  # noqa: E501
                                                        len(local_var_params['geboorte__plaats']) > 40):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `geboorte__plaats` when calling `get_ingeschreven_personen`, length must be less than or equal to `40`")  # noqa: E501
        if self.api_client.client_side_validation and ('naam__geslachtsnaam' in local_var_params and  # noqa: E501
                                                        len(local_var_params['naam__geslachtsnaam']) > 200):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `naam__geslachtsnaam` when calling `get_ingeschreven_personen`, length must be less than or equal to `200`")  # noqa: E501
        if self.api_client.client_side_validation and ('naam__voorvoegsel' in local_var_params and  # noqa: E501
                                                        len(local_var_params['naam__voorvoegsel']) > 10):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `naam__voorvoegsel` when calling `get_ingeschreven_personen`, length must be less than or equal to `10`")  # noqa: E501
        if self.api_client.client_side_validation and ('naam__voornamen' in local_var_params and  # noqa: E501
                                                        len(local_var_params['naam__voornamen']) > 200):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `naam__voornamen` when calling `get_ingeschreven_personen`, length must be less than or equal to `200`")  # noqa: E501
        if self.api_client.client_side_validation and ('verblijfplaats__gemeente_van_inschrijving' in local_var_params and  # noqa: E501
                                                        len(local_var_params['verblijfplaats__gemeente_van_inschrijving']) > 4):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `verblijfplaats__gemeente_van_inschrijving` when calling `get_ingeschreven_personen`, length must be less than or equal to `4`")  # noqa: E501
        if self.api_client.client_side_validation and ('verblijfplaats__huisletter' in local_var_params and  # noqa: E501
                                                        len(local_var_params['verblijfplaats__huisletter']) > 1):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `verblijfplaats__huisletter` when calling `get_ingeschreven_personen`, length must be less than or equal to `1`")  # noqa: E501
        if self.api_client.client_side_validation and 'verblijfplaats__huisnummer' in local_var_params and local_var_params['verblijfplaats__huisnummer'] > 99999:  # noqa: E501
            raise ApiValueError("Invalid value for parameter `verblijfplaats__huisnummer` when calling `get_ingeschreven_personen`, must be a value less than or equal to `99999`")  # noqa: E501
        if self.api_client.client_side_validation and ('verblijfplaats__huisnummertoevoeging' in local_var_params and  # noqa: E501
                                                        len(local_var_params['verblijfplaats__huisnummertoevoeging']) > 4):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `verblijfplaats__huisnummertoevoeging` when calling `get_ingeschreven_personen`, length must be less than or equal to `4`")  # noqa: E501
        if self.api_client.client_side_validation and ('verblijfplaats__nummeraanduiding_identificatie' in local_var_params and  # noqa: E501
                                                        len(local_var_params['verblijfplaats__nummeraanduiding_identificatie']) > 16):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `verblijfplaats__nummeraanduiding_identificatie` when calling `get_ingeschreven_personen`, length must be less than or equal to `16`")  # noqa: E501
        if self.api_client.client_side_validation and ('verblijfplaats__straat' in local_var_params and  # noqa: E501
                                                        len(local_var_params['verblijfplaats__straat']) > 80):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `verblijfplaats__straat` when calling `get_ingeschreven_personen`, length must be less than or equal to `80`")  # noqa: E501
        if self.api_client.client_side_validation and 'verblijfplaats__postcode' in local_var_params and not re.search(r'^[1-9]{1}[0-9]{3}[A-Z]{2}$', local_var_params['verblijfplaats__postcode']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `verblijfplaats__postcode` when calling `get_ingeschreven_personen`, must conform to the pattern `/^[1-9]{1}[0-9]{3}[A-Z]{2}$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'expand' in local_var_params and local_var_params['expand'] is not None:  # noqa: E501
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501
        if 'burgerservicenummer' in local_var_params and local_var_params['burgerservicenummer'] is not None:  # noqa: E501
            query_params.append(('burgerservicenummer', local_var_params['burgerservicenummer']))  # noqa: E501
            collection_formats['burgerservicenummer'] = 'csv'  # noqa: E501
        if 'geboorte__datum' in local_var_params and local_var_params['geboorte__datum'] is not None:  # noqa: E501
            query_params.append(('geboorte__datum', local_var_params['geboorte__datum']))  # noqa: E501
        if 'geboorte__plaats' in local_var_params and local_var_params['geboorte__plaats'] is not None:  # noqa: E501
            query_params.append(('geboorte__plaats', local_var_params['geboorte__plaats']))  # noqa: E501
        if 'geslachtsaanduiding' in local_var_params and local_var_params['geslachtsaanduiding'] is not None:  # noqa: E501
            query_params.append(('geslachtsaanduiding', local_var_params['geslachtsaanduiding']))  # noqa: E501
        if 'inclusief_overleden_personen' in local_var_params and local_var_params['inclusief_overleden_personen'] is not None:  # noqa: E501
            query_params.append(('inclusiefOverledenPersonen', local_var_params['inclusief_overleden_personen']))  # noqa: E501
        if 'naam__geslachtsnaam' in local_var_params and local_var_params['naam__geslachtsnaam'] is not None:  # noqa: E501
            query_params.append(('naam__geslachtsnaam', local_var_params['naam__geslachtsnaam']))  # noqa: E501
        if 'naam__voorvoegsel' in local_var_params and local_var_params['naam__voorvoegsel'] is not None:  # noqa: E501
            query_params.append(('naam__voorvoegsel', local_var_params['naam__voorvoegsel']))  # noqa: E501
        if 'naam__voornamen' in local_var_params and local_var_params['naam__voornamen'] is not None:  # noqa: E501
            query_params.append(('naam__voornamen', local_var_params['naam__voornamen']))  # noqa: E501
        if 'verblijfplaats__gemeente_van_inschrijving' in local_var_params and local_var_params['verblijfplaats__gemeente_van_inschrijving'] is not None:  # noqa: E501
            query_params.append(('verblijfplaats__gemeenteVanInschrijving', local_var_params['verblijfplaats__gemeente_van_inschrijving']))  # noqa: E501
        if 'verblijfplaats__huisletter' in local_var_params and local_var_params['verblijfplaats__huisletter'] is not None:  # noqa: E501
            query_params.append(('verblijfplaats__huisletter', local_var_params['verblijfplaats__huisletter']))  # noqa: E501
        if 'verblijfplaats__huisnummer' in local_var_params and local_var_params['verblijfplaats__huisnummer'] is not None:  # noqa: E501
            query_params.append(('verblijfplaats__huisnummer', local_var_params['verblijfplaats__huisnummer']))  # noqa: E501
        if 'verblijfplaats__huisnummertoevoeging' in local_var_params and local_var_params['verblijfplaats__huisnummertoevoeging'] is not None:  # noqa: E501
            query_params.append(('verblijfplaats__huisnummertoevoeging', local_var_params['verblijfplaats__huisnummertoevoeging']))  # noqa: E501
        if 'verblijfplaats__nummeraanduiding_identificatie' in local_var_params and local_var_params['verblijfplaats__nummeraanduiding_identificatie'] is not None:  # noqa: E501
            query_params.append(('verblijfplaats__nummeraanduidingIdentificatie', local_var_params['verblijfplaats__nummeraanduiding_identificatie']))  # noqa: E501
        if 'verblijfplaats__straat' in local_var_params and local_var_params['verblijfplaats__straat'] is not None:  # noqa: E501
            query_params.append(('verblijfplaats__straat', local_var_params['verblijfplaats__straat']))  # noqa: E501
        if 'verblijfplaats__postcode' in local_var_params and local_var_params['verblijfplaats__postcode'] is not None:  # noqa: E501
            query_params.append(('verblijfplaats__postcode', local_var_params['verblijfplaats__postcode']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ingeschrevenpersonen', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IngeschrevenPersoonHalCollectie',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ingeschreven_persoon(self, burgerservicenummer, **kwargs):  # noqa: E501
        """Raadpleeg een persoon  # noqa: E501

        Raadpleeg een (overleden) persoon.  Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/fields_extensie.feature).  Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ingeschreven_persoon(burgerservicenummer, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: Uniek persoonsnummer  (required)
        :param str expand: Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature).
        :param str fields: Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: IngeschrevenPersoonHal
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_ingeschreven_persoon_with_http_info(burgerservicenummer, **kwargs)  # noqa: E501

    def get_ingeschreven_persoon_with_http_info(self, burgerservicenummer, **kwargs):  # noqa: E501
        """Raadpleeg een persoon  # noqa: E501

        Raadpleeg een (overleden) persoon.  Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/fields_extensie.feature).  Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ingeschreven_persoon_with_http_info(burgerservicenummer, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: Uniek persoonsnummer  (required)
        :param str expand: Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature).
        :param str fields: Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma's gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(IngeschrevenPersoonHal, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'burgerservicenummer',
            'expand',
            'fields'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ingeschreven_persoon" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'burgerservicenummer' is set
        if self.api_client.client_side_validation and ('burgerservicenummer' not in local_var_params or  # noqa: E501
                                                        local_var_params['burgerservicenummer'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `burgerservicenummer` when calling `get_ingeschreven_persoon`")  # noqa: E501

        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) > 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_ingeschreven_persoon`, length must be less than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) < 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_ingeschreven_persoon`, length must be greater than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and 'burgerservicenummer' in local_var_params and not re.search(r'^[0-9]*$', local_var_params['burgerservicenummer']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_ingeschreven_persoon`, must conform to the pattern `/^[0-9]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'burgerservicenummer' in local_var_params:
            path_params['burgerservicenummer'] = local_var_params['burgerservicenummer']  # noqa: E501

        query_params = []
        if 'expand' in local_var_params and local_var_params['expand'] is not None:  # noqa: E501
            query_params.append(('expand', local_var_params['expand']))  # noqa: E501
        if 'fields' in local_var_params and local_var_params['fields'] is not None:  # noqa: E501
            query_params.append(('fields', local_var_params['fields']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ingeschrevenpersonen/{burgerservicenummer}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='IngeschrevenPersoonHal',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kind(self, burgerservicenummer, id, **kwargs):  # noqa: E501
        """Raadpleeg een kind van een persoon  # noqa: E501

        Raadpleeg een kind van een persoon   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kind(burgerservicenummer, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: Uniek persoonsnummer  (required)
        :param str id: De identificatie van het kind.  (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: KindHalBasis
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_kind_with_http_info(burgerservicenummer, id, **kwargs)  # noqa: E501

    def get_kind_with_http_info(self, burgerservicenummer, id, **kwargs):  # noqa: E501
        """Raadpleeg een kind van een persoon  # noqa: E501

        Raadpleeg een kind van een persoon   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kind_with_http_info(burgerservicenummer, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: Uniek persoonsnummer  (required)
        :param str id: De identificatie van het kind.  (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(KindHalBasis, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'burgerservicenummer',
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kind" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'burgerservicenummer' is set
        if self.api_client.client_side_validation and ('burgerservicenummer' not in local_var_params or  # noqa: E501
                                                        local_var_params['burgerservicenummer'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `burgerservicenummer` when calling `get_kind`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_kind`")  # noqa: E501

        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) > 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_kind`, length must be less than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) < 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_kind`, length must be greater than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and 'burgerservicenummer' in local_var_params and not re.search(r'^[0-9]*$', local_var_params['burgerservicenummer']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_kind`, must conform to the pattern `/^[0-9]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'burgerservicenummer' in local_var_params:
            path_params['burgerservicenummer'] = local_var_params['burgerservicenummer']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ingeschrevenpersonen/{burgerservicenummer}/kinderen/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KindHalBasis',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_kinderen(self, burgerservicenummer, **kwargs):  # noqa: E501
        """Levert de kinderen van een persoon  # noqa: E501

        Levert de kinderen van een persoon   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kinderen(burgerservicenummer, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: Uniek persoonsnummer  (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: KindHalCollectie
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_kinderen_with_http_info(burgerservicenummer, **kwargs)  # noqa: E501

    def get_kinderen_with_http_info(self, burgerservicenummer, **kwargs):  # noqa: E501
        """Levert de kinderen van een persoon  # noqa: E501

        Levert de kinderen van een persoon   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_kinderen_with_http_info(burgerservicenummer, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: Uniek persoonsnummer  (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(KindHalCollectie, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'burgerservicenummer'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_kinderen" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'burgerservicenummer' is set
        if self.api_client.client_side_validation and ('burgerservicenummer' not in local_var_params or  # noqa: E501
                                                        local_var_params['burgerservicenummer'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `burgerservicenummer` when calling `get_kinderen`")  # noqa: E501

        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) > 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_kinderen`, length must be less than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) < 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_kinderen`, length must be greater than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and 'burgerservicenummer' in local_var_params and not re.search(r'^[0-9]*$', local_var_params['burgerservicenummer']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_kinderen`, must conform to the pattern `/^[0-9]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'burgerservicenummer' in local_var_params:
            path_params['burgerservicenummer'] = local_var_params['burgerservicenummer']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ingeschrevenpersonen/{burgerservicenummer}/kinderen', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='KindHalCollectie',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ouder(self, burgerservicenummer, id, **kwargs):  # noqa: E501
        """Raadpleeg een ouder van een persoon  # noqa: E501

        Raadpleeg een ouder van een persoon   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ouder(burgerservicenummer, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: Uniek persoonsnummer  (required)
        :param str id: De identificatie van de ouder.  (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: OuderHalBasis
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_ouder_with_http_info(burgerservicenummer, id, **kwargs)  # noqa: E501

    def get_ouder_with_http_info(self, burgerservicenummer, id, **kwargs):  # noqa: E501
        """Raadpleeg een ouder van een persoon  # noqa: E501

        Raadpleeg een ouder van een persoon   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ouder_with_http_info(burgerservicenummer, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: Uniek persoonsnummer  (required)
        :param str id: De identificatie van de ouder.  (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(OuderHalBasis, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'burgerservicenummer',
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ouder" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'burgerservicenummer' is set
        if self.api_client.client_side_validation and ('burgerservicenummer' not in local_var_params or  # noqa: E501
                                                        local_var_params['burgerservicenummer'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `burgerservicenummer` when calling `get_ouder`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_ouder`")  # noqa: E501

        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) > 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_ouder`, length must be less than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) < 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_ouder`, length must be greater than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and 'burgerservicenummer' in local_var_params and not re.search(r'^[0-9]*$', local_var_params['burgerservicenummer']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_ouder`, must conform to the pattern `/^[0-9]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'burgerservicenummer' in local_var_params:
            path_params['burgerservicenummer'] = local_var_params['burgerservicenummer']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ingeschrevenpersonen/{burgerservicenummer}/ouders/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OuderHalBasis',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_ouders(self, burgerservicenummer, **kwargs):  # noqa: E501
        """Levert de ouders van een persoon  # noqa: E501

        Levert de ouders van een persoon   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ouders(burgerservicenummer, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: Uniek persoonsnummer  (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: OuderHalCollectie
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_ouders_with_http_info(burgerservicenummer, **kwargs)  # noqa: E501

    def get_ouders_with_http_info(self, burgerservicenummer, **kwargs):  # noqa: E501
        """Levert de ouders van een persoon  # noqa: E501

        Levert de ouders van een persoon   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_ouders_with_http_info(burgerservicenummer, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: Uniek persoonsnummer  (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(OuderHalCollectie, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'burgerservicenummer'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_ouders" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'burgerservicenummer' is set
        if self.api_client.client_side_validation and ('burgerservicenummer' not in local_var_params or  # noqa: E501
                                                        local_var_params['burgerservicenummer'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `burgerservicenummer` when calling `get_ouders`")  # noqa: E501

        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) > 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_ouders`, length must be less than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) < 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_ouders`, length must be greater than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and 'burgerservicenummer' in local_var_params and not re.search(r'^[0-9]*$', local_var_params['burgerservicenummer']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_ouders`, must conform to the pattern `/^[0-9]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'burgerservicenummer' in local_var_params:
            path_params['burgerservicenummer'] = local_var_params['burgerservicenummer']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ingeschrevenpersonen/{burgerservicenummer}/ouders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OuderHalCollectie',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_partner(self, burgerservicenummer, id, **kwargs):  # noqa: E501
        """Raadpleeg de partner van een persoon  # noqa: E501

        Raadpleeg de partner van een persoon   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_partner(burgerservicenummer, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: Uniek persoonsnummer  (required)
        :param str id: De identificatie van de partner.  (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PartnerHalBasis
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_partner_with_http_info(burgerservicenummer, id, **kwargs)  # noqa: E501

    def get_partner_with_http_info(self, burgerservicenummer, id, **kwargs):  # noqa: E501
        """Raadpleeg de partner van een persoon  # noqa: E501

        Raadpleeg de partner van een persoon   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_partner_with_http_info(burgerservicenummer, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: Uniek persoonsnummer  (required)
        :param str id: De identificatie van de partner.  (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PartnerHalBasis, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'burgerservicenummer',
            'id'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_partner" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'burgerservicenummer' is set
        if self.api_client.client_side_validation and ('burgerservicenummer' not in local_var_params or  # noqa: E501
                                                        local_var_params['burgerservicenummer'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `burgerservicenummer` when calling `get_partner`")  # noqa: E501
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in local_var_params or  # noqa: E501
                                                        local_var_params['id'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `id` when calling `get_partner`")  # noqa: E501

        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) > 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_partner`, length must be less than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) < 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_partner`, length must be greater than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and 'burgerservicenummer' in local_var_params and not re.search(r'^[0-9]*$', local_var_params['burgerservicenummer']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_partner`, must conform to the pattern `/^[0-9]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'burgerservicenummer' in local_var_params:
            path_params['burgerservicenummer'] = local_var_params['burgerservicenummer']  # noqa: E501
        if 'id' in local_var_params:
            path_params['id'] = local_var_params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ingeschrevenpersonen/{burgerservicenummer}/partners/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartnerHalBasis',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_partners(self, burgerservicenummer, **kwargs):  # noqa: E501
        """Levert de actuele partners van een persoon  # noqa: E501

        Levert de actuele partners van een persoon. Partners uit beëindigde huwelijken of partnerschappen worden niet geretourneerd   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_partners(burgerservicenummer, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: Uniek persoonsnummer  (required)
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: PartnerHalCollectie
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        return self.get_partners_with_http_info(burgerservicenummer, **kwargs)  # noqa: E501

    def get_partners_with_http_info(self, burgerservicenummer, **kwargs):  # noqa: E501
        """Levert de actuele partners van een persoon  # noqa: E501

        Levert de actuele partners van een persoon. Partners uit beëindigde huwelijken of partnerschappen worden niet geretourneerd   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_partners_with_http_info(burgerservicenummer, async_req=True)
        >>> result = thread.get()

        :param async_req bool: execute request asynchronously
        :param str burgerservicenummer: Uniek persoonsnummer  (required)
        :param _return_http_data_only: response data without head status code
                                       and headers
        :param _preload_content: if False, the urllib3.HTTPResponse object will
                                 be returned without reading/decoding response
                                 data. Default is True.
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: tuple(PartnerHalCollectie, status_code(int), headers(HTTPHeaderDict))
                 If the method is called asynchronously,
                 returns the request thread.
        """

        local_var_params = locals()

        all_params = [
            'burgerservicenummer'
        ]
        all_params.extend(
            [
                'async_req',
                '_return_http_data_only',
                '_preload_content',
                '_request_timeout'
            ]
        )

        for key, val in six.iteritems(local_var_params['kwargs']):
            if key not in all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_partners" % key
                )
            local_var_params[key] = val
        del local_var_params['kwargs']
        # verify the required parameter 'burgerservicenummer' is set
        if self.api_client.client_side_validation and ('burgerservicenummer' not in local_var_params or  # noqa: E501
                                                        local_var_params['burgerservicenummer'] is None):  # noqa: E501
            raise ApiValueError("Missing the required parameter `burgerservicenummer` when calling `get_partners`")  # noqa: E501

        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) > 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_partners`, length must be less than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and ('burgerservicenummer' in local_var_params and  # noqa: E501
                                                        len(local_var_params['burgerservicenummer']) < 9):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_partners`, length must be greater than or equal to `9`")  # noqa: E501
        if self.api_client.client_side_validation and 'burgerservicenummer' in local_var_params and not re.search(r'^[0-9]*$', local_var_params['burgerservicenummer']):  # noqa: E501
            raise ApiValueError("Invalid value for parameter `burgerservicenummer` when calling `get_partners`, must conform to the pattern `/^[0-9]*$/`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'burgerservicenummer' in local_var_params:
            path_params['burgerservicenummer'] = local_var_params['burgerservicenummer']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/hal+json', 'application/problem+json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/ingeschrevenpersonen/{burgerservicenummer}/partners', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartnerHalCollectie',  # noqa: E501
            auth_settings=auth_settings,
            async_req=local_var_params.get('async_req'),
            _return_http_data_only=local_var_params.get('_return_http_data_only'),  # noqa: E501
            _preload_content=local_var_params.get('_preload_content', True),
            _request_timeout=local_var_params.get('_request_timeout'),
            collection_formats=collection_formats)
