# coding: utf-8

"""
    Bevragingen ingeschreven personen

    API voor het ontsluiten van gegevens van ingeschreven personen en aanverwante gegevens uit de GBA en RNI. Met deze API worden de actuele gegevens van ingeschreven personen, hun kinderen, partners en ouders ontsloten. <br> Heeft een persoon bijvoorbeeld geen geldige nationaliteit, dan wordt nationaliteit niet geretourneerd. <br> Heeft een persoon een beÃ«indigd partnerschap of huwelijk, dan wordt de partner niet geretourneerd. <br> <br> Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/tree/master/features) voor nadere toelichting. <br>   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class IngeschrevenPersoonHalAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'links': 'IngeschrevenPersoonLinks',
        'embedded': 'IngeschrevenPersoonEmbedded'
    }

    attribute_map = {
        'links': '_links',
        'embedded': '_embedded'
    }

    def __init__(self, links=None, embedded=None, local_vars_configuration=None):  # noqa: E501
        """IngeschrevenPersoonHalAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._links = None
        self._embedded = None
        self.discriminator = None

        if links is not None:
            self.links = links
        if embedded is not None:
            self.embedded = embedded

    @property
    def links(self):
        """Gets the links of this IngeschrevenPersoonHalAllOf.  # noqa: E501


        :return: The links of this IngeschrevenPersoonHalAllOf.  # noqa: E501
        :rtype: IngeschrevenPersoonLinks
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this IngeschrevenPersoonHalAllOf.


        :param links: The links of this IngeschrevenPersoonHalAllOf.  # noqa: E501
        :type: IngeschrevenPersoonLinks
        """

        self._links = links

    @property
    def embedded(self):
        """Gets the embedded of this IngeschrevenPersoonHalAllOf.  # noqa: E501


        :return: The embedded of this IngeschrevenPersoonHalAllOf.  # noqa: E501
        :rtype: IngeschrevenPersoonEmbedded
        """
        return self._embedded

    @embedded.setter
    def embedded(self, embedded):
        """Sets the embedded of this IngeschrevenPersoonHalAllOf.


        :param embedded: The embedded of this IngeschrevenPersoonHalAllOf.  # noqa: E501
        :type: IngeschrevenPersoonEmbedded
        """

        self._embedded = embedded

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IngeschrevenPersoonHalAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IngeschrevenPersoonHalAllOf):
            return True

        return self.to_dict() != other.to_dict()
