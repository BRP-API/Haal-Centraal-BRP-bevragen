# coding: utf-8

"""
    Bevragingen ingeschreven personen

    API voor het ontsluiten van gegevens van ingeschreven personen en aanverwante gegevens uit de GBA en RNI. Met deze API worden de actuele gegevens van ingeschreven personen, hun kinderen, partners en ouders ontsloten. <br> Heeft een persoon bijvoorbeeld geen geldige nationaliteit, dan wordt nationaliteit niet geretourneerd. <br> Heeft een persoon een beÃ«indigd partnerschap of huwelijk, dan wordt de partner niet geretourneerd. <br> <br> Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/tree/master/features) voor nadere toelichting. <br>   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Naam(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'geslachtsnaam': 'str',
        'voorletters': 'str',
        'voornamen': 'str',
        'voorvoegsel': 'str',
        'in_onderzoek': 'NaamInOnderzoek'
    }

    attribute_map = {
        'geslachtsnaam': 'geslachtsnaam',
        'voorletters': 'voorletters',
        'voornamen': 'voornamen',
        'voorvoegsel': 'voorvoegsel',
        'in_onderzoek': 'inOnderzoek'
    }

    def __init__(self, geslachtsnaam=None, voorletters=None, voornamen=None, voorvoegsel=None, in_onderzoek=None, local_vars_configuration=None):  # noqa: E501
        """Naam - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._geslachtsnaam = None
        self._voorletters = None
        self._voornamen = None
        self._voorvoegsel = None
        self._in_onderzoek = None
        self.discriminator = None

        if geslachtsnaam is not None:
            self.geslachtsnaam = geslachtsnaam
        if voorletters is not None:
            self.voorletters = voorletters
        if voornamen is not None:
            self.voornamen = voornamen
        if voorvoegsel is not None:
            self.voorvoegsel = voorvoegsel
        if in_onderzoek is not None:
            self.in_onderzoek = in_onderzoek

    @property
    def geslachtsnaam(self):
        """Gets the geslachtsnaam of this Naam.  # noqa: E501

        De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels en adellijke titel/predikaat zijn afgesplitst.  # noqa: E501

        :return: The geslachtsnaam of this Naam.  # noqa: E501
        :rtype: str
        """
        return self._geslachtsnaam

    @geslachtsnaam.setter
    def geslachtsnaam(self, geslachtsnaam):
        """Sets the geslachtsnaam of this Naam.

        De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels en adellijke titel/predikaat zijn afgesplitst.  # noqa: E501

        :param geslachtsnaam: The geslachtsnaam of this Naam.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                geslachtsnaam is not None and len(geslachtsnaam) > 200):
            raise ValueError("Invalid value for `geslachtsnaam`, length must be less than or equal to `200`")  # noqa: E501

        self._geslachtsnaam = geslachtsnaam

    @property
    def voorletters(self):
        """Gets the voorletters of this Naam.  # noqa: E501

        De voorletters waarmee een persoon aangeschreven wil worden. De voorlettes zijn afgeleid van de voornamen.  # noqa: E501

        :return: The voorletters of this Naam.  # noqa: E501
        :rtype: str
        """
        return self._voorletters

    @voorletters.setter
    def voorletters(self, voorletters):
        """Sets the voorletters of this Naam.

        De voorletters waarmee een persoon aangeschreven wil worden. De voorlettes zijn afgeleid van de voornamen.  # noqa: E501

        :param voorletters: The voorletters of this Naam.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                voorletters is not None and len(voorletters) > 20):
            raise ValueError("Invalid value for `voorletters`, length must be less than or equal to `20`")  # noqa: E501

        self._voorletters = voorletters

    @property
    def voornamen(self):
        """Gets the voornamen of this Naam.  # noqa: E501

        De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat.  # noqa: E501

        :return: The voornamen of this Naam.  # noqa: E501
        :rtype: str
        """
        return self._voornamen

    @voornamen.setter
    def voornamen(self, voornamen):
        """Sets the voornamen of this Naam.

        De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat.  # noqa: E501

        :param voornamen: The voornamen of this Naam.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                voornamen is not None and len(voornamen) > 200):
            raise ValueError("Invalid value for `voornamen`, length must be less than or equal to `200`")  # noqa: E501

        self._voornamen = voornamen

    @property
    def voorvoegsel(self):
        """Gets the voorvoegsel of this Naam.  # noqa: E501

        Dat deel van de geslachtsnaam dat voorkomt in de Voorvoegseltabel en, gescheiden door een spatie, vooraf gaat aan de rest van de geslachtsnaam.  # noqa: E501

        :return: The voorvoegsel of this Naam.  # noqa: E501
        :rtype: str
        """
        return self._voorvoegsel

    @voorvoegsel.setter
    def voorvoegsel(self, voorvoegsel):
        """Sets the voorvoegsel of this Naam.

        Dat deel van de geslachtsnaam dat voorkomt in de Voorvoegseltabel en, gescheiden door een spatie, vooraf gaat aan de rest van de geslachtsnaam.  # noqa: E501

        :param voorvoegsel: The voorvoegsel of this Naam.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                voorvoegsel is not None and len(voorvoegsel) > 10):
            raise ValueError("Invalid value for `voorvoegsel`, length must be less than or equal to `10`")  # noqa: E501

        self._voorvoegsel = voorvoegsel

    @property
    def in_onderzoek(self):
        """Gets the in_onderzoek of this Naam.  # noqa: E501


        :return: The in_onderzoek of this Naam.  # noqa: E501
        :rtype: NaamInOnderzoek
        """
        return self._in_onderzoek

    @in_onderzoek.setter
    def in_onderzoek(self, in_onderzoek):
        """Sets the in_onderzoek of this Naam.


        :param in_onderzoek: The in_onderzoek of this Naam.  # noqa: E501
        :type: NaamInOnderzoek
        """

        self._in_onderzoek = in_onderzoek

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Naam):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Naam):
            return True

        return self.to_dict() != other.to_dict()
