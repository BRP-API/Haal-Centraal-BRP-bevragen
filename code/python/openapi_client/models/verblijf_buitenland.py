# coding: utf-8

"""
    Bevragingen ingeschreven personen

    API voor het ontsluiten van gegevens van ingeschreven personen en aanverwante gegevens uit de GBA en RNI. Met deze API worden de actuele gegevens van ingeschreven personen, hun kinderen, partners en ouders ontsloten. <br> Heeft een persoon bijvoorbeeld geen geldige nationaliteit, dan wordt nationaliteit niet geretourneerd. <br> Heeft een persoon een beÃ«indigd partnerschap of huwelijk, dan wordt de partner niet geretourneerd. <br> <br> Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/tree/master/features) voor nadere toelichting. <br>   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class VerblijfBuitenland(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'adres_regel1': 'str',
        'adres_regel2': 'str',
        'adres_regel3': 'str',
        'vertrokken_onbekend_waarheen': 'bool',
        'land': 'Waardetabel'
    }

    attribute_map = {
        'adres_regel1': 'adresRegel1',
        'adres_regel2': 'adresRegel2',
        'adres_regel3': 'adresRegel3',
        'vertrokken_onbekend_waarheen': 'vertrokkenOnbekendWaarheen',
        'land': 'land'
    }

    def __init__(self, adres_regel1=None, adres_regel2=None, adres_regel3=None, vertrokken_onbekend_waarheen=None, land=None, local_vars_configuration=None):  # noqa: E501
        """VerblijfBuitenland - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._adres_regel1 = None
        self._adres_regel2 = None
        self._adres_regel3 = None
        self._vertrokken_onbekend_waarheen = None
        self._land = None
        self.discriminator = None

        if adres_regel1 is not None:
            self.adres_regel1 = adres_regel1
        if adres_regel2 is not None:
            self.adres_regel2 = adres_regel2
        if adres_regel3 is not None:
            self.adres_regel3 = adres_regel3
        if vertrokken_onbekend_waarheen is not None:
            self.vertrokken_onbekend_waarheen = vertrokken_onbekend_waarheen
        if land is not None:
            self.land = land

    @property
    def adres_regel1(self):
        """Gets the adres_regel1 of this VerblijfBuitenland.  # noqa: E501

        Het eerste deel van het adres in het buitenland dat de ingeschreven persoon opgeeft bij vertrek naar het buitenland dan wel waar de ingeschreven persoon in het buitenland verblijft.  # noqa: E501

        :return: The adres_regel1 of this VerblijfBuitenland.  # noqa: E501
        :rtype: str
        """
        return self._adres_regel1

    @adres_regel1.setter
    def adres_regel1(self, adres_regel1):
        """Sets the adres_regel1 of this VerblijfBuitenland.

        Het eerste deel van het adres in het buitenland dat de ingeschreven persoon opgeeft bij vertrek naar het buitenland dan wel waar de ingeschreven persoon in het buitenland verblijft.  # noqa: E501

        :param adres_regel1: The adres_regel1 of this VerblijfBuitenland.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                adres_regel1 is not None and len(adres_regel1) > 35):
            raise ValueError("Invalid value for `adres_regel1`, length must be less than or equal to `35`")  # noqa: E501

        self._adres_regel1 = adres_regel1

    @property
    def adres_regel2(self):
        """Gets the adres_regel2 of this VerblijfBuitenland.  # noqa: E501

        Het tweede deel van het adres in het buitenland dat de ingeschreven persoon opgeeft bij vertrek naar het buitenland dan wel waar de ingeschreven persoon in het buitenland verblijft.  # noqa: E501

        :return: The adres_regel2 of this VerblijfBuitenland.  # noqa: E501
        :rtype: str
        """
        return self._adres_regel2

    @adres_regel2.setter
    def adres_regel2(self, adres_regel2):
        """Sets the adres_regel2 of this VerblijfBuitenland.

        Het tweede deel van het adres in het buitenland dat de ingeschreven persoon opgeeft bij vertrek naar het buitenland dan wel waar de ingeschreven persoon in het buitenland verblijft.  # noqa: E501

        :param adres_regel2: The adres_regel2 of this VerblijfBuitenland.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                adres_regel2 is not None and len(adres_regel2) > 35):
            raise ValueError("Invalid value for `adres_regel2`, length must be less than or equal to `35`")  # noqa: E501

        self._adres_regel2 = adres_regel2

    @property
    def adres_regel3(self):
        """Gets the adres_regel3 of this VerblijfBuitenland.  # noqa: E501

        Het derde deel van het adres in het buitenland dat de ingeschreven persoon opgeeft bij vertrek naar het buitenland dan wel waar de ingeschreven persoon in het buitenland verblijft.  # noqa: E501

        :return: The adres_regel3 of this VerblijfBuitenland.  # noqa: E501
        :rtype: str
        """
        return self._adres_regel3

    @adres_regel3.setter
    def adres_regel3(self, adres_regel3):
        """Sets the adres_regel3 of this VerblijfBuitenland.

        Het derde deel van het adres in het buitenland dat de ingeschreven persoon opgeeft bij vertrek naar het buitenland dan wel waar de ingeschreven persoon in het buitenland verblijft.  # noqa: E501

        :param adres_regel3: The adres_regel3 of this VerblijfBuitenland.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                adres_regel3 is not None and len(adres_regel3) > 35):
            raise ValueError("Invalid value for `adres_regel3`, length must be less than or equal to `35`")  # noqa: E501

        self._adres_regel3 = adres_regel3

    @property
    def vertrokken_onbekend_waarheen(self):
        """Gets the vertrokken_onbekend_waarheen of this VerblijfBuitenland.  # noqa: E501

        Indicatie dat de ingeschreven persoon is vertrokken naar het buitenland, maar dat niet bekend is waar naar toe.  # noqa: E501

        :return: The vertrokken_onbekend_waarheen of this VerblijfBuitenland.  # noqa: E501
        :rtype: bool
        """
        return self._vertrokken_onbekend_waarheen

    @vertrokken_onbekend_waarheen.setter
    def vertrokken_onbekend_waarheen(self, vertrokken_onbekend_waarheen):
        """Sets the vertrokken_onbekend_waarheen of this VerblijfBuitenland.

        Indicatie dat de ingeschreven persoon is vertrokken naar het buitenland, maar dat niet bekend is waar naar toe.  # noqa: E501

        :param vertrokken_onbekend_waarheen: The vertrokken_onbekend_waarheen of this VerblijfBuitenland.  # noqa: E501
        :type: bool
        """

        self._vertrokken_onbekend_waarheen = vertrokken_onbekend_waarheen

    @property
    def land(self):
        """Gets the land of this VerblijfBuitenland.  # noqa: E501


        :return: The land of this VerblijfBuitenland.  # noqa: E501
        :rtype: Waardetabel
        """
        return self._land

    @land.setter
    def land(self, land):
        """Sets the land of this VerblijfBuitenland.


        :param land: The land of this VerblijfBuitenland.  # noqa: E501
        :type: Waardetabel
        """

        self._land = land

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerblijfBuitenland):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VerblijfBuitenland):
            return True

        return self.to_dict() != other.to_dict()
