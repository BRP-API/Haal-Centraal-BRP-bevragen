# coding: utf-8

"""
    Bevragen Ingeschreven Personen

    API voor het bevragen van ingeschreven personen uit de basisregistratie personen (BRP), inclusief de registratie niet-ingezeten (RNI). Met deze API kun je personen zoeken en actuele gegevens over personen, kinderen, partners en ouders raadplegen.  Gegevens die er niet zijn of niet actueel zijn krijg je niet terug. Heeft een persoon bijvoorbeeld geen geldige nationaliteit, en alleen een beÃ«indigd partnerschap, dan krijg je geen gegevens over nationaliteit en partner.  Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/tree/v1.1.0/features) voor nadere toelichting.   # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Gezagsverhouding(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'indicatie_curatele_register': 'bool',
        'indicatie_gezag_minderjarige': 'IndicatieGezagMinderjarigeEnum',
        'in_onderzoek': 'GezagsverhoudingInOnderzoek'
    }

    attribute_map = {
        'indicatie_curatele_register': 'indicatieCurateleRegister',
        'indicatie_gezag_minderjarige': 'indicatieGezagMinderjarige',
        'in_onderzoek': 'inOnderzoek'
    }

    def __init__(self, indicatie_curatele_register=None, indicatie_gezag_minderjarige=None, in_onderzoek=None, local_vars_configuration=None):  # noqa: E501
        """Gezagsverhouding - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._indicatie_curatele_register = None
        self._indicatie_gezag_minderjarige = None
        self._in_onderzoek = None
        self.discriminator = None

        if indicatie_curatele_register is not None:
            self.indicatie_curatele_register = indicatie_curatele_register
        if indicatie_gezag_minderjarige is not None:
            self.indicatie_gezag_minderjarige = indicatie_gezag_minderjarige
        if in_onderzoek is not None:
            self.in_onderzoek = in_onderzoek

    @property
    def indicatie_curatele_register(self):
        """Gets the indicatie_curatele_register of this Gezagsverhouding.  # noqa: E501

        Geeft aan dat de persoon onder curatele is gesteld.   # noqa: E501

        :return: The indicatie_curatele_register of this Gezagsverhouding.  # noqa: E501
        :rtype: bool
        """
        return self._indicatie_curatele_register

    @indicatie_curatele_register.setter
    def indicatie_curatele_register(self, indicatie_curatele_register):
        """Sets the indicatie_curatele_register of this Gezagsverhouding.

        Geeft aan dat de persoon onder curatele is gesteld.   # noqa: E501

        :param indicatie_curatele_register: The indicatie_curatele_register of this Gezagsverhouding.  # noqa: E501
        :type: bool
        """

        self._indicatie_curatele_register = indicatie_curatele_register

    @property
    def indicatie_gezag_minderjarige(self):
        """Gets the indicatie_gezag_minderjarige of this Gezagsverhouding.  # noqa: E501


        :return: The indicatie_gezag_minderjarige of this Gezagsverhouding.  # noqa: E501
        :rtype: IndicatieGezagMinderjarigeEnum
        """
        return self._indicatie_gezag_minderjarige

    @indicatie_gezag_minderjarige.setter
    def indicatie_gezag_minderjarige(self, indicatie_gezag_minderjarige):
        """Sets the indicatie_gezag_minderjarige of this Gezagsverhouding.


        :param indicatie_gezag_minderjarige: The indicatie_gezag_minderjarige of this Gezagsverhouding.  # noqa: E501
        :type: IndicatieGezagMinderjarigeEnum
        """

        self._indicatie_gezag_minderjarige = indicatie_gezag_minderjarige

    @property
    def in_onderzoek(self):
        """Gets the in_onderzoek of this Gezagsverhouding.  # noqa: E501


        :return: The in_onderzoek of this Gezagsverhouding.  # noqa: E501
        :rtype: GezagsverhoudingInOnderzoek
        """
        return self._in_onderzoek

    @in_onderzoek.setter
    def in_onderzoek(self, in_onderzoek):
        """Sets the in_onderzoek of this Gezagsverhouding.


        :param in_onderzoek: The in_onderzoek of this Gezagsverhouding.  # noqa: E501
        :type: GezagsverhoudingInOnderzoek
        """

        self._in_onderzoek = in_onderzoek

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Gezagsverhouding):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Gezagsverhouding):
            return True

        return self.to_dict() != other.to_dict()
