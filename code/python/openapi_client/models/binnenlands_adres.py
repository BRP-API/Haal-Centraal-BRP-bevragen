# coding: utf-8

"""
    Bevragingen ingeschreven personen

    API voor het ontsluiten van gegevens van ingeschreven personen en aanverwante gegevens uit de GBA en RNI. Met deze API worden de actuele gegevens van ingeschreven personen, hun kinderen, partners en ouders ontsloten. <br> Heeft een persoon bijvoorbeeld geen geldige nationaliteit, dan wordt nationaliteit niet geretourneerd. <br> Heeft een persoon een beëindigd partnerschap of huwelijk, dan wordt de partner niet geretourneerd. <br> <br> Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/tree/master/features) voor nadere toelichting. <br>   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class BinnenlandsAdres(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'functie_adres': 'SoortAdresEnum',
        'huisletter': 'str',
        'huisnummer': 'int',
        'huisnummertoevoeging': 'str',
        'aanduiding_bij_huisnummer': 'AanduidingBijHuisnummerEnum',
        'identificatiecode_nummeraanduiding': 'str',
        'naam_openbare_ruimte': 'str',
        'postcode': 'str',
        'woonplaatsnaam': 'str'
    }

    attribute_map = {
        'functie_adres': 'functieAdres',
        'huisletter': 'huisletter',
        'huisnummer': 'huisnummer',
        'huisnummertoevoeging': 'huisnummertoevoeging',
        'aanduiding_bij_huisnummer': 'aanduidingBijHuisnummer',
        'identificatiecode_nummeraanduiding': 'identificatiecodeNummeraanduiding',
        'naam_openbare_ruimte': 'naamOpenbareRuimte',
        'postcode': 'postcode',
        'woonplaatsnaam': 'woonplaatsnaam'
    }

    def __init__(self, functie_adres=None, huisletter=None, huisnummer=None, huisnummertoevoeging=None, aanduiding_bij_huisnummer=None, identificatiecode_nummeraanduiding=None, naam_openbare_ruimte=None, postcode=None, woonplaatsnaam=None, local_vars_configuration=None):  # noqa: E501
        """BinnenlandsAdres - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._functie_adres = None
        self._huisletter = None
        self._huisnummer = None
        self._huisnummertoevoeging = None
        self._aanduiding_bij_huisnummer = None
        self._identificatiecode_nummeraanduiding = None
        self._naam_openbare_ruimte = None
        self._postcode = None
        self._woonplaatsnaam = None
        self.discriminator = None

        if functie_adres is not None:
            self.functie_adres = functie_adres
        if huisletter is not None:
            self.huisletter = huisletter
        if huisnummer is not None:
            self.huisnummer = huisnummer
        if huisnummertoevoeging is not None:
            self.huisnummertoevoeging = huisnummertoevoeging
        if aanduiding_bij_huisnummer is not None:
            self.aanduiding_bij_huisnummer = aanduiding_bij_huisnummer
        if identificatiecode_nummeraanduiding is not None:
            self.identificatiecode_nummeraanduiding = identificatiecode_nummeraanduiding
        if naam_openbare_ruimte is not None:
            self.naam_openbare_ruimte = naam_openbare_ruimte
        if postcode is not None:
            self.postcode = postcode
        if woonplaatsnaam is not None:
            self.woonplaatsnaam = woonplaatsnaam

    @property
    def functie_adres(self):
        """Gets the functie_adres of this BinnenlandsAdres.  # noqa: E501


        :return: The functie_adres of this BinnenlandsAdres.  # noqa: E501
        :rtype: SoortAdresEnum
        """
        return self._functie_adres

    @functie_adres.setter
    def functie_adres(self, functie_adres):
        """Sets the functie_adres of this BinnenlandsAdres.


        :param functie_adres: The functie_adres of this BinnenlandsAdres.  # noqa: E501
        :type: SoortAdresEnum
        """

        self._functie_adres = functie_adres

    @property
    def huisletter(self):
        """Gets the huisletter of this BinnenlandsAdres.  # noqa: E501

        Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken. a - z , A – Z  # noqa: E501

        :return: The huisletter of this BinnenlandsAdres.  # noqa: E501
        :rtype: str
        """
        return self._huisletter

    @huisletter.setter
    def huisletter(self, huisletter):
        """Sets the huisletter of this BinnenlandsAdres.

        Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken. a - z , A – Z  # noqa: E501

        :param huisletter: The huisletter of this BinnenlandsAdres.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                huisletter is not None and len(huisletter) > 1):
            raise ValueError("Invalid value for `huisletter`, length must be less than or equal to `1`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                huisletter is not None and not re.search(r'^[A-Z,a-z]$', huisletter)):  # noqa: E501
            raise ValueError(r"Invalid value for `huisletter`, must be a follow pattern or equal to `/^[A-Z,a-z]$/`")  # noqa: E501

        self._huisletter = huisletter

    @property
    def huisnummer(self):
        """Gets the huisnummer of this BinnenlandsAdres.  # noqa: E501

        Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Alle natuurlijke getallen tussen 1 en 99999.  # noqa: E501

        :return: The huisnummer of this BinnenlandsAdres.  # noqa: E501
        :rtype: int
        """
        return self._huisnummer

    @huisnummer.setter
    def huisnummer(self, huisnummer):
        """Sets the huisnummer of this BinnenlandsAdres.

        Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Alle natuurlijke getallen tussen 1 en 99999.  # noqa: E501

        :param huisnummer: The huisnummer of this BinnenlandsAdres.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                huisnummer is not None and huisnummer > 99999):  # noqa: E501
            raise ValueError("Invalid value for `huisnummer`, must be a value less than or equal to `99999`")  # noqa: E501

        self._huisnummer = huisnummer

    @property
    def huisnummertoevoeging(self):
        """Gets the huisnummertoevoeging of this BinnenlandsAdres.  # noqa: E501

        Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. a - z , A - Z , 0 – 9  # noqa: E501

        :return: The huisnummertoevoeging of this BinnenlandsAdres.  # noqa: E501
        :rtype: str
        """
        return self._huisnummertoevoeging

    @huisnummertoevoeging.setter
    def huisnummertoevoeging(self, huisnummertoevoeging):
        """Sets the huisnummertoevoeging of this BinnenlandsAdres.

        Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. a - z , A - Z , 0 – 9  # noqa: E501

        :param huisnummertoevoeging: The huisnummertoevoeging of this BinnenlandsAdres.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                huisnummertoevoeging is not None and len(huisnummertoevoeging) > 4):
            raise ValueError("Invalid value for `huisnummertoevoeging`, length must be less than or equal to `4`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                huisnummertoevoeging is not None and not re.search(r'^[a-zA-Z0-9]{1,4}$', huisnummertoevoeging)):  # noqa: E501
            raise ValueError(r"Invalid value for `huisnummertoevoeging`, must be a follow pattern or equal to `/^[a-zA-Z0-9]{1,4}$/`")  # noqa: E501

        self._huisnummertoevoeging = huisnummertoevoeging

    @property
    def aanduiding_bij_huisnummer(self):
        """Gets the aanduiding_bij_huisnummer of this BinnenlandsAdres.  # noqa: E501


        :return: The aanduiding_bij_huisnummer of this BinnenlandsAdres.  # noqa: E501
        :rtype: AanduidingBijHuisnummerEnum
        """
        return self._aanduiding_bij_huisnummer

    @aanduiding_bij_huisnummer.setter
    def aanduiding_bij_huisnummer(self, aanduiding_bij_huisnummer):
        """Sets the aanduiding_bij_huisnummer of this BinnenlandsAdres.


        :param aanduiding_bij_huisnummer: The aanduiding_bij_huisnummer of this BinnenlandsAdres.  # noqa: E501
        :type: AanduidingBijHuisnummerEnum
        """

        self._aanduiding_bij_huisnummer = aanduiding_bij_huisnummer

    @property
    def identificatiecode_nummeraanduiding(self):
        """Gets the identificatiecode_nummeraanduiding of this BinnenlandsAdres.  # noqa: E501

        De unieke aanduiding van een NUMMERAANDUIDING. Combinatie van de viercijferige 'gemeentecode' de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding. Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding.  # noqa: E501

        :return: The identificatiecode_nummeraanduiding of this BinnenlandsAdres.  # noqa: E501
        :rtype: str
        """
        return self._identificatiecode_nummeraanduiding

    @identificatiecode_nummeraanduiding.setter
    def identificatiecode_nummeraanduiding(self, identificatiecode_nummeraanduiding):
        """Sets the identificatiecode_nummeraanduiding of this BinnenlandsAdres.

        De unieke aanduiding van een NUMMERAANDUIDING. Combinatie van de viercijferige 'gemeentecode' de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding. Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding.  # noqa: E501

        :param identificatiecode_nummeraanduiding: The identificatiecode_nummeraanduiding of this BinnenlandsAdres.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                identificatiecode_nummeraanduiding is not None and len(identificatiecode_nummeraanduiding) > 16):
            raise ValueError("Invalid value for `identificatiecode_nummeraanduiding`, length must be less than or equal to `16`")  # noqa: E501

        self._identificatiecode_nummeraanduiding = identificatiecode_nummeraanduiding

    @property
    def naam_openbare_ruimte(self):
        """Gets the naam_openbare_ruimte of this BinnenlandsAdres.  # noqa: E501

        Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming Tekens gecodeerd volgens de UTF-8 standaard  # noqa: E501

        :return: The naam_openbare_ruimte of this BinnenlandsAdres.  # noqa: E501
        :rtype: str
        """
        return self._naam_openbare_ruimte

    @naam_openbare_ruimte.setter
    def naam_openbare_ruimte(self, naam_openbare_ruimte):
        """Sets the naam_openbare_ruimte of this BinnenlandsAdres.

        Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming Tekens gecodeerd volgens de UTF-8 standaard  # noqa: E501

        :param naam_openbare_ruimte: The naam_openbare_ruimte of this BinnenlandsAdres.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                naam_openbare_ruimte is not None and len(naam_openbare_ruimte) > 80):
            raise ValueError("Invalid value for `naam_openbare_ruimte`, length must be less than or equal to `80`")  # noqa: E501

        self._naam_openbare_ruimte = naam_openbare_ruimte

    @property
    def postcode(self):
        """Gets the postcode of this BinnenlandsAdres.  # noqa: E501

        De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer  # noqa: E501

        :return: The postcode of this BinnenlandsAdres.  # noqa: E501
        :rtype: str
        """
        return self._postcode

    @postcode.setter
    def postcode(self, postcode):
        """Sets the postcode of this BinnenlandsAdres.

        De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer  # noqa: E501

        :param postcode: The postcode of this BinnenlandsAdres.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                postcode is not None and not re.search(r'^[1-9]{1}[0-9]{3}[A-Z]{2}$', postcode)):  # noqa: E501
            raise ValueError(r"Invalid value for `postcode`, must be a follow pattern or equal to `/^[1-9]{1}[0-9]{3}[A-Z]{2}$/`")  # noqa: E501

        self._postcode = postcode

    @property
    def woonplaatsnaam(self):
        """Gets the woonplaatsnaam of this BinnenlandsAdres.  # noqa: E501

        De door het bevoegde gemeentelijke orgaan aan een WOONPLAATS toegekende benaming. Tekens gecodeerd volgens de UTF-8 standaard.  # noqa: E501

        :return: The woonplaatsnaam of this BinnenlandsAdres.  # noqa: E501
        :rtype: str
        """
        return self._woonplaatsnaam

    @woonplaatsnaam.setter
    def woonplaatsnaam(self, woonplaatsnaam):
        """Sets the woonplaatsnaam of this BinnenlandsAdres.

        De door het bevoegde gemeentelijke orgaan aan een WOONPLAATS toegekende benaming. Tekens gecodeerd volgens de UTF-8 standaard.  # noqa: E501

        :param woonplaatsnaam: The woonplaatsnaam of this BinnenlandsAdres.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                woonplaatsnaam is not None and len(woonplaatsnaam) > 80):
            raise ValueError("Invalid value for `woonplaatsnaam`, length must be less than or equal to `80`")  # noqa: E501

        self._woonplaatsnaam = woonplaatsnaam

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BinnenlandsAdres):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BinnenlandsAdres):
            return True

        return self.to_dict() != other.to_dict()
