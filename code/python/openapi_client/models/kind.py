# coding: utf-8

"""
    Bevragen Ingeschreven Personen

    API voor het bevragen van ingeschreven personen uit de basisregistratie personen (BRP), inclusief de registratie niet-ingezeten (RNI). Met deze API kun je personen zoeken en actuele gegevens over personen, kinderen, partners en ouders raadplegen.  Gegevens die er niet zijn of niet actueel zijn krijg je niet terug. Heeft een persoon bijvoorbeeld geen geldige nationaliteit, en alleen een beÃ«indigd partnerschap, dan krijg je geen gegevens over nationaliteit en partner.  Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/tree/v1.1.0/features) voor nadere toelichting.   # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Kind(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'burgerservicenummer': 'str',
        'leeftijd': 'int',
        'in_onderzoek': 'KindInOnderzoek',
        'naam': 'Naam',
        'geboorte': 'Geboorte',
        'geheimhouding_persoonsgegevens': 'bool'
    }

    attribute_map = {
        'burgerservicenummer': 'burgerservicenummer',
        'leeftijd': 'leeftijd',
        'in_onderzoek': 'inOnderzoek',
        'naam': 'naam',
        'geboorte': 'geboorte',
        'geheimhouding_persoonsgegevens': 'geheimhoudingPersoonsgegevens'
    }

    def __init__(self, burgerservicenummer=None, leeftijd=None, in_onderzoek=None, naam=None, geboorte=None, geheimhouding_persoonsgegevens=None, local_vars_configuration=None):  # noqa: E501
        """Kind - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._burgerservicenummer = None
        self._leeftijd = None
        self._in_onderzoek = None
        self._naam = None
        self._geboorte = None
        self._geheimhouding_persoonsgegevens = None
        self.discriminator = None

        if burgerservicenummer is not None:
            self.burgerservicenummer = burgerservicenummer
        if leeftijd is not None:
            self.leeftijd = leeftijd
        if in_onderzoek is not None:
            self.in_onderzoek = in_onderzoek
        if naam is not None:
            self.naam = naam
        if geboorte is not None:
            self.geboorte = geboorte
        if geheimhouding_persoonsgegevens is not None:
            self.geheimhouding_persoonsgegevens = geheimhouding_persoonsgegevens

    @property
    def burgerservicenummer(self):
        """Gets the burgerservicenummer of this Kind.  # noqa: E501


        :return: The burgerservicenummer of this Kind.  # noqa: E501
        :rtype: str
        """
        return self._burgerservicenummer

    @burgerservicenummer.setter
    def burgerservicenummer(self, burgerservicenummer):
        """Sets the burgerservicenummer of this Kind.


        :param burgerservicenummer: The burgerservicenummer of this Kind.  # noqa: E501
        :type: str
        """

        self._burgerservicenummer = burgerservicenummer

    @property
    def leeftijd(self):
        """Gets the leeftijd of this Kind.  # noqa: E501

        Leeftijd op het moment van bevragen   # noqa: E501

        :return: The leeftijd of this Kind.  # noqa: E501
        :rtype: int
        """
        return self._leeftijd

    @leeftijd.setter
    def leeftijd(self, leeftijd):
        """Sets the leeftijd of this Kind.

        Leeftijd op het moment van bevragen   # noqa: E501

        :param leeftijd: The leeftijd of this Kind.  # noqa: E501
        :type: int
        """

        self._leeftijd = leeftijd

    @property
    def in_onderzoek(self):
        """Gets the in_onderzoek of this Kind.  # noqa: E501


        :return: The in_onderzoek of this Kind.  # noqa: E501
        :rtype: KindInOnderzoek
        """
        return self._in_onderzoek

    @in_onderzoek.setter
    def in_onderzoek(self, in_onderzoek):
        """Sets the in_onderzoek of this Kind.


        :param in_onderzoek: The in_onderzoek of this Kind.  # noqa: E501
        :type: KindInOnderzoek
        """

        self._in_onderzoek = in_onderzoek

    @property
    def naam(self):
        """Gets the naam of this Kind.  # noqa: E501


        :return: The naam of this Kind.  # noqa: E501
        :rtype: Naam
        """
        return self._naam

    @naam.setter
    def naam(self, naam):
        """Sets the naam of this Kind.


        :param naam: The naam of this Kind.  # noqa: E501
        :type: Naam
        """

        self._naam = naam

    @property
    def geboorte(self):
        """Gets the geboorte of this Kind.  # noqa: E501


        :return: The geboorte of this Kind.  # noqa: E501
        :rtype: Geboorte
        """
        return self._geboorte

    @geboorte.setter
    def geboorte(self, geboorte):
        """Sets the geboorte of this Kind.


        :param geboorte: The geboorte of this Kind.  # noqa: E501
        :type: Geboorte
        """

        self._geboorte = geboorte

    @property
    def geheimhouding_persoonsgegevens(self):
        """Gets the geheimhouding_persoonsgegevens of this Kind.  # noqa: E501

        Gegevens mogen niet worden verstrekt aan derden/ maatschappelijke instellingen.   # noqa: E501

        :return: The geheimhouding_persoonsgegevens of this Kind.  # noqa: E501
        :rtype: bool
        """
        return self._geheimhouding_persoonsgegevens

    @geheimhouding_persoonsgegevens.setter
    def geheimhouding_persoonsgegevens(self, geheimhouding_persoonsgegevens):
        """Sets the geheimhouding_persoonsgegevens of this Kind.

        Gegevens mogen niet worden verstrekt aan derden/ maatschappelijke instellingen.   # noqa: E501

        :param geheimhouding_persoonsgegevens: The geheimhouding_persoonsgegevens of this Kind.  # noqa: E501
        :type: bool
        """

        self._geheimhouding_persoonsgegevens = geheimhouding_persoonsgegevens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Kind):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Kind):
            return True

        return self.to_dict() != other.to_dict()
