# coding: utf-8

"""
    Bevragingen ingeschreven personen

    API voor het ontsluiten van gegevens van ingeschreven personen en aanverwante gegevens uit de GBA en RNI. Met deze API worden de actuele gegevens van ingeschreven personen, hun kinderen, partners en ouders ontsloten. <br> Heeft een persoon bijvoorbeeld geen geldige nationaliteit, dan wordt nationaliteit niet geretourneerd. <br> Heeft een persoon een beÃ«indigd partnerschap of huwelijk, dan wordt de partner niet geretourneerd. <br> <br> Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/tree/master/features) voor nadere toelichting. <br>   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class IngeschrevenPersoon(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'burgerservicenummer': 'str',
        'geheimhouding_persoonsgegevens': 'bool',
        'geslachtsaanduiding': 'GeslachtEnum',
        'leeftijd': 'int',
        'datum_eerste_inschrijving_gba': 'DatumOnvolledig',
        'kiesrecht': 'Kiesrecht',
        'naam': 'NaamPersoon',
        'in_onderzoek': 'PersoonInOnderzoek',
        'nationaliteit': 'list[Nationaliteit]',
        'geboorte': 'Geboorte',
        'opschorting_bijhouding': 'OpschortingBijhouding',
        'overlijden': 'Overlijden',
        'verblijfplaats': 'Verblijfplaats',
        'gezagsverhouding': 'Gezagsverhouding',
        'verblijfstitel': 'Verblijfstitel',
        'reisdocumenten': 'list[str]'
    }

    attribute_map = {
        'burgerservicenummer': 'burgerservicenummer',
        'geheimhouding_persoonsgegevens': 'geheimhoudingPersoonsgegevens',
        'geslachtsaanduiding': 'geslachtsaanduiding',
        'leeftijd': 'leeftijd',
        'datum_eerste_inschrijving_gba': 'datumEersteInschrijvingGBA',
        'kiesrecht': 'kiesrecht',
        'naam': 'naam',
        'in_onderzoek': 'inOnderzoek',
        'nationaliteit': 'nationaliteit',
        'geboorte': 'geboorte',
        'opschorting_bijhouding': 'opschortingBijhouding',
        'overlijden': 'overlijden',
        'verblijfplaats': 'verblijfplaats',
        'gezagsverhouding': 'gezagsverhouding',
        'verblijfstitel': 'verblijfstitel',
        'reisdocumenten': 'reisdocumenten'
    }

    def __init__(self, burgerservicenummer=None, geheimhouding_persoonsgegevens=None, geslachtsaanduiding=None, leeftijd=None, datum_eerste_inschrijving_gba=None, kiesrecht=None, naam=None, in_onderzoek=None, nationaliteit=None, geboorte=None, opschorting_bijhouding=None, overlijden=None, verblijfplaats=None, gezagsverhouding=None, verblijfstitel=None, reisdocumenten=None, local_vars_configuration=None):  # noqa: E501
        """IngeschrevenPersoon - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._burgerservicenummer = None
        self._geheimhouding_persoonsgegevens = None
        self._geslachtsaanduiding = None
        self._leeftijd = None
        self._datum_eerste_inschrijving_gba = None
        self._kiesrecht = None
        self._naam = None
        self._in_onderzoek = None
        self._nationaliteit = None
        self._geboorte = None
        self._opschorting_bijhouding = None
        self._overlijden = None
        self._verblijfplaats = None
        self._gezagsverhouding = None
        self._verblijfstitel = None
        self._reisdocumenten = None
        self.discriminator = None

        if burgerservicenummer is not None:
            self.burgerservicenummer = burgerservicenummer
        if geheimhouding_persoonsgegevens is not None:
            self.geheimhouding_persoonsgegevens = geheimhouding_persoonsgegevens
        if geslachtsaanduiding is not None:
            self.geslachtsaanduiding = geslachtsaanduiding
        if leeftijd is not None:
            self.leeftijd = leeftijd
        if datum_eerste_inschrijving_gba is not None:
            self.datum_eerste_inschrijving_gba = datum_eerste_inschrijving_gba
        if kiesrecht is not None:
            self.kiesrecht = kiesrecht
        if naam is not None:
            self.naam = naam
        if in_onderzoek is not None:
            self.in_onderzoek = in_onderzoek
        if nationaliteit is not None:
            self.nationaliteit = nationaliteit
        if geboorte is not None:
            self.geboorte = geboorte
        if opschorting_bijhouding is not None:
            self.opschorting_bijhouding = opschorting_bijhouding
        if overlijden is not None:
            self.overlijden = overlijden
        if verblijfplaats is not None:
            self.verblijfplaats = verblijfplaats
        if gezagsverhouding is not None:
            self.gezagsverhouding = gezagsverhouding
        if verblijfstitel is not None:
            self.verblijfstitel = verblijfstitel
        if reisdocumenten is not None:
            self.reisdocumenten = reisdocumenten

    @property
    def burgerservicenummer(self):
        """Gets the burgerservicenummer of this IngeschrevenPersoon.  # noqa: E501

        Het burgerservicenummer, bedoeld in artikel 1.1 van de Wet algemene bepalingen burgerservicenummer. Alle nummers waarvoor geldt dat, indien aangeduid als (s0 s1 s2 s3 s4 s5 s6 s7 s8), het resultaat van (9*s0) + (8*s1) + (7*s2) +...+ (2*s7) - (1*s8) deelbaar is door elf. Er moeten dus 9 cijfers aanwezig zijn.  # noqa: E501

        :return: The burgerservicenummer of this IngeschrevenPersoon.  # noqa: E501
        :rtype: str
        """
        return self._burgerservicenummer

    @burgerservicenummer.setter
    def burgerservicenummer(self, burgerservicenummer):
        """Sets the burgerservicenummer of this IngeschrevenPersoon.

        Het burgerservicenummer, bedoeld in artikel 1.1 van de Wet algemene bepalingen burgerservicenummer. Alle nummers waarvoor geldt dat, indien aangeduid als (s0 s1 s2 s3 s4 s5 s6 s7 s8), het resultaat van (9*s0) + (8*s1) + (7*s2) +...+ (2*s7) - (1*s8) deelbaar is door elf. Er moeten dus 9 cijfers aanwezig zijn.  # noqa: E501

        :param burgerservicenummer: The burgerservicenummer of this IngeschrevenPersoon.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                burgerservicenummer is not None and len(burgerservicenummer) > 9):
            raise ValueError("Invalid value for `burgerservicenummer`, length must be less than or equal to `9`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                burgerservicenummer is not None and len(burgerservicenummer) < 9):
            raise ValueError("Invalid value for `burgerservicenummer`, length must be greater than or equal to `9`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                burgerservicenummer is not None and not re.search(r'^[0-9]*$', burgerservicenummer)):  # noqa: E501
            raise ValueError(r"Invalid value for `burgerservicenummer`, must be a follow pattern or equal to `/^[0-9]*$/`")  # noqa: E501

        self._burgerservicenummer = burgerservicenummer

    @property
    def geheimhouding_persoonsgegevens(self):
        """Gets the geheimhouding_persoonsgegevens of this IngeschrevenPersoon.  # noqa: E501

        Een aanduiding die aangeeft dat gegevens wel of niet verstrekt mogen worden. Indien true: op verzoek van deze persoon is het verstrekken van gegevens over deze persoon aan bepaalde derden niet toegestaan.  # noqa: E501

        :return: The geheimhouding_persoonsgegevens of this IngeschrevenPersoon.  # noqa: E501
        :rtype: bool
        """
        return self._geheimhouding_persoonsgegevens

    @geheimhouding_persoonsgegevens.setter
    def geheimhouding_persoonsgegevens(self, geheimhouding_persoonsgegevens):
        """Sets the geheimhouding_persoonsgegevens of this IngeschrevenPersoon.

        Een aanduiding die aangeeft dat gegevens wel of niet verstrekt mogen worden. Indien true: op verzoek van deze persoon is het verstrekken van gegevens over deze persoon aan bepaalde derden niet toegestaan.  # noqa: E501

        :param geheimhouding_persoonsgegevens: The geheimhouding_persoonsgegevens of this IngeschrevenPersoon.  # noqa: E501
        :type: bool
        """

        self._geheimhouding_persoonsgegevens = geheimhouding_persoonsgegevens

    @property
    def geslachtsaanduiding(self):
        """Gets the geslachtsaanduiding of this IngeschrevenPersoon.  # noqa: E501


        :return: The geslachtsaanduiding of this IngeschrevenPersoon.  # noqa: E501
        :rtype: GeslachtEnum
        """
        return self._geslachtsaanduiding

    @geslachtsaanduiding.setter
    def geslachtsaanduiding(self, geslachtsaanduiding):
        """Sets the geslachtsaanduiding of this IngeschrevenPersoon.


        :param geslachtsaanduiding: The geslachtsaanduiding of this IngeschrevenPersoon.  # noqa: E501
        :type: GeslachtEnum
        """

        self._geslachtsaanduiding = geslachtsaanduiding

    @property
    def leeftijd(self):
        """Gets the leeftijd of this IngeschrevenPersoon.  # noqa: E501

        Leeftijd in jaren op het moment van bevraging  # noqa: E501

        :return: The leeftijd of this IngeschrevenPersoon.  # noqa: E501
        :rtype: int
        """
        return self._leeftijd

    @leeftijd.setter
    def leeftijd(self, leeftijd):
        """Sets the leeftijd of this IngeschrevenPersoon.

        Leeftijd in jaren op het moment van bevraging  # noqa: E501

        :param leeftijd: The leeftijd of this IngeschrevenPersoon.  # noqa: E501
        :type: int
        """
        if (self.local_vars_configuration.client_side_validation and
                leeftijd is not None and leeftijd > 999):  # noqa: E501
            raise ValueError("Invalid value for `leeftijd`, must be a value less than or equal to `999`")  # noqa: E501

        self._leeftijd = leeftijd

    @property
    def datum_eerste_inschrijving_gba(self):
        """Gets the datum_eerste_inschrijving_gba of this IngeschrevenPersoon.  # noqa: E501


        :return: The datum_eerste_inschrijving_gba of this IngeschrevenPersoon.  # noqa: E501
        :rtype: DatumOnvolledig
        """
        return self._datum_eerste_inschrijving_gba

    @datum_eerste_inschrijving_gba.setter
    def datum_eerste_inschrijving_gba(self, datum_eerste_inschrijving_gba):
        """Sets the datum_eerste_inschrijving_gba of this IngeschrevenPersoon.


        :param datum_eerste_inschrijving_gba: The datum_eerste_inschrijving_gba of this IngeschrevenPersoon.  # noqa: E501
        :type: DatumOnvolledig
        """

        self._datum_eerste_inschrijving_gba = datum_eerste_inschrijving_gba

    @property
    def kiesrecht(self):
        """Gets the kiesrecht of this IngeschrevenPersoon.  # noqa: E501


        :return: The kiesrecht of this IngeschrevenPersoon.  # noqa: E501
        :rtype: Kiesrecht
        """
        return self._kiesrecht

    @kiesrecht.setter
    def kiesrecht(self, kiesrecht):
        """Sets the kiesrecht of this IngeschrevenPersoon.


        :param kiesrecht: The kiesrecht of this IngeschrevenPersoon.  # noqa: E501
        :type: Kiesrecht
        """

        self._kiesrecht = kiesrecht

    @property
    def naam(self):
        """Gets the naam of this IngeschrevenPersoon.  # noqa: E501


        :return: The naam of this IngeschrevenPersoon.  # noqa: E501
        :rtype: NaamPersoon
        """
        return self._naam

    @naam.setter
    def naam(self, naam):
        """Sets the naam of this IngeschrevenPersoon.


        :param naam: The naam of this IngeschrevenPersoon.  # noqa: E501
        :type: NaamPersoon
        """

        self._naam = naam

    @property
    def in_onderzoek(self):
        """Gets the in_onderzoek of this IngeschrevenPersoon.  # noqa: E501


        :return: The in_onderzoek of this IngeschrevenPersoon.  # noqa: E501
        :rtype: PersoonInOnderzoek
        """
        return self._in_onderzoek

    @in_onderzoek.setter
    def in_onderzoek(self, in_onderzoek):
        """Sets the in_onderzoek of this IngeschrevenPersoon.


        :param in_onderzoek: The in_onderzoek of this IngeschrevenPersoon.  # noqa: E501
        :type: PersoonInOnderzoek
        """

        self._in_onderzoek = in_onderzoek

    @property
    def nationaliteit(self):
        """Gets the nationaliteit of this IngeschrevenPersoon.  # noqa: E501


        :return: The nationaliteit of this IngeschrevenPersoon.  # noqa: E501
        :rtype: list[Nationaliteit]
        """
        return self._nationaliteit

    @nationaliteit.setter
    def nationaliteit(self, nationaliteit):
        """Sets the nationaliteit of this IngeschrevenPersoon.


        :param nationaliteit: The nationaliteit of this IngeschrevenPersoon.  # noqa: E501
        :type: list[Nationaliteit]
        """

        self._nationaliteit = nationaliteit

    @property
    def geboorte(self):
        """Gets the geboorte of this IngeschrevenPersoon.  # noqa: E501


        :return: The geboorte of this IngeschrevenPersoon.  # noqa: E501
        :rtype: Geboorte
        """
        return self._geboorte

    @geboorte.setter
    def geboorte(self, geboorte):
        """Sets the geboorte of this IngeschrevenPersoon.


        :param geboorte: The geboorte of this IngeschrevenPersoon.  # noqa: E501
        :type: Geboorte
        """

        self._geboorte = geboorte

    @property
    def opschorting_bijhouding(self):
        """Gets the opschorting_bijhouding of this IngeschrevenPersoon.  # noqa: E501


        :return: The opschorting_bijhouding of this IngeschrevenPersoon.  # noqa: E501
        :rtype: OpschortingBijhouding
        """
        return self._opschorting_bijhouding

    @opschorting_bijhouding.setter
    def opschorting_bijhouding(self, opschorting_bijhouding):
        """Sets the opschorting_bijhouding of this IngeschrevenPersoon.


        :param opschorting_bijhouding: The opschorting_bijhouding of this IngeschrevenPersoon.  # noqa: E501
        :type: OpschortingBijhouding
        """

        self._opschorting_bijhouding = opschorting_bijhouding

    @property
    def overlijden(self):
        """Gets the overlijden of this IngeschrevenPersoon.  # noqa: E501


        :return: The overlijden of this IngeschrevenPersoon.  # noqa: E501
        :rtype: Overlijden
        """
        return self._overlijden

    @overlijden.setter
    def overlijden(self, overlijden):
        """Sets the overlijden of this IngeschrevenPersoon.


        :param overlijden: The overlijden of this IngeschrevenPersoon.  # noqa: E501
        :type: Overlijden
        """

        self._overlijden = overlijden

    @property
    def verblijfplaats(self):
        """Gets the verblijfplaats of this IngeschrevenPersoon.  # noqa: E501


        :return: The verblijfplaats of this IngeschrevenPersoon.  # noqa: E501
        :rtype: Verblijfplaats
        """
        return self._verblijfplaats

    @verblijfplaats.setter
    def verblijfplaats(self, verblijfplaats):
        """Sets the verblijfplaats of this IngeschrevenPersoon.


        :param verblijfplaats: The verblijfplaats of this IngeschrevenPersoon.  # noqa: E501
        :type: Verblijfplaats
        """

        self._verblijfplaats = verblijfplaats

    @property
    def gezagsverhouding(self):
        """Gets the gezagsverhouding of this IngeschrevenPersoon.  # noqa: E501


        :return: The gezagsverhouding of this IngeschrevenPersoon.  # noqa: E501
        :rtype: Gezagsverhouding
        """
        return self._gezagsverhouding

    @gezagsverhouding.setter
    def gezagsverhouding(self, gezagsverhouding):
        """Sets the gezagsverhouding of this IngeschrevenPersoon.


        :param gezagsverhouding: The gezagsverhouding of this IngeschrevenPersoon.  # noqa: E501
        :type: Gezagsverhouding
        """

        self._gezagsverhouding = gezagsverhouding

    @property
    def verblijfstitel(self):
        """Gets the verblijfstitel of this IngeschrevenPersoon.  # noqa: E501


        :return: The verblijfstitel of this IngeschrevenPersoon.  # noqa: E501
        :rtype: Verblijfstitel
        """
        return self._verblijfstitel

    @verblijfstitel.setter
    def verblijfstitel(self, verblijfstitel):
        """Sets the verblijfstitel of this IngeschrevenPersoon.


        :param verblijfstitel: The verblijfstitel of this IngeschrevenPersoon.  # noqa: E501
        :type: Verblijfstitel
        """

        self._verblijfstitel = verblijfstitel

    @property
    def reisdocumenten(self):
        """Gets the reisdocumenten of this IngeschrevenPersoon.  # noqa: E501


        :return: The reisdocumenten of this IngeschrevenPersoon.  # noqa: E501
        :rtype: list[str]
        """
        return self._reisdocumenten

    @reisdocumenten.setter
    def reisdocumenten(self, reisdocumenten):
        """Sets the reisdocumenten of this IngeschrevenPersoon.


        :param reisdocumenten: The reisdocumenten of this IngeschrevenPersoon.  # noqa: E501
        :type: list[str]
        """

        self._reisdocumenten = reisdocumenten

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IngeschrevenPersoon):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IngeschrevenPersoon):
            return True

        return self.to_dict() != other.to_dict()
