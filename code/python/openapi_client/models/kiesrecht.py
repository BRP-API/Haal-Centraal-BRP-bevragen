# coding: utf-8

"""
    Bevragen Ingeschreven Personen

    API voor het bevragen van ingeschreven personen uit de basisregistratie personen (BRP), inclusief de registratie niet-ingezeten (RNI). Met deze API kun je personen zoeken en actuele gegevens over personen, kinderen, partners en ouders raadplegen.  Gegevens die er niet zijn of niet actueel zijn krijg je niet terug. Heeft een persoon bijvoorbeeld geen geldige nationaliteit, en alleen een beÃ«indigd partnerschap, dan krijg je geen gegevens over nationaliteit en partner.  Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/tree/v1.1.0/features) voor nadere toelichting.   # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Kiesrecht(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'europees_kiesrecht': 'bool',
        'uitgesloten_van_kiesrecht': 'bool',
        'einddatum_uitsluiting_europees_kiesrecht': 'DatumOnvolledig',
        'einddatum_uitsluiting_kiesrecht': 'DatumOnvolledig'
    }

    attribute_map = {
        'europees_kiesrecht': 'europeesKiesrecht',
        'uitgesloten_van_kiesrecht': 'uitgeslotenVanKiesrecht',
        'einddatum_uitsluiting_europees_kiesrecht': 'einddatumUitsluitingEuropeesKiesrecht',
        'einddatum_uitsluiting_kiesrecht': 'einddatumUitsluitingKiesrecht'
    }

    def __init__(self, europees_kiesrecht=None, uitgesloten_van_kiesrecht=None, einddatum_uitsluiting_europees_kiesrecht=None, einddatum_uitsluiting_kiesrecht=None, local_vars_configuration=None):  # noqa: E501
        """Kiesrecht - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._europees_kiesrecht = None
        self._uitgesloten_van_kiesrecht = None
        self._einddatum_uitsluiting_europees_kiesrecht = None
        self._einddatum_uitsluiting_kiesrecht = None
        self.discriminator = None

        if europees_kiesrecht is not None:
            self.europees_kiesrecht = europees_kiesrecht
        if uitgesloten_van_kiesrecht is not None:
            self.uitgesloten_van_kiesrecht = uitgesloten_van_kiesrecht
        if einddatum_uitsluiting_europees_kiesrecht is not None:
            self.einddatum_uitsluiting_europees_kiesrecht = einddatum_uitsluiting_europees_kiesrecht
        if einddatum_uitsluiting_kiesrecht is not None:
            self.einddatum_uitsluiting_kiesrecht = einddatum_uitsluiting_kiesrecht

    @property
    def europees_kiesrecht(self):
        """Gets the europees_kiesrecht of this Kiesrecht.  # noqa: E501

        Geeft aan of persoon een oproep moet ontvangen voor verkiezingen voor het Europees parlement.   # noqa: E501

        :return: The europees_kiesrecht of this Kiesrecht.  # noqa: E501
        :rtype: bool
        """
        return self._europees_kiesrecht

    @europees_kiesrecht.setter
    def europees_kiesrecht(self, europees_kiesrecht):
        """Sets the europees_kiesrecht of this Kiesrecht.

        Geeft aan of persoon een oproep moet ontvangen voor verkiezingen voor het Europees parlement.   # noqa: E501

        :param europees_kiesrecht: The europees_kiesrecht of this Kiesrecht.  # noqa: E501
        :type: bool
        """

        self._europees_kiesrecht = europees_kiesrecht

    @property
    def uitgesloten_van_kiesrecht(self):
        """Gets the uitgesloten_van_kiesrecht of this Kiesrecht.  # noqa: E501


        :return: The uitgesloten_van_kiesrecht of this Kiesrecht.  # noqa: E501
        :rtype: bool
        """
        return self._uitgesloten_van_kiesrecht

    @uitgesloten_van_kiesrecht.setter
    def uitgesloten_van_kiesrecht(self, uitgesloten_van_kiesrecht):
        """Sets the uitgesloten_van_kiesrecht of this Kiesrecht.


        :param uitgesloten_van_kiesrecht: The uitgesloten_van_kiesrecht of this Kiesrecht.  # noqa: E501
        :type: bool
        """

        self._uitgesloten_van_kiesrecht = uitgesloten_van_kiesrecht

    @property
    def einddatum_uitsluiting_europees_kiesrecht(self):
        """Gets the einddatum_uitsluiting_europees_kiesrecht of this Kiesrecht.  # noqa: E501


        :return: The einddatum_uitsluiting_europees_kiesrecht of this Kiesrecht.  # noqa: E501
        :rtype: DatumOnvolledig
        """
        return self._einddatum_uitsluiting_europees_kiesrecht

    @einddatum_uitsluiting_europees_kiesrecht.setter
    def einddatum_uitsluiting_europees_kiesrecht(self, einddatum_uitsluiting_europees_kiesrecht):
        """Sets the einddatum_uitsluiting_europees_kiesrecht of this Kiesrecht.


        :param einddatum_uitsluiting_europees_kiesrecht: The einddatum_uitsluiting_europees_kiesrecht of this Kiesrecht.  # noqa: E501
        :type: DatumOnvolledig
        """

        self._einddatum_uitsluiting_europees_kiesrecht = einddatum_uitsluiting_europees_kiesrecht

    @property
    def einddatum_uitsluiting_kiesrecht(self):
        """Gets the einddatum_uitsluiting_kiesrecht of this Kiesrecht.  # noqa: E501


        :return: The einddatum_uitsluiting_kiesrecht of this Kiesrecht.  # noqa: E501
        :rtype: DatumOnvolledig
        """
        return self._einddatum_uitsluiting_kiesrecht

    @einddatum_uitsluiting_kiesrecht.setter
    def einddatum_uitsluiting_kiesrecht(self, einddatum_uitsluiting_kiesrecht):
        """Sets the einddatum_uitsluiting_kiesrecht of this Kiesrecht.


        :param einddatum_uitsluiting_kiesrecht: The einddatum_uitsluiting_kiesrecht of this Kiesrecht.  # noqa: E501
        :type: DatumOnvolledig
        """

        self._einddatum_uitsluiting_kiesrecht = einddatum_uitsluiting_kiesrecht

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Kiesrecht):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Kiesrecht):
            return True

        return self.to_dict() != other.to_dict()
