# coding: utf-8

"""
    Bevragingen ingeschreven personen

    API voor het ontsluiten van gegevens van ingeschreven personen en aanverwante gegevens uit de GBA en RNI. Met deze API worden de actuele gegevens van ingeschreven personen, hun kinderen, partners en ouders ontsloten. <br> Heeft een persoon bijvoorbeeld geen geldige nationaliteit, dan wordt nationaliteit niet geretourneerd. <br> Heeft een persoon een beÃ«indigd partnerschap of huwelijk, dan wordt de partner niet geretourneerd. <br> <br> Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/tree/master/features) voor nadere toelichting. <br>   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class VerblijfplaatsAllOf(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'identificatiecode_adresseerbaar_object': 'str',
        'indicatie_vestiging_vanuit_buitenland': 'bool',
        'locatiebeschrijving': 'str',
        'straatnaam': 'str',
        'vanuit_vertrokken_onbekend_waarheen': 'bool',
        'datum_aanvang_adreshouding': 'DatumOnvolledig',
        'datum_ingang_geldigheid': 'DatumOnvolledig',
        'datum_inschrijving_in_gemeente': 'DatumOnvolledig',
        'datum_vestiging_in_nederland': 'DatumOnvolledig',
        'gemeente_van_inschrijving': 'Waardetabel',
        'land_vanwaar_ingeschreven': 'Waardetabel',
        'verblijf_buitenland': 'VerblijfBuitenland',
        'in_onderzoek': 'VerblijfplaatsInOnderzoek'
    }

    attribute_map = {
        'identificatiecode_adresseerbaar_object': 'identificatiecodeAdresseerbaarObject',
        'indicatie_vestiging_vanuit_buitenland': 'indicatieVestigingVanuitBuitenland',
        'locatiebeschrijving': 'locatiebeschrijving',
        'straatnaam': 'straatnaam',
        'vanuit_vertrokken_onbekend_waarheen': 'vanuitVertrokkenOnbekendWaarheen',
        'datum_aanvang_adreshouding': 'datumAanvangAdreshouding',
        'datum_ingang_geldigheid': 'datumIngangGeldigheid',
        'datum_inschrijving_in_gemeente': 'datumInschrijvingInGemeente',
        'datum_vestiging_in_nederland': 'datumVestigingInNederland',
        'gemeente_van_inschrijving': 'gemeenteVanInschrijving',
        'land_vanwaar_ingeschreven': 'landVanwaarIngeschreven',
        'verblijf_buitenland': 'verblijfBuitenland',
        'in_onderzoek': 'inOnderzoek'
    }

    def __init__(self, identificatiecode_adresseerbaar_object=None, indicatie_vestiging_vanuit_buitenland=None, locatiebeschrijving=None, straatnaam=None, vanuit_vertrokken_onbekend_waarheen=None, datum_aanvang_adreshouding=None, datum_ingang_geldigheid=None, datum_inschrijving_in_gemeente=None, datum_vestiging_in_nederland=None, gemeente_van_inschrijving=None, land_vanwaar_ingeschreven=None, verblijf_buitenland=None, in_onderzoek=None, local_vars_configuration=None):  # noqa: E501
        """VerblijfplaatsAllOf - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._identificatiecode_adresseerbaar_object = None
        self._indicatie_vestiging_vanuit_buitenland = None
        self._locatiebeschrijving = None
        self._straatnaam = None
        self._vanuit_vertrokken_onbekend_waarheen = None
        self._datum_aanvang_adreshouding = None
        self._datum_ingang_geldigheid = None
        self._datum_inschrijving_in_gemeente = None
        self._datum_vestiging_in_nederland = None
        self._gemeente_van_inschrijving = None
        self._land_vanwaar_ingeschreven = None
        self._verblijf_buitenland = None
        self._in_onderzoek = None
        self.discriminator = None

        if identificatiecode_adresseerbaar_object is not None:
            self.identificatiecode_adresseerbaar_object = identificatiecode_adresseerbaar_object
        if indicatie_vestiging_vanuit_buitenland is not None:
            self.indicatie_vestiging_vanuit_buitenland = indicatie_vestiging_vanuit_buitenland
        if locatiebeschrijving is not None:
            self.locatiebeschrijving = locatiebeschrijving
        if straatnaam is not None:
            self.straatnaam = straatnaam
        if vanuit_vertrokken_onbekend_waarheen is not None:
            self.vanuit_vertrokken_onbekend_waarheen = vanuit_vertrokken_onbekend_waarheen
        if datum_aanvang_adreshouding is not None:
            self.datum_aanvang_adreshouding = datum_aanvang_adreshouding
        if datum_ingang_geldigheid is not None:
            self.datum_ingang_geldigheid = datum_ingang_geldigheid
        if datum_inschrijving_in_gemeente is not None:
            self.datum_inschrijving_in_gemeente = datum_inschrijving_in_gemeente
        if datum_vestiging_in_nederland is not None:
            self.datum_vestiging_in_nederland = datum_vestiging_in_nederland
        if gemeente_van_inschrijving is not None:
            self.gemeente_van_inschrijving = gemeente_van_inschrijving
        if land_vanwaar_ingeschreven is not None:
            self.land_vanwaar_ingeschreven = land_vanwaar_ingeschreven
        if verblijf_buitenland is not None:
            self.verblijf_buitenland = verblijf_buitenland
        if in_onderzoek is not None:
            self.in_onderzoek = in_onderzoek

    @property
    def identificatiecode_adresseerbaar_object(self):
        """Gets the identificatiecode_adresseerbaar_object of this VerblijfplaatsAllOf.  # noqa: E501

        Een verblijfplaats kan een ligplaats, een standplaats of een verblijfsobject in een of meerdere panden zijn, waaraan respectievelijk een ligplaatsidentificatie, standplaatsidentificatie of verblijfsobjectidentificatie is toegekend. De Identificatiecode verblijfplaats is een combinatie van een viercijferige gemeentecode, een tweecijferige objecttypecode die aangeeft of de aanduiding een verblijfsobject (01), ligplaats (02) of standplaats (03) betreft en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig volgnummer. Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'.  # noqa: E501

        :return: The identificatiecode_adresseerbaar_object of this VerblijfplaatsAllOf.  # noqa: E501
        :rtype: str
        """
        return self._identificatiecode_adresseerbaar_object

    @identificatiecode_adresseerbaar_object.setter
    def identificatiecode_adresseerbaar_object(self, identificatiecode_adresseerbaar_object):
        """Sets the identificatiecode_adresseerbaar_object of this VerblijfplaatsAllOf.

        Een verblijfplaats kan een ligplaats, een standplaats of een verblijfsobject in een of meerdere panden zijn, waaraan respectievelijk een ligplaatsidentificatie, standplaatsidentificatie of verblijfsobjectidentificatie is toegekend. De Identificatiecode verblijfplaats is een combinatie van een viercijferige gemeentecode, een tweecijferige objecttypecode die aangeeft of de aanduiding een verblijfsobject (01), ligplaats (02) of standplaats (03) betreft en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig volgnummer. Combinatie van de viercijferige 'gemeentecode' (volgens GBA tabel 33, Gemeententabel), de tweecijferige 'objecttypecode' en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig 'objectvolgnummer'.  # noqa: E501

        :param identificatiecode_adresseerbaar_object: The identificatiecode_adresseerbaar_object of this VerblijfplaatsAllOf.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                identificatiecode_adresseerbaar_object is not None and len(identificatiecode_adresseerbaar_object) > 16):
            raise ValueError("Invalid value for `identificatiecode_adresseerbaar_object`, length must be less than or equal to `16`")  # noqa: E501

        self._identificatiecode_adresseerbaar_object = identificatiecode_adresseerbaar_object

    @property
    def indicatie_vestiging_vanuit_buitenland(self):
        """Gets the indicatie_vestiging_vanuit_buitenland of this VerblijfplaatsAllOf.  # noqa: E501

        Indicatie waarmee aangegeven wordt of de ingeschreven persoon zich vanuit het buitenland heeftingeschreven. Deze indicatie heeft als rol om aan te geven dat iemand zich vanuit het buitenland gevestigd heeft. Deze indicator wordt altijd meegeleverd als de waarde true is. Als de waarde false is wordt de indicator niet meegeleverd.  # noqa: E501

        :return: The indicatie_vestiging_vanuit_buitenland of this VerblijfplaatsAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._indicatie_vestiging_vanuit_buitenland

    @indicatie_vestiging_vanuit_buitenland.setter
    def indicatie_vestiging_vanuit_buitenland(self, indicatie_vestiging_vanuit_buitenland):
        """Sets the indicatie_vestiging_vanuit_buitenland of this VerblijfplaatsAllOf.

        Indicatie waarmee aangegeven wordt of de ingeschreven persoon zich vanuit het buitenland heeftingeschreven. Deze indicatie heeft als rol om aan te geven dat iemand zich vanuit het buitenland gevestigd heeft. Deze indicator wordt altijd meegeleverd als de waarde true is. Als de waarde false is wordt de indicator niet meegeleverd.  # noqa: E501

        :param indicatie_vestiging_vanuit_buitenland: The indicatie_vestiging_vanuit_buitenland of this VerblijfplaatsAllOf.  # noqa: E501
        :type: bool
        """

        self._indicatie_vestiging_vanuit_buitenland = indicatie_vestiging_vanuit_buitenland

    @property
    def locatiebeschrijving(self):
        """Gets the locatiebeschrijving of this VerblijfplaatsAllOf.  # noqa: E501

        Een geheel of gedeeltelijke omschrijving van de ligging van een object.  # noqa: E501

        :return: The locatiebeschrijving of this VerblijfplaatsAllOf.  # noqa: E501
        :rtype: str
        """
        return self._locatiebeschrijving

    @locatiebeschrijving.setter
    def locatiebeschrijving(self, locatiebeschrijving):
        """Sets the locatiebeschrijving of this VerblijfplaatsAllOf.

        Een geheel of gedeeltelijke omschrijving van de ligging van een object.  # noqa: E501

        :param locatiebeschrijving: The locatiebeschrijving of this VerblijfplaatsAllOf.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                locatiebeschrijving is not None and len(locatiebeschrijving) > 35):
            raise ValueError("Invalid value for `locatiebeschrijving`, length must be less than or equal to `35`")  # noqa: E501

        self._locatiebeschrijving = locatiebeschrijving

    @property
    def straatnaam(self):
        """Gets the straatnaam of this VerblijfplaatsAllOf.  # noqa: E501

        De officiÃ«le straatnaam zoals door het bevoegd gemeentelijk orgaan is vastgesteld, zo nodig ingekort conform de specificaties van de NEN 5825. alle alfanumrieke tekens  # noqa: E501

        :return: The straatnaam of this VerblijfplaatsAllOf.  # noqa: E501
        :rtype: str
        """
        return self._straatnaam

    @straatnaam.setter
    def straatnaam(self, straatnaam):
        """Sets the straatnaam of this VerblijfplaatsAllOf.

        De officiÃ«le straatnaam zoals door het bevoegd gemeentelijk orgaan is vastgesteld, zo nodig ingekort conform de specificaties van de NEN 5825. alle alfanumrieke tekens  # noqa: E501

        :param straatnaam: The straatnaam of this VerblijfplaatsAllOf.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                straatnaam is not None and len(straatnaam) > 24):
            raise ValueError("Invalid value for `straatnaam`, length must be less than or equal to `24`")  # noqa: E501

        self._straatnaam = straatnaam

    @property
    def vanuit_vertrokken_onbekend_waarheen(self):
        """Gets the vanuit_vertrokken_onbekend_waarheen of this VerblijfplaatsAllOf.  # noqa: E501

        Indicatie waarmee aangegeven wordt dat de persoon is teruggekeerd uit een situatie van vertrokken onbekend waarheen  # noqa: E501

        :return: The vanuit_vertrokken_onbekend_waarheen of this VerblijfplaatsAllOf.  # noqa: E501
        :rtype: bool
        """
        return self._vanuit_vertrokken_onbekend_waarheen

    @vanuit_vertrokken_onbekend_waarheen.setter
    def vanuit_vertrokken_onbekend_waarheen(self, vanuit_vertrokken_onbekend_waarheen):
        """Sets the vanuit_vertrokken_onbekend_waarheen of this VerblijfplaatsAllOf.

        Indicatie waarmee aangegeven wordt dat de persoon is teruggekeerd uit een situatie van vertrokken onbekend waarheen  # noqa: E501

        :param vanuit_vertrokken_onbekend_waarheen: The vanuit_vertrokken_onbekend_waarheen of this VerblijfplaatsAllOf.  # noqa: E501
        :type: bool
        """

        self._vanuit_vertrokken_onbekend_waarheen = vanuit_vertrokken_onbekend_waarheen

    @property
    def datum_aanvang_adreshouding(self):
        """Gets the datum_aanvang_adreshouding of this VerblijfplaatsAllOf.  # noqa: E501


        :return: The datum_aanvang_adreshouding of this VerblijfplaatsAllOf.  # noqa: E501
        :rtype: DatumOnvolledig
        """
        return self._datum_aanvang_adreshouding

    @datum_aanvang_adreshouding.setter
    def datum_aanvang_adreshouding(self, datum_aanvang_adreshouding):
        """Sets the datum_aanvang_adreshouding of this VerblijfplaatsAllOf.


        :param datum_aanvang_adreshouding: The datum_aanvang_adreshouding of this VerblijfplaatsAllOf.  # noqa: E501
        :type: DatumOnvolledig
        """

        self._datum_aanvang_adreshouding = datum_aanvang_adreshouding

    @property
    def datum_ingang_geldigheid(self):
        """Gets the datum_ingang_geldigheid of this VerblijfplaatsAllOf.  # noqa: E501


        :return: The datum_ingang_geldigheid of this VerblijfplaatsAllOf.  # noqa: E501
        :rtype: DatumOnvolledig
        """
        return self._datum_ingang_geldigheid

    @datum_ingang_geldigheid.setter
    def datum_ingang_geldigheid(self, datum_ingang_geldigheid):
        """Sets the datum_ingang_geldigheid of this VerblijfplaatsAllOf.


        :param datum_ingang_geldigheid: The datum_ingang_geldigheid of this VerblijfplaatsAllOf.  # noqa: E501
        :type: DatumOnvolledig
        """

        self._datum_ingang_geldigheid = datum_ingang_geldigheid

    @property
    def datum_inschrijving_in_gemeente(self):
        """Gets the datum_inschrijving_in_gemeente of this VerblijfplaatsAllOf.  # noqa: E501


        :return: The datum_inschrijving_in_gemeente of this VerblijfplaatsAllOf.  # noqa: E501
        :rtype: DatumOnvolledig
        """
        return self._datum_inschrijving_in_gemeente

    @datum_inschrijving_in_gemeente.setter
    def datum_inschrijving_in_gemeente(self, datum_inschrijving_in_gemeente):
        """Sets the datum_inschrijving_in_gemeente of this VerblijfplaatsAllOf.


        :param datum_inschrijving_in_gemeente: The datum_inschrijving_in_gemeente of this VerblijfplaatsAllOf.  # noqa: E501
        :type: DatumOnvolledig
        """

        self._datum_inschrijving_in_gemeente = datum_inschrijving_in_gemeente

    @property
    def datum_vestiging_in_nederland(self):
        """Gets the datum_vestiging_in_nederland of this VerblijfplaatsAllOf.  # noqa: E501


        :return: The datum_vestiging_in_nederland of this VerblijfplaatsAllOf.  # noqa: E501
        :rtype: DatumOnvolledig
        """
        return self._datum_vestiging_in_nederland

    @datum_vestiging_in_nederland.setter
    def datum_vestiging_in_nederland(self, datum_vestiging_in_nederland):
        """Sets the datum_vestiging_in_nederland of this VerblijfplaatsAllOf.


        :param datum_vestiging_in_nederland: The datum_vestiging_in_nederland of this VerblijfplaatsAllOf.  # noqa: E501
        :type: DatumOnvolledig
        """

        self._datum_vestiging_in_nederland = datum_vestiging_in_nederland

    @property
    def gemeente_van_inschrijving(self):
        """Gets the gemeente_van_inschrijving of this VerblijfplaatsAllOf.  # noqa: E501


        :return: The gemeente_van_inschrijving of this VerblijfplaatsAllOf.  # noqa: E501
        :rtype: Waardetabel
        """
        return self._gemeente_van_inschrijving

    @gemeente_van_inschrijving.setter
    def gemeente_van_inschrijving(self, gemeente_van_inschrijving):
        """Sets the gemeente_van_inschrijving of this VerblijfplaatsAllOf.


        :param gemeente_van_inschrijving: The gemeente_van_inschrijving of this VerblijfplaatsAllOf.  # noqa: E501
        :type: Waardetabel
        """

        self._gemeente_van_inschrijving = gemeente_van_inschrijving

    @property
    def land_vanwaar_ingeschreven(self):
        """Gets the land_vanwaar_ingeschreven of this VerblijfplaatsAllOf.  # noqa: E501


        :return: The land_vanwaar_ingeschreven of this VerblijfplaatsAllOf.  # noqa: E501
        :rtype: Waardetabel
        """
        return self._land_vanwaar_ingeschreven

    @land_vanwaar_ingeschreven.setter
    def land_vanwaar_ingeschreven(self, land_vanwaar_ingeschreven):
        """Sets the land_vanwaar_ingeschreven of this VerblijfplaatsAllOf.


        :param land_vanwaar_ingeschreven: The land_vanwaar_ingeschreven of this VerblijfplaatsAllOf.  # noqa: E501
        :type: Waardetabel
        """

        self._land_vanwaar_ingeschreven = land_vanwaar_ingeschreven

    @property
    def verblijf_buitenland(self):
        """Gets the verblijf_buitenland of this VerblijfplaatsAllOf.  # noqa: E501


        :return: The verblijf_buitenland of this VerblijfplaatsAllOf.  # noqa: E501
        :rtype: VerblijfBuitenland
        """
        return self._verblijf_buitenland

    @verblijf_buitenland.setter
    def verblijf_buitenland(self, verblijf_buitenland):
        """Sets the verblijf_buitenland of this VerblijfplaatsAllOf.


        :param verblijf_buitenland: The verblijf_buitenland of this VerblijfplaatsAllOf.  # noqa: E501
        :type: VerblijfBuitenland
        """

        self._verblijf_buitenland = verblijf_buitenland

    @property
    def in_onderzoek(self):
        """Gets the in_onderzoek of this VerblijfplaatsAllOf.  # noqa: E501


        :return: The in_onderzoek of this VerblijfplaatsAllOf.  # noqa: E501
        :rtype: VerblijfplaatsInOnderzoek
        """
        return self._in_onderzoek

    @in_onderzoek.setter
    def in_onderzoek(self, in_onderzoek):
        """Sets the in_onderzoek of this VerblijfplaatsAllOf.


        :param in_onderzoek: The in_onderzoek of this VerblijfplaatsAllOf.  # noqa: E501
        :type: VerblijfplaatsInOnderzoek
        """

        self._in_onderzoek = in_onderzoek

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VerblijfplaatsAllOf):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, VerblijfplaatsAllOf):
            return True

        return self.to_dict() != other.to_dict()
