# coding: utf-8

"""
    Bevragingen ingeschreven personen

    API voor het ontsluiten van gegevens van ingeschreven personen en aanverwante gegevens uit de GBA en RNI. Met deze API worden de actuele gegevens van ingeschreven personen, hun kinderen, partners en ouders ontsloten. <br> Heeft een persoon bijvoorbeeld geen geldige nationaliteit, dan wordt nationaliteit niet geretourneerd. <br> Heeft een persoon een beÃ«indigd partnerschap of huwelijk, dan wordt de partner niet geretourneerd. <br> <br> Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/tree/master/features) voor nadere toelichting. <br>   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class OuderInOnderzoek(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'burgerservicenummer': 'bool',
        'datum_ingang_familierechtelijke_betrekking': 'bool',
        'geslachtsaanduiding': 'bool',
        'datum_ingang_onderzoek': 'DatumOnvolledig'
    }

    attribute_map = {
        'burgerservicenummer': 'burgerservicenummer',
        'datum_ingang_familierechtelijke_betrekking': 'datumIngangFamilierechtelijkeBetrekking',
        'geslachtsaanduiding': 'geslachtsaanduiding',
        'datum_ingang_onderzoek': 'datumIngangOnderzoek'
    }

    def __init__(self, burgerservicenummer=None, datum_ingang_familierechtelijke_betrekking=None, geslachtsaanduiding=None, datum_ingang_onderzoek=None, local_vars_configuration=None):  # noqa: E501
        """OuderInOnderzoek - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._burgerservicenummer = None
        self._datum_ingang_familierechtelijke_betrekking = None
        self._geslachtsaanduiding = None
        self._datum_ingang_onderzoek = None
        self.discriminator = None

        if burgerservicenummer is not None:
            self.burgerservicenummer = burgerservicenummer
        if datum_ingang_familierechtelijke_betrekking is not None:
            self.datum_ingang_familierechtelijke_betrekking = datum_ingang_familierechtelijke_betrekking
        if geslachtsaanduiding is not None:
            self.geslachtsaanduiding = geslachtsaanduiding
        if datum_ingang_onderzoek is not None:
            self.datum_ingang_onderzoek = datum_ingang_onderzoek

    @property
    def burgerservicenummer(self):
        """Gets the burgerservicenummer of this OuderInOnderzoek.  # noqa: E501

        Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.  # noqa: E501

        :return: The burgerservicenummer of this OuderInOnderzoek.  # noqa: E501
        :rtype: bool
        """
        return self._burgerservicenummer

    @burgerservicenummer.setter
    def burgerservicenummer(self, burgerservicenummer):
        """Sets the burgerservicenummer of this OuderInOnderzoek.

        Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.  # noqa: E501

        :param burgerservicenummer: The burgerservicenummer of this OuderInOnderzoek.  # noqa: E501
        :type: bool
        """

        self._burgerservicenummer = burgerservicenummer

    @property
    def datum_ingang_familierechtelijke_betrekking(self):
        """Gets the datum_ingang_familierechtelijke_betrekking of this OuderInOnderzoek.  # noqa: E501

        Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.  # noqa: E501

        :return: The datum_ingang_familierechtelijke_betrekking of this OuderInOnderzoek.  # noqa: E501
        :rtype: bool
        """
        return self._datum_ingang_familierechtelijke_betrekking

    @datum_ingang_familierechtelijke_betrekking.setter
    def datum_ingang_familierechtelijke_betrekking(self, datum_ingang_familierechtelijke_betrekking):
        """Sets the datum_ingang_familierechtelijke_betrekking of this OuderInOnderzoek.

        Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.  # noqa: E501

        :param datum_ingang_familierechtelijke_betrekking: The datum_ingang_familierechtelijke_betrekking of this OuderInOnderzoek.  # noqa: E501
        :type: bool
        """

        self._datum_ingang_familierechtelijke_betrekking = datum_ingang_familierechtelijke_betrekking

    @property
    def geslachtsaanduiding(self):
        """Gets the geslachtsaanduiding of this OuderInOnderzoek.  # noqa: E501

        Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.  # noqa: E501

        :return: The geslachtsaanduiding of this OuderInOnderzoek.  # noqa: E501
        :rtype: bool
        """
        return self._geslachtsaanduiding

    @geslachtsaanduiding.setter
    def geslachtsaanduiding(self, geslachtsaanduiding):
        """Sets the geslachtsaanduiding of this OuderInOnderzoek.

        Indicator die aangeeft of het corresponderende gegeven voor deze persoon in onderzoek is.  # noqa: E501

        :param geslachtsaanduiding: The geslachtsaanduiding of this OuderInOnderzoek.  # noqa: E501
        :type: bool
        """

        self._geslachtsaanduiding = geslachtsaanduiding

    @property
    def datum_ingang_onderzoek(self):
        """Gets the datum_ingang_onderzoek of this OuderInOnderzoek.  # noqa: E501


        :return: The datum_ingang_onderzoek of this OuderInOnderzoek.  # noqa: E501
        :rtype: DatumOnvolledig
        """
        return self._datum_ingang_onderzoek

    @datum_ingang_onderzoek.setter
    def datum_ingang_onderzoek(self, datum_ingang_onderzoek):
        """Sets the datum_ingang_onderzoek of this OuderInOnderzoek.


        :param datum_ingang_onderzoek: The datum_ingang_onderzoek of this OuderInOnderzoek.  # noqa: E501
        :type: DatumOnvolledig
        """

        self._datum_ingang_onderzoek = datum_ingang_onderzoek

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OuderInOnderzoek):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OuderInOnderzoek):
            return True

        return self.to_dict() != other.to_dict()
