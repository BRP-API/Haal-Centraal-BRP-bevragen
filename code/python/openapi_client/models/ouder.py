# coding: utf-8

"""
    Bevragingen ingeschreven personen

    API voor het ontsluiten van gegevens van ingeschreven personen en aanverwante gegevens uit de GBA en RNI. Met deze API worden de actuele gegevens van ingeschreven personen, hun kinderen, partners en ouders ontsloten. <br> Heeft een persoon bijvoorbeeld geen geldige nationaliteit, dan wordt nationaliteit niet geretourneerd. <br> Heeft een persoon een beÃ«indigd partnerschap of huwelijk, dan wordt de partner niet geretourneerd. <br> <br> Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/tree/master/features) voor nadere toelichting. <br>   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Ouder(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'burgerservicenummer': 'str',
        'geslachtsaanduiding': 'GeslachtEnum',
        'ouder_aanduiding': 'OuderAanduidingEnum',
        'datum_ingang_familierechtelijke_betrekking': 'DatumOnvolledig',
        'naam': 'Naam',
        'in_onderzoek': 'OuderInOnderzoek',
        'geboorte': 'Geboorte',
        'geheimhouding_persoonsgegevens': 'bool'
    }

    attribute_map = {
        'burgerservicenummer': 'burgerservicenummer',
        'geslachtsaanduiding': 'geslachtsaanduiding',
        'ouder_aanduiding': 'ouderAanduiding',
        'datum_ingang_familierechtelijke_betrekking': 'datumIngangFamilierechtelijkeBetrekking',
        'naam': 'naam',
        'in_onderzoek': 'inOnderzoek',
        'geboorte': 'geboorte',
        'geheimhouding_persoonsgegevens': 'geheimhoudingPersoonsgegevens'
    }

    def __init__(self, burgerservicenummer=None, geslachtsaanduiding=None, ouder_aanduiding=None, datum_ingang_familierechtelijke_betrekking=None, naam=None, in_onderzoek=None, geboorte=None, geheimhouding_persoonsgegevens=None, local_vars_configuration=None):  # noqa: E501
        """Ouder - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._burgerservicenummer = None
        self._geslachtsaanduiding = None
        self._ouder_aanduiding = None
        self._datum_ingang_familierechtelijke_betrekking = None
        self._naam = None
        self._in_onderzoek = None
        self._geboorte = None
        self._geheimhouding_persoonsgegevens = None
        self.discriminator = None

        if burgerservicenummer is not None:
            self.burgerservicenummer = burgerservicenummer
        if geslachtsaanduiding is not None:
            self.geslachtsaanduiding = geslachtsaanduiding
        if ouder_aanduiding is not None:
            self.ouder_aanduiding = ouder_aanduiding
        if datum_ingang_familierechtelijke_betrekking is not None:
            self.datum_ingang_familierechtelijke_betrekking = datum_ingang_familierechtelijke_betrekking
        if naam is not None:
            self.naam = naam
        if in_onderzoek is not None:
            self.in_onderzoek = in_onderzoek
        if geboorte is not None:
            self.geboorte = geboorte
        if geheimhouding_persoonsgegevens is not None:
            self.geheimhouding_persoonsgegevens = geheimhouding_persoonsgegevens

    @property
    def burgerservicenummer(self):
        """Gets the burgerservicenummer of this Ouder.  # noqa: E501

        Het burgerservicenummer, bedoeld in artikel 1.1 van de Wet algemene bepalingen burgerservicenummer. Alle nummers waarvoor geldt dat, indien aangeduid als (s0 s1 s2 s3 s4 s5 s6 s7 s8), het resultaat van (9*s0) + (8*s1) + (7*s2) +...+ (2*s7) - (1*s8) deelbaar is door elf. Er moeten dus 9 cijfers aanwezig zijn.  # noqa: E501

        :return: The burgerservicenummer of this Ouder.  # noqa: E501
        :rtype: str
        """
        return self._burgerservicenummer

    @burgerservicenummer.setter
    def burgerservicenummer(self, burgerservicenummer):
        """Sets the burgerservicenummer of this Ouder.

        Het burgerservicenummer, bedoeld in artikel 1.1 van de Wet algemene bepalingen burgerservicenummer. Alle nummers waarvoor geldt dat, indien aangeduid als (s0 s1 s2 s3 s4 s5 s6 s7 s8), het resultaat van (9*s0) + (8*s1) + (7*s2) +...+ (2*s7) - (1*s8) deelbaar is door elf. Er moeten dus 9 cijfers aanwezig zijn.  # noqa: E501

        :param burgerservicenummer: The burgerservicenummer of this Ouder.  # noqa: E501
        :type: str
        """
        if (self.local_vars_configuration.client_side_validation and
                burgerservicenummer is not None and len(burgerservicenummer) > 9):
            raise ValueError("Invalid value for `burgerservicenummer`, length must be less than or equal to `9`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                burgerservicenummer is not None and len(burgerservicenummer) < 9):
            raise ValueError("Invalid value for `burgerservicenummer`, length must be greater than or equal to `9`")  # noqa: E501
        if (self.local_vars_configuration.client_side_validation and
                burgerservicenummer is not None and not re.search(r'^[0-9]*$', burgerservicenummer)):  # noqa: E501
            raise ValueError(r"Invalid value for `burgerservicenummer`, must be a follow pattern or equal to `/^[0-9]*$/`")  # noqa: E501

        self._burgerservicenummer = burgerservicenummer

    @property
    def geslachtsaanduiding(self):
        """Gets the geslachtsaanduiding of this Ouder.  # noqa: E501


        :return: The geslachtsaanduiding of this Ouder.  # noqa: E501
        :rtype: GeslachtEnum
        """
        return self._geslachtsaanduiding

    @geslachtsaanduiding.setter
    def geslachtsaanduiding(self, geslachtsaanduiding):
        """Sets the geslachtsaanduiding of this Ouder.


        :param geslachtsaanduiding: The geslachtsaanduiding of this Ouder.  # noqa: E501
        :type: GeslachtEnum
        """

        self._geslachtsaanduiding = geslachtsaanduiding

    @property
    def ouder_aanduiding(self):
        """Gets the ouder_aanduiding of this Ouder.  # noqa: E501


        :return: The ouder_aanduiding of this Ouder.  # noqa: E501
        :rtype: OuderAanduidingEnum
        """
        return self._ouder_aanduiding

    @ouder_aanduiding.setter
    def ouder_aanduiding(self, ouder_aanduiding):
        """Sets the ouder_aanduiding of this Ouder.


        :param ouder_aanduiding: The ouder_aanduiding of this Ouder.  # noqa: E501
        :type: OuderAanduidingEnum
        """

        self._ouder_aanduiding = ouder_aanduiding

    @property
    def datum_ingang_familierechtelijke_betrekking(self):
        """Gets the datum_ingang_familierechtelijke_betrekking of this Ouder.  # noqa: E501


        :return: The datum_ingang_familierechtelijke_betrekking of this Ouder.  # noqa: E501
        :rtype: DatumOnvolledig
        """
        return self._datum_ingang_familierechtelijke_betrekking

    @datum_ingang_familierechtelijke_betrekking.setter
    def datum_ingang_familierechtelijke_betrekking(self, datum_ingang_familierechtelijke_betrekking):
        """Sets the datum_ingang_familierechtelijke_betrekking of this Ouder.


        :param datum_ingang_familierechtelijke_betrekking: The datum_ingang_familierechtelijke_betrekking of this Ouder.  # noqa: E501
        :type: DatumOnvolledig
        """

        self._datum_ingang_familierechtelijke_betrekking = datum_ingang_familierechtelijke_betrekking

    @property
    def naam(self):
        """Gets the naam of this Ouder.  # noqa: E501


        :return: The naam of this Ouder.  # noqa: E501
        :rtype: Naam
        """
        return self._naam

    @naam.setter
    def naam(self, naam):
        """Sets the naam of this Ouder.


        :param naam: The naam of this Ouder.  # noqa: E501
        :type: Naam
        """

        self._naam = naam

    @property
    def in_onderzoek(self):
        """Gets the in_onderzoek of this Ouder.  # noqa: E501


        :return: The in_onderzoek of this Ouder.  # noqa: E501
        :rtype: OuderInOnderzoek
        """
        return self._in_onderzoek

    @in_onderzoek.setter
    def in_onderzoek(self, in_onderzoek):
        """Sets the in_onderzoek of this Ouder.


        :param in_onderzoek: The in_onderzoek of this Ouder.  # noqa: E501
        :type: OuderInOnderzoek
        """

        self._in_onderzoek = in_onderzoek

    @property
    def geboorte(self):
        """Gets the geboorte of this Ouder.  # noqa: E501


        :return: The geboorte of this Ouder.  # noqa: E501
        :rtype: Geboorte
        """
        return self._geboorte

    @geboorte.setter
    def geboorte(self, geboorte):
        """Sets the geboorte of this Ouder.


        :param geboorte: The geboorte of this Ouder.  # noqa: E501
        :type: Geboorte
        """

        self._geboorte = geboorte

    @property
    def geheimhouding_persoonsgegevens(self):
        """Gets the geheimhouding_persoonsgegevens of this Ouder.  # noqa: E501

        Een aanduiding die aangeeft dat gegevens wel of niet verstrekt mogen worden. Indien true: op verzoek van deze persoon is het verstrekken van gegevens over deze persoon aan bepaalde derden niet toegestaan.  # noqa: E501

        :return: The geheimhouding_persoonsgegevens of this Ouder.  # noqa: E501
        :rtype: bool
        """
        return self._geheimhouding_persoonsgegevens

    @geheimhouding_persoonsgegevens.setter
    def geheimhouding_persoonsgegevens(self, geheimhouding_persoonsgegevens):
        """Sets the geheimhouding_persoonsgegevens of this Ouder.

        Een aanduiding die aangeeft dat gegevens wel of niet verstrekt mogen worden. Indien true: op verzoek van deze persoon is het verstrekken van gegevens over deze persoon aan bepaalde derden niet toegestaan.  # noqa: E501

        :param geheimhouding_persoonsgegevens: The geheimhouding_persoonsgegevens of this Ouder.  # noqa: E501
        :type: bool
        """

        self._geheimhouding_persoonsgegevens = geheimhouding_persoonsgegevens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Ouder):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Ouder):
            return True

        return self.to_dict() != other.to_dict()
