# coding: utf-8

"""
    Bevragen Ingeschreven Personen

    API voor het bevragen van ingeschreven personen uit de basisregistratie personen (BRP), inclusief de registratie niet-ingezeten (RNI). Met deze API kun je personen zoeken en actuele gegevens over personen, kinderen, partners en ouders raadplegen.  Gegevens die er niet zijn of niet actueel zijn krijg je niet terug. Heeft een persoon bijvoorbeeld geen geldige nationaliteit, en alleen een beëindigd partnerschap, dan krijg je geen gegevens over nationaliteit en partner.  Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/tree/v1.1.0/features) voor nadere toelichting.   # noqa: E501

    The version of the OpenAPI document: 1.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class IngeschrevenPersoonLinks(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        '_self': 'HalLink',
        'ouders': 'list[HalLink]',
        'reisdocumenten': 'list[HalLink]',
        'kinderen': 'list[HalLink]',
        'partners': 'list[HalLink]',
        'partnerhistorie': 'HalLink',
        'verblijfplaatshistorie': 'HalLink',
        'verblijfstitelhistorie': 'HalLink',
        'nationaliteit_historie': 'HalLink',
        'adres': 'HalLink'
    }

    attribute_map = {
        '_self': 'self',
        'ouders': 'ouders',
        'reisdocumenten': 'reisdocumenten',
        'kinderen': 'kinderen',
        'partners': 'partners',
        'partnerhistorie': 'partnerhistorie',
        'verblijfplaatshistorie': 'verblijfplaatshistorie',
        'verblijfstitelhistorie': 'verblijfstitelhistorie',
        'nationaliteit_historie': 'nationaliteitHistorie',
        'adres': 'adres'
    }

    def __init__(self, _self=None, ouders=None, reisdocumenten=None, kinderen=None, partners=None, partnerhistorie=None, verblijfplaatshistorie=None, verblijfstitelhistorie=None, nationaliteit_historie=None, adres=None, local_vars_configuration=None):  # noqa: E501
        """IngeschrevenPersoonLinks - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self.__self = None
        self._ouders = None
        self._reisdocumenten = None
        self._kinderen = None
        self._partners = None
        self._partnerhistorie = None
        self._verblijfplaatshistorie = None
        self._verblijfstitelhistorie = None
        self._nationaliteit_historie = None
        self._adres = None
        self.discriminator = None

        if _self is not None:
            self._self = _self
        if ouders is not None:
            self.ouders = ouders
        if reisdocumenten is not None:
            self.reisdocumenten = reisdocumenten
        if kinderen is not None:
            self.kinderen = kinderen
        if partners is not None:
            self.partners = partners
        if partnerhistorie is not None:
            self.partnerhistorie = partnerhistorie
        if verblijfplaatshistorie is not None:
            self.verblijfplaatshistorie = verblijfplaatshistorie
        if verblijfstitelhistorie is not None:
            self.verblijfstitelhistorie = verblijfstitelhistorie
        if nationaliteit_historie is not None:
            self.nationaliteit_historie = nationaliteit_historie
        if adres is not None:
            self.adres = adres

    @property
    def _self(self):
        """Gets the _self of this IngeschrevenPersoonLinks.  # noqa: E501


        :return: The _self of this IngeschrevenPersoonLinks.  # noqa: E501
        :rtype: HalLink
        """
        return self.__self

    @_self.setter
    def _self(self, _self):
        """Sets the _self of this IngeschrevenPersoonLinks.


        :param _self: The _self of this IngeschrevenPersoonLinks.  # noqa: E501
        :type: HalLink
        """

        self.__self = _self

    @property
    def ouders(self):
        """Gets the ouders of this IngeschrevenPersoonLinks.  # noqa: E501

        De ouders van de persoon.   # noqa: E501

        :return: The ouders of this IngeschrevenPersoonLinks.  # noqa: E501
        :rtype: list[HalLink]
        """
        return self._ouders

    @ouders.setter
    def ouders(self, ouders):
        """Sets the ouders of this IngeschrevenPersoonLinks.

        De ouders van de persoon.   # noqa: E501

        :param ouders: The ouders of this IngeschrevenPersoonLinks.  # noqa: E501
        :type: list[HalLink]
        """

        self._ouders = ouders

    @property
    def reisdocumenten(self):
        """Gets the reisdocumenten of this IngeschrevenPersoonLinks.  # noqa: E501

        De reisdocumenten die aan de persoon zijn verstrekt.   # noqa: E501

        :return: The reisdocumenten of this IngeschrevenPersoonLinks.  # noqa: E501
        :rtype: list[HalLink]
        """
        return self._reisdocumenten

    @reisdocumenten.setter
    def reisdocumenten(self, reisdocumenten):
        """Sets the reisdocumenten of this IngeschrevenPersoonLinks.

        De reisdocumenten die aan de persoon zijn verstrekt.   # noqa: E501

        :param reisdocumenten: The reisdocumenten of this IngeschrevenPersoonLinks.  # noqa: E501
        :type: list[HalLink]
        """

        self._reisdocumenten = reisdocumenten

    @property
    def kinderen(self):
        """Gets the kinderen of this IngeschrevenPersoonLinks.  # noqa: E501

        De kinderen van de persoon.   # noqa: E501

        :return: The kinderen of this IngeschrevenPersoonLinks.  # noqa: E501
        :rtype: list[HalLink]
        """
        return self._kinderen

    @kinderen.setter
    def kinderen(self, kinderen):
        """Sets the kinderen of this IngeschrevenPersoonLinks.

        De kinderen van de persoon.   # noqa: E501

        :param kinderen: The kinderen of this IngeschrevenPersoonLinks.  # noqa: E501
        :type: list[HalLink]
        """

        self._kinderen = kinderen

    @property
    def partners(self):
        """Gets the partners of this IngeschrevenPersoonLinks.  # noqa: E501

        De actuele bij de ingeschreven persoon geregistreerde huwelijken en geregistreerd partnerschappen. Een beëindigd huwelijk of geregistreerd partnerschap wordt niet teruggegeven.   # noqa: E501

        :return: The partners of this IngeschrevenPersoonLinks.  # noqa: E501
        :rtype: list[HalLink]
        """
        return self._partners

    @partners.setter
    def partners(self, partners):
        """Sets the partners of this IngeschrevenPersoonLinks.

        De actuele bij de ingeschreven persoon geregistreerde huwelijken en geregistreerd partnerschappen. Een beëindigd huwelijk of geregistreerd partnerschap wordt niet teruggegeven.   # noqa: E501

        :param partners: The partners of this IngeschrevenPersoonLinks.  # noqa: E501
        :type: list[HalLink]
        """

        self._partners = partners

    @property
    def partnerhistorie(self):
        """Gets the partnerhistorie of this IngeschrevenPersoonLinks.  # noqa: E501


        :return: The partnerhistorie of this IngeschrevenPersoonLinks.  # noqa: E501
        :rtype: HalLink
        """
        return self._partnerhistorie

    @partnerhistorie.setter
    def partnerhistorie(self, partnerhistorie):
        """Sets the partnerhistorie of this IngeschrevenPersoonLinks.


        :param partnerhistorie: The partnerhistorie of this IngeschrevenPersoonLinks.  # noqa: E501
        :type: HalLink
        """

        self._partnerhistorie = partnerhistorie

    @property
    def verblijfplaatshistorie(self):
        """Gets the verblijfplaatshistorie of this IngeschrevenPersoonLinks.  # noqa: E501


        :return: The verblijfplaatshistorie of this IngeschrevenPersoonLinks.  # noqa: E501
        :rtype: HalLink
        """
        return self._verblijfplaatshistorie

    @verblijfplaatshistorie.setter
    def verblijfplaatshistorie(self, verblijfplaatshistorie):
        """Sets the verblijfplaatshistorie of this IngeschrevenPersoonLinks.


        :param verblijfplaatshistorie: The verblijfplaatshistorie of this IngeschrevenPersoonLinks.  # noqa: E501
        :type: HalLink
        """

        self._verblijfplaatshistorie = verblijfplaatshistorie

    @property
    def verblijfstitelhistorie(self):
        """Gets the verblijfstitelhistorie of this IngeschrevenPersoonLinks.  # noqa: E501


        :return: The verblijfstitelhistorie of this IngeschrevenPersoonLinks.  # noqa: E501
        :rtype: HalLink
        """
        return self._verblijfstitelhistorie

    @verblijfstitelhistorie.setter
    def verblijfstitelhistorie(self, verblijfstitelhistorie):
        """Sets the verblijfstitelhistorie of this IngeschrevenPersoonLinks.


        :param verblijfstitelhistorie: The verblijfstitelhistorie of this IngeschrevenPersoonLinks.  # noqa: E501
        :type: HalLink
        """

        self._verblijfstitelhistorie = verblijfstitelhistorie

    @property
    def nationaliteit_historie(self):
        """Gets the nationaliteit_historie of this IngeschrevenPersoonLinks.  # noqa: E501


        :return: The nationaliteit_historie of this IngeschrevenPersoonLinks.  # noqa: E501
        :rtype: HalLink
        """
        return self._nationaliteit_historie

    @nationaliteit_historie.setter
    def nationaliteit_historie(self, nationaliteit_historie):
        """Sets the nationaliteit_historie of this IngeschrevenPersoonLinks.


        :param nationaliteit_historie: The nationaliteit_historie of this IngeschrevenPersoonLinks.  # noqa: E501
        :type: HalLink
        """

        self._nationaliteit_historie = nationaliteit_historie

    @property
    def adres(self):
        """Gets the adres of this IngeschrevenPersoonLinks.  # noqa: E501


        :return: The adres of this IngeschrevenPersoonLinks.  # noqa: E501
        :rtype: HalLink
        """
        return self._adres

    @adres.setter
    def adres(self, adres):
        """Sets the adres of this IngeschrevenPersoonLinks.


        :param adres: The adres of this IngeschrevenPersoonLinks.  # noqa: E501
        :type: HalLink
        """

        self._adres = adres

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IngeschrevenPersoonLinks):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, IngeschrevenPersoonLinks):
            return True

        return self.to_dict() != other.to_dict()
