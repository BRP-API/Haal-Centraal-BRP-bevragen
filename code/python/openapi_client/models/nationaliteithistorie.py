# coding: utf-8

"""
    Bevragingen ingeschreven personen

    API voor het ontsluiten van gegevens van ingeschreven personen en aanverwante gegevens uit de GBA en RNI. Met deze API worden de actuele gegevens van ingeschreven personen, hun kinderen, partners en ouders ontsloten. <br> Heeft een persoon bijvoorbeeld geen geldige nationaliteit, dan wordt nationaliteit niet geretourneerd. <br> Heeft een persoon een beÃ«indigd partnerschap of huwelijk, dan wordt de partner niet geretourneerd. <br> <br> Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/tree/master/features) voor nadere toelichting. <br>   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Nationaliteithistorie(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'aanduiding_bijzonder_nederlanderschap': 'AanduidingBijzonderNederlanderschapEnum',
        'datum_ingang_geldigheid': 'DatumOnvolledig',
        'nationaliteit': 'Waardetabel',
        'reden_opname': 'Waardetabel',
        'in_onderzoek': 'NationaliteitInOnderzoek',
        'geheimhouding_persoonsgegevens': 'bool',
        'datum_einde_geldigheid': 'DatumOnvolledig',
        'reden_beeindigen': 'Waardetabel',
        'indicatie_nationaliteit_beeindigd': 'bool'
    }

    attribute_map = {
        'aanduiding_bijzonder_nederlanderschap': 'aanduidingBijzonderNederlanderschap',
        'datum_ingang_geldigheid': 'datumIngangGeldigheid',
        'nationaliteit': 'nationaliteit',
        'reden_opname': 'redenOpname',
        'in_onderzoek': 'inOnderzoek',
        'geheimhouding_persoonsgegevens': 'geheimhoudingPersoonsgegevens',
        'datum_einde_geldigheid': 'datumEindeGeldigheid',
        'reden_beeindigen': 'redenBeeindigen',
        'indicatie_nationaliteit_beeindigd': 'indicatieNationaliteitBeeindigd'
    }

    def __init__(self, aanduiding_bijzonder_nederlanderschap=None, datum_ingang_geldigheid=None, nationaliteit=None, reden_opname=None, in_onderzoek=None, geheimhouding_persoonsgegevens=None, datum_einde_geldigheid=None, reden_beeindigen=None, indicatie_nationaliteit_beeindigd=None, local_vars_configuration=None):  # noqa: E501
        """Nationaliteithistorie - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._aanduiding_bijzonder_nederlanderschap = None
        self._datum_ingang_geldigheid = None
        self._nationaliteit = None
        self._reden_opname = None
        self._in_onderzoek = None
        self._geheimhouding_persoonsgegevens = None
        self._datum_einde_geldigheid = None
        self._reden_beeindigen = None
        self._indicatie_nationaliteit_beeindigd = None
        self.discriminator = None

        if aanduiding_bijzonder_nederlanderschap is not None:
            self.aanduiding_bijzonder_nederlanderschap = aanduiding_bijzonder_nederlanderschap
        if datum_ingang_geldigheid is not None:
            self.datum_ingang_geldigheid = datum_ingang_geldigheid
        if nationaliteit is not None:
            self.nationaliteit = nationaliteit
        if reden_opname is not None:
            self.reden_opname = reden_opname
        if in_onderzoek is not None:
            self.in_onderzoek = in_onderzoek
        if geheimhouding_persoonsgegevens is not None:
            self.geheimhouding_persoonsgegevens = geheimhouding_persoonsgegevens
        if datum_einde_geldigheid is not None:
            self.datum_einde_geldigheid = datum_einde_geldigheid
        if reden_beeindigen is not None:
            self.reden_beeindigen = reden_beeindigen
        if indicatie_nationaliteit_beeindigd is not None:
            self.indicatie_nationaliteit_beeindigd = indicatie_nationaliteit_beeindigd

    @property
    def aanduiding_bijzonder_nederlanderschap(self):
        """Gets the aanduiding_bijzonder_nederlanderschap of this Nationaliteithistorie.  # noqa: E501


        :return: The aanduiding_bijzonder_nederlanderschap of this Nationaliteithistorie.  # noqa: E501
        :rtype: AanduidingBijzonderNederlanderschapEnum
        """
        return self._aanduiding_bijzonder_nederlanderschap

    @aanduiding_bijzonder_nederlanderschap.setter
    def aanduiding_bijzonder_nederlanderschap(self, aanduiding_bijzonder_nederlanderschap):
        """Sets the aanduiding_bijzonder_nederlanderschap of this Nationaliteithistorie.


        :param aanduiding_bijzonder_nederlanderschap: The aanduiding_bijzonder_nederlanderschap of this Nationaliteithistorie.  # noqa: E501
        :type: AanduidingBijzonderNederlanderschapEnum
        """

        self._aanduiding_bijzonder_nederlanderschap = aanduiding_bijzonder_nederlanderschap

    @property
    def datum_ingang_geldigheid(self):
        """Gets the datum_ingang_geldigheid of this Nationaliteithistorie.  # noqa: E501


        :return: The datum_ingang_geldigheid of this Nationaliteithistorie.  # noqa: E501
        :rtype: DatumOnvolledig
        """
        return self._datum_ingang_geldigheid

    @datum_ingang_geldigheid.setter
    def datum_ingang_geldigheid(self, datum_ingang_geldigheid):
        """Sets the datum_ingang_geldigheid of this Nationaliteithistorie.


        :param datum_ingang_geldigheid: The datum_ingang_geldigheid of this Nationaliteithistorie.  # noqa: E501
        :type: DatumOnvolledig
        """

        self._datum_ingang_geldigheid = datum_ingang_geldigheid

    @property
    def nationaliteit(self):
        """Gets the nationaliteit of this Nationaliteithistorie.  # noqa: E501


        :return: The nationaliteit of this Nationaliteithistorie.  # noqa: E501
        :rtype: Waardetabel
        """
        return self._nationaliteit

    @nationaliteit.setter
    def nationaliteit(self, nationaliteit):
        """Sets the nationaliteit of this Nationaliteithistorie.


        :param nationaliteit: The nationaliteit of this Nationaliteithistorie.  # noqa: E501
        :type: Waardetabel
        """

        self._nationaliteit = nationaliteit

    @property
    def reden_opname(self):
        """Gets the reden_opname of this Nationaliteithistorie.  # noqa: E501


        :return: The reden_opname of this Nationaliteithistorie.  # noqa: E501
        :rtype: Waardetabel
        """
        return self._reden_opname

    @reden_opname.setter
    def reden_opname(self, reden_opname):
        """Sets the reden_opname of this Nationaliteithistorie.


        :param reden_opname: The reden_opname of this Nationaliteithistorie.  # noqa: E501
        :type: Waardetabel
        """

        self._reden_opname = reden_opname

    @property
    def in_onderzoek(self):
        """Gets the in_onderzoek of this Nationaliteithistorie.  # noqa: E501


        :return: The in_onderzoek of this Nationaliteithistorie.  # noqa: E501
        :rtype: NationaliteitInOnderzoek
        """
        return self._in_onderzoek

    @in_onderzoek.setter
    def in_onderzoek(self, in_onderzoek):
        """Sets the in_onderzoek of this Nationaliteithistorie.


        :param in_onderzoek: The in_onderzoek of this Nationaliteithistorie.  # noqa: E501
        :type: NationaliteitInOnderzoek
        """

        self._in_onderzoek = in_onderzoek

    @property
    def geheimhouding_persoonsgegevens(self):
        """Gets the geheimhouding_persoonsgegevens of this Nationaliteithistorie.  # noqa: E501

        Een aanduiding die aangeeft dat gegevens wel of niet verstrekt mogen worden. Indien true: op verzoek van deze persoon is het verstrekken van gegevens over deze persoon aan bepaalde derden niet toegestaan.  # noqa: E501

        :return: The geheimhouding_persoonsgegevens of this Nationaliteithistorie.  # noqa: E501
        :rtype: bool
        """
        return self._geheimhouding_persoonsgegevens

    @geheimhouding_persoonsgegevens.setter
    def geheimhouding_persoonsgegevens(self, geheimhouding_persoonsgegevens):
        """Sets the geheimhouding_persoonsgegevens of this Nationaliteithistorie.

        Een aanduiding die aangeeft dat gegevens wel of niet verstrekt mogen worden. Indien true: op verzoek van deze persoon is het verstrekken van gegevens over deze persoon aan bepaalde derden niet toegestaan.  # noqa: E501

        :param geheimhouding_persoonsgegevens: The geheimhouding_persoonsgegevens of this Nationaliteithistorie.  # noqa: E501
        :type: bool
        """

        self._geheimhouding_persoonsgegevens = geheimhouding_persoonsgegevens

    @property
    def datum_einde_geldigheid(self):
        """Gets the datum_einde_geldigheid of this Nationaliteithistorie.  # noqa: E501


        :return: The datum_einde_geldigheid of this Nationaliteithistorie.  # noqa: E501
        :rtype: DatumOnvolledig
        """
        return self._datum_einde_geldigheid

    @datum_einde_geldigheid.setter
    def datum_einde_geldigheid(self, datum_einde_geldigheid):
        """Sets the datum_einde_geldigheid of this Nationaliteithistorie.


        :param datum_einde_geldigheid: The datum_einde_geldigheid of this Nationaliteithistorie.  # noqa: E501
        :type: DatumOnvolledig
        """

        self._datum_einde_geldigheid = datum_einde_geldigheid

    @property
    def reden_beeindigen(self):
        """Gets the reden_beeindigen of this Nationaliteithistorie.  # noqa: E501


        :return: The reden_beeindigen of this Nationaliteithistorie.  # noqa: E501
        :rtype: Waardetabel
        """
        return self._reden_beeindigen

    @reden_beeindigen.setter
    def reden_beeindigen(self, reden_beeindigen):
        """Sets the reden_beeindigen of this Nationaliteithistorie.


        :param reden_beeindigen: The reden_beeindigen of this Nationaliteithistorie.  # noqa: E501
        :type: Waardetabel
        """

        self._reden_beeindigen = reden_beeindigen

    @property
    def indicatie_nationaliteit_beeindigd(self):
        """Gets the indicatie_nationaliteit_beeindigd of this Nationaliteithistorie.  # noqa: E501

        Een aanduiding dat de nationaliteit beeindigd is.  # noqa: E501

        :return: The indicatie_nationaliteit_beeindigd of this Nationaliteithistorie.  # noqa: E501
        :rtype: bool
        """
        return self._indicatie_nationaliteit_beeindigd

    @indicatie_nationaliteit_beeindigd.setter
    def indicatie_nationaliteit_beeindigd(self, indicatie_nationaliteit_beeindigd):
        """Sets the indicatie_nationaliteit_beeindigd of this Nationaliteithistorie.

        Een aanduiding dat de nationaliteit beeindigd is.  # noqa: E501

        :param indicatie_nationaliteit_beeindigd: The indicatie_nationaliteit_beeindigd of this Nationaliteithistorie.  # noqa: E501
        :type: bool
        """

        self._indicatie_nationaliteit_beeindigd = indicatie_nationaliteit_beeindigd

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Nationaliteithistorie):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Nationaliteithistorie):
            return True

        return self.to_dict() != other.to_dict()
