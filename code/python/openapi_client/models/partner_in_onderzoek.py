# coding: utf-8

"""
    Bevragen Ingeschreven Personen

    API voor het bevragen van ingeschreven personen uit de basisregistratie personen (BRP), inclusief de registratie niet-ingezeten (RNI). Met deze API kun je personen zoeken en actuele gegevens over personen, kinderen, partners en ouders raadplegen.  Gegevens die er niet zijn of niet actueel zijn krijg je niet terug. Heeft een persoon bijvoorbeeld geen geldige nationaliteit, en alleen een beÃ«indigd partnerschap, dan krijg je geen gegevens over nationaliteit en partner.  Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/tree/v1.0.0/features) voor nadere toelichting.   # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class PartnerInOnderzoek(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'burgerservicenummer': 'bool',
        'geslachtsaanduiding': 'bool',
        'soort_verbintenis': 'bool',
        'datum_ingang_onderzoek': 'DatumOnvolledig'
    }

    attribute_map = {
        'burgerservicenummer': 'burgerservicenummer',
        'geslachtsaanduiding': 'geslachtsaanduiding',
        'soort_verbintenis': 'soortVerbintenis',
        'datum_ingang_onderzoek': 'datumIngangOnderzoek'
    }

    def __init__(self, burgerservicenummer=None, geslachtsaanduiding=None, soort_verbintenis=None, datum_ingang_onderzoek=None, local_vars_configuration=None):  # noqa: E501
        """PartnerInOnderzoek - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._burgerservicenummer = None
        self._geslachtsaanduiding = None
        self._soort_verbintenis = None
        self._datum_ingang_onderzoek = None
        self.discriminator = None

        if burgerservicenummer is not None:
            self.burgerservicenummer = burgerservicenummer
        if geslachtsaanduiding is not None:
            self.geslachtsaanduiding = geslachtsaanduiding
        if soort_verbintenis is not None:
            self.soort_verbintenis = soort_verbintenis
        if datum_ingang_onderzoek is not None:
            self.datum_ingang_onderzoek = datum_ingang_onderzoek

    @property
    def burgerservicenummer(self):
        """Gets the burgerservicenummer of this PartnerInOnderzoek.  # noqa: E501


        :return: The burgerservicenummer of this PartnerInOnderzoek.  # noqa: E501
        :rtype: bool
        """
        return self._burgerservicenummer

    @burgerservicenummer.setter
    def burgerservicenummer(self, burgerservicenummer):
        """Sets the burgerservicenummer of this PartnerInOnderzoek.


        :param burgerservicenummer: The burgerservicenummer of this PartnerInOnderzoek.  # noqa: E501
        :type: bool
        """

        self._burgerservicenummer = burgerservicenummer

    @property
    def geslachtsaanduiding(self):
        """Gets the geslachtsaanduiding of this PartnerInOnderzoek.  # noqa: E501


        :return: The geslachtsaanduiding of this PartnerInOnderzoek.  # noqa: E501
        :rtype: bool
        """
        return self._geslachtsaanduiding

    @geslachtsaanduiding.setter
    def geslachtsaanduiding(self, geslachtsaanduiding):
        """Sets the geslachtsaanduiding of this PartnerInOnderzoek.


        :param geslachtsaanduiding: The geslachtsaanduiding of this PartnerInOnderzoek.  # noqa: E501
        :type: bool
        """

        self._geslachtsaanduiding = geslachtsaanduiding

    @property
    def soort_verbintenis(self):
        """Gets the soort_verbintenis of this PartnerInOnderzoek.  # noqa: E501


        :return: The soort_verbintenis of this PartnerInOnderzoek.  # noqa: E501
        :rtype: bool
        """
        return self._soort_verbintenis

    @soort_verbintenis.setter
    def soort_verbintenis(self, soort_verbintenis):
        """Sets the soort_verbintenis of this PartnerInOnderzoek.


        :param soort_verbintenis: The soort_verbintenis of this PartnerInOnderzoek.  # noqa: E501
        :type: bool
        """

        self._soort_verbintenis = soort_verbintenis

    @property
    def datum_ingang_onderzoek(self):
        """Gets the datum_ingang_onderzoek of this PartnerInOnderzoek.  # noqa: E501


        :return: The datum_ingang_onderzoek of this PartnerInOnderzoek.  # noqa: E501
        :rtype: DatumOnvolledig
        """
        return self._datum_ingang_onderzoek

    @datum_ingang_onderzoek.setter
    def datum_ingang_onderzoek(self, datum_ingang_onderzoek):
        """Sets the datum_ingang_onderzoek of this PartnerInOnderzoek.


        :param datum_ingang_onderzoek: The datum_ingang_onderzoek of this PartnerInOnderzoek.  # noqa: E501
        :type: DatumOnvolledig
        """

        self._datum_ingang_onderzoek = datum_ingang_onderzoek

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartnerInOnderzoek):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, PartnerInOnderzoek):
            return True

        return self.to_dict() != other.to_dict()
