/* 
 * Bevragingen ingeschreven personen
 *
 * API voor het ontsluiten van gegevens van ingeschreven personen en aanverwante gegevens uit de GBA en RNI. Met deze API worden de actuele gegevens van ingeschreven personen, hun kinderen, partners en ouders ontsloten. <br> Heeft een persoon bijvoorbeeld geen geldige nationaliteit, dan wordt nationaliteit niet geretourneerd. <br> Heeft een persoon een beëindigd partnerschap of huwelijk, dan wordt de partner niet geretourneerd. <br> <br> Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/tree/master/features) voor nadere toelichting. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIngeschrevenpersonenApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen van een collectie ingeschreven personen inclusief het verblijfsadres, ouders, partners, kinderen en reisdocumenten. Het betreft alleen actuele gegevens van de betreffende ingeschreven personen. Ten minste één van de volgende combinaties van parameters moet zijn opgenomen:   1.  Persoon     -  geboorte__datum     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) ) 2.  Persoon     -  verblijfplaats__gemeentevaninschrijving     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) ) 3.  Persoon     -  burgerservicenummer   4.  Postcode     -  verblijfplaats__postcode     -  verblijfplaats__huisnummer   5.  NaamOpenbareRuimte     -  verblijfplaats__naamopenbareruimte (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) )      -  verblijfplaats__gemeentevaninschrijving     -  verblijfplaats__huisnummer   6.  Nummeraanduiding     -  verblijfplaats__identificatiecodenummeraanduiding  De bovenstaande combinaties van parameters mogen gecombineerd worden met de overige beschikbare query-parameters, maar binnen iedere combinatie zijn de hier genoemde velden **verplicht**.   Default levert een zoekvraag alleen personen op die nog in leven zijn. Indien **_inclusiefoverledenpersonen_** de waarde **_true_** heeft worden [overleden personen](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature) opgenomen in het zoekresultaat.   Het maximale aantal zoekresultaten dat geretourneerd wordt is aan de provider om te bepalen. Als het resultaat van de de request dit aantal overtreft worden er geen resultaten geretourneerd en volgt er een foutmelding.    Er vind geen sortering plaats. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <param name="burgerservicenummer">Het burgerservicenummer, bedoeld in artikel 1.1 van de Wet algemene bepalingen burgerservicenummer. Alle nummers waarvoor geldt dat, indien aangeduid als (s0 s1 s2 s3 s4 s5 s6 s7 s8), het resultaat van (9*s0) + (8*s1) + (7*s2) +...+ (2*s7) - (1*s8) deelbaar is door elf. Er moeten dus 9 cijfers aanwezig zijn. (optional)</param>
        /// <param name="geboorteDatum">Datum waarop de INGESCHREVEN NATUURLIJK PERSOON geboren is. Er kan alleen gezocht worden met een volledige geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/parametervalidatie.feature) (optional)</param>
        /// <param name="geboortePlaats">Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="geslachtsaanduiding">Een aanduiding die aangeeft dat de ingeschrevene een man of een vrouw is, of dat het geslacht (nog) onbekend is. (optional)</param>
        /// <param name="inclusiefoverledenpersonen">Indien in het antwoord op de zoekvraag ook overleden personen moeten worden geretourneerd, dan dient de parameter *inclusiefOverledenPersonen* opgenomen te zijn met de waarde _True_. Indien de parameter *inclusiefOverledenPersonen* ontbreekt of de waarde _False_ heeft worden geen overleden personen opgenomen in het zoekresultaat. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature) (optional)</param>
        /// <param name="naamGeslachtsnaam">De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels en adellijke titel/predikaat zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="naamVoornamen">De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="verblijfplaatsGemeentevaninschrijving">Een code die aangeeft in welke gemeente de PL zich bevindt of de gemeente waarnaar de PL is uitgeschreven of de gemeente waar de PL voor de eerste keer is opgenomen. De waarde (0000) is geen geldige inhoud voor de query-parameter. (optional)</param>
        /// <param name="verblijfplaatsHuisletter">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken. (optional)</param>
        /// <param name="verblijfplaatsHuisnummer">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Alle natuurlijke getallen tussen 1 en 99999. (optional)</param>
        /// <param name="verblijfplaatsHuisnummertoevoeging">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. a - z , A - Z , 0 – 9 (optional)</param>
        /// <param name="verblijfplaatsIdentificatiecodenummeraanduiding">De unieke aanduiding van een NUMMERAANDUIDING. Combinatie van de viercijferige &#39;gemeentecode&#39; , de tweecijferige &#39;objecttypecode&#39; en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig &#39;objectvolgnummer&#39;. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding. (optional)</param>
        /// <param name="verblijfplaatsNaamopenbareruimte">Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** Tekens gecodeerd volgens de UTF-8 standaard (optional)</param>
        /// <param name="verblijfplaatsPostcode">De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer (optional)</param>
        /// <param name="naamVoorvoegsel">Dat deel van de geslachtsnaam dat voorkomt in de Voorvoegseltabel en, gescheiden door een spatie, vooraf gaat aan de rest van de geslachtsnaam. **De tabel bevat vorvoegsels met hoofdletters en met kleine letters. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <returns>IngeschrevenPersoonHalCollectie</returns>
        IngeschrevenPersoonHalCollectie IngeschrevenNatuurlijkPersonen (string expand = default(string), string fields = default(string), List<string> burgerservicenummer = default(List<string>), DateTime? geboorteDatum = default(DateTime?), string geboortePlaats = default(string), GeslachtEnum? geslachtsaanduiding = default(GeslachtEnum?), bool? inclusiefoverledenpersonen = default(bool?), string naamGeslachtsnaam = default(string), string naamVoornamen = default(string), string verblijfplaatsGemeentevaninschrijving = default(string), string verblijfplaatsHuisletter = default(string), int? verblijfplaatsHuisnummer = default(int?), string verblijfplaatsHuisnummertoevoeging = default(string), string verblijfplaatsIdentificatiecodenummeraanduiding = default(string), string verblijfplaatsNaamopenbareruimte = default(string), string verblijfplaatsPostcode = default(string), string naamVoorvoegsel = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen van een collectie ingeschreven personen inclusief het verblijfsadres, ouders, partners, kinderen en reisdocumenten. Het betreft alleen actuele gegevens van de betreffende ingeschreven personen. Ten minste één van de volgende combinaties van parameters moet zijn opgenomen:   1.  Persoon     -  geboorte__datum     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) ) 2.  Persoon     -  verblijfplaats__gemeentevaninschrijving     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) ) 3.  Persoon     -  burgerservicenummer   4.  Postcode     -  verblijfplaats__postcode     -  verblijfplaats__huisnummer   5.  NaamOpenbareRuimte     -  verblijfplaats__naamopenbareruimte (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) )      -  verblijfplaats__gemeentevaninschrijving     -  verblijfplaats__huisnummer   6.  Nummeraanduiding     -  verblijfplaats__identificatiecodenummeraanduiding  De bovenstaande combinaties van parameters mogen gecombineerd worden met de overige beschikbare query-parameters, maar binnen iedere combinatie zijn de hier genoemde velden **verplicht**.   Default levert een zoekvraag alleen personen op die nog in leven zijn. Indien **_inclusiefoverledenpersonen_** de waarde **_true_** heeft worden [overleden personen](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature) opgenomen in het zoekresultaat.   Het maximale aantal zoekresultaten dat geretourneerd wordt is aan de provider om te bepalen. Als het resultaat van de de request dit aantal overtreft worden er geen resultaten geretourneerd en volgt er een foutmelding.    Er vind geen sortering plaats. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <param name="burgerservicenummer">Het burgerservicenummer, bedoeld in artikel 1.1 van de Wet algemene bepalingen burgerservicenummer. Alle nummers waarvoor geldt dat, indien aangeduid als (s0 s1 s2 s3 s4 s5 s6 s7 s8), het resultaat van (9*s0) + (8*s1) + (7*s2) +...+ (2*s7) - (1*s8) deelbaar is door elf. Er moeten dus 9 cijfers aanwezig zijn. (optional)</param>
        /// <param name="geboorteDatum">Datum waarop de INGESCHREVEN NATUURLIJK PERSOON geboren is. Er kan alleen gezocht worden met een volledige geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/parametervalidatie.feature) (optional)</param>
        /// <param name="geboortePlaats">Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="geslachtsaanduiding">Een aanduiding die aangeeft dat de ingeschrevene een man of een vrouw is, of dat het geslacht (nog) onbekend is. (optional)</param>
        /// <param name="inclusiefoverledenpersonen">Indien in het antwoord op de zoekvraag ook overleden personen moeten worden geretourneerd, dan dient de parameter *inclusiefOverledenPersonen* opgenomen te zijn met de waarde _True_. Indien de parameter *inclusiefOverledenPersonen* ontbreekt of de waarde _False_ heeft worden geen overleden personen opgenomen in het zoekresultaat. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature) (optional)</param>
        /// <param name="naamGeslachtsnaam">De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels en adellijke titel/predikaat zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="naamVoornamen">De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="verblijfplaatsGemeentevaninschrijving">Een code die aangeeft in welke gemeente de PL zich bevindt of de gemeente waarnaar de PL is uitgeschreven of de gemeente waar de PL voor de eerste keer is opgenomen. De waarde (0000) is geen geldige inhoud voor de query-parameter. (optional)</param>
        /// <param name="verblijfplaatsHuisletter">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken. (optional)</param>
        /// <param name="verblijfplaatsHuisnummer">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Alle natuurlijke getallen tussen 1 en 99999. (optional)</param>
        /// <param name="verblijfplaatsHuisnummertoevoeging">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. a - z , A - Z , 0 – 9 (optional)</param>
        /// <param name="verblijfplaatsIdentificatiecodenummeraanduiding">De unieke aanduiding van een NUMMERAANDUIDING. Combinatie van de viercijferige &#39;gemeentecode&#39; , de tweecijferige &#39;objecttypecode&#39; en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig &#39;objectvolgnummer&#39;. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding. (optional)</param>
        /// <param name="verblijfplaatsNaamopenbareruimte">Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** Tekens gecodeerd volgens de UTF-8 standaard (optional)</param>
        /// <param name="verblijfplaatsPostcode">De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer (optional)</param>
        /// <param name="naamVoorvoegsel">Dat deel van de geslachtsnaam dat voorkomt in de Voorvoegseltabel en, gescheiden door een spatie, vooraf gaat aan de rest van de geslachtsnaam. **De tabel bevat vorvoegsels met hoofdletters en met kleine letters. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <returns>ApiResponse of IngeschrevenPersoonHalCollectie</returns>
        ApiResponse<IngeschrevenPersoonHalCollectie> IngeschrevenNatuurlijkPersonenWithHttpInfo (string expand = default(string), string fields = default(string), List<string> burgerservicenummer = default(List<string>), DateTime? geboorteDatum = default(DateTime?), string geboortePlaats = default(string), GeslachtEnum? geslachtsaanduiding = default(GeslachtEnum?), bool? inclusiefoverledenpersonen = default(bool?), string naamGeslachtsnaam = default(string), string naamVoornamen = default(string), string verblijfplaatsGemeentevaninschrijving = default(string), string verblijfplaatsHuisletter = default(string), int? verblijfplaatsHuisnummer = default(int?), string verblijfplaatsHuisnummertoevoeging = default(string), string verblijfplaatsIdentificatiecodenummeraanduiding = default(string), string verblijfplaatsNaamopenbareruimte = default(string), string verblijfplaatsPostcode = default(string), string naamVoorvoegsel = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de actuele gegevens van een Ingeschreven Persoon, inclusief verblijfplaats, kinderen, partners en ouders. Het betreft alleen actuele gegevens van de betreffende ingeschreven personen.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <returns>IngeschrevenPersoonHal</returns>
        IngeschrevenPersoonHal IngeschrevenNatuurlijkPersoon (string burgerservicenummer, string expand = default(string), string fields = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de actuele gegevens van een Ingeschreven Persoon, inclusief verblijfplaats, kinderen, partners en ouders. Het betreft alleen actuele gegevens van de betreffende ingeschreven personen.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <returns>ApiResponse of IngeschrevenPersoonHal</returns>
        ApiResponse<IngeschrevenPersoonHal> IngeschrevenNatuurlijkPersoonWithHttpInfo (string burgerservicenummer, string expand = default(string), string fields = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de kind-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Er vind geen sortering plaats.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>KindHalCollectie</returns>
        KindHalCollectie IngeschrevenpersonenBurgerservicenummerkinderen (string burgerservicenummer);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de kind-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Er vind geen sortering plaats.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>ApiResponse of KindHalCollectie</returns>
        ApiResponse<KindHalCollectie> IngeschrevenpersonenBurgerservicenummerkinderenWithHttpInfo (string burgerservicenummer);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de kind-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van het kind.</param>
        /// <returns>KindHal</returns>
        KindHal IngeschrevenpersonenBurgerservicenummerkinderenId (string burgerservicenummer, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de kind-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van het kind.</param>
        /// <returns>ApiResponse of KindHal</returns>
        ApiResponse<KindHal> IngeschrevenpersonenBurgerservicenummerkinderenIdWithHttpInfo (string burgerservicenummer, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de ouder-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Er vind geen sortering plaats.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>OuderHalCollectie</returns>
        OuderHalCollectie IngeschrevenpersonenBurgerservicenummerouders (string burgerservicenummer);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de ouder-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Er vind geen sortering plaats.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>ApiResponse of OuderHalCollectie</returns>
        ApiResponse<OuderHalCollectie> IngeschrevenpersonenBurgerservicenummeroudersWithHttpInfo (string burgerservicenummer);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de ouder-gegevens van een van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen..
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van de ouder.</param>
        /// <returns>OuderHal</returns>
        OuderHal IngeschrevenpersonenBurgerservicenummeroudersId (string burgerservicenummer, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de ouder-gegevens van een van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen..
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van de ouder.</param>
        /// <returns>ApiResponse of OuderHal</returns>
        ApiResponse<OuderHal> IngeschrevenpersonenBurgerservicenummeroudersIdWithHttpInfo (string burgerservicenummer, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de actuele partner-gegevens van een van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Een beëindigd huwelijk of geregistreerd partnerschap wordt niet opgenomen in het antwoord. De gevonden huwelijken/partnerschappen worden ongesorteerd teruggegeven.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>PartnerHalCollectie</returns>
        PartnerHalCollectie IngeschrevenpersonenBurgerservicenummerpartners (string burgerservicenummer);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de actuele partner-gegevens van een van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Een beëindigd huwelijk of geregistreerd partnerschap wordt niet opgenomen in het antwoord. De gevonden huwelijken/partnerschappen worden ongesorteerd teruggegeven.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>ApiResponse of PartnerHalCollectie</returns>
        ApiResponse<PartnerHalCollectie> IngeschrevenpersonenBurgerservicenummerpartnersWithHttpInfo (string burgerservicenummer);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de partner-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van de partner.</param>
        /// <returns>PartnerHal</returns>
        PartnerHal IngeschrevenpersonenBurgerservicenummerpartnersId (string burgerservicenummer, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de partner-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van de partner.</param>
        /// <returns>ApiResponse of PartnerHal</returns>
        ApiResponse<PartnerHal> IngeschrevenpersonenBurgerservicenummerpartnersIdWithHttpInfo (string burgerservicenummer, string id);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen van een collectie ingeschreven personen inclusief het verblijfsadres, ouders, partners, kinderen en reisdocumenten. Het betreft alleen actuele gegevens van de betreffende ingeschreven personen. Ten minste één van de volgende combinaties van parameters moet zijn opgenomen:   1.  Persoon     -  geboorte__datum     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) ) 2.  Persoon     -  verblijfplaats__gemeentevaninschrijving     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) ) 3.  Persoon     -  burgerservicenummer   4.  Postcode     -  verblijfplaats__postcode     -  verblijfplaats__huisnummer   5.  NaamOpenbareRuimte     -  verblijfplaats__naamopenbareruimte (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) )      -  verblijfplaats__gemeentevaninschrijving     -  verblijfplaats__huisnummer   6.  Nummeraanduiding     -  verblijfplaats__identificatiecodenummeraanduiding  De bovenstaande combinaties van parameters mogen gecombineerd worden met de overige beschikbare query-parameters, maar binnen iedere combinatie zijn de hier genoemde velden **verplicht**.   Default levert een zoekvraag alleen personen op die nog in leven zijn. Indien **_inclusiefoverledenpersonen_** de waarde **_true_** heeft worden [overleden personen](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature) opgenomen in het zoekresultaat.   Het maximale aantal zoekresultaten dat geretourneerd wordt is aan de provider om te bepalen. Als het resultaat van de de request dit aantal overtreft worden er geen resultaten geretourneerd en volgt er een foutmelding.    Er vind geen sortering plaats. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <param name="burgerservicenummer">Het burgerservicenummer, bedoeld in artikel 1.1 van de Wet algemene bepalingen burgerservicenummer. Alle nummers waarvoor geldt dat, indien aangeduid als (s0 s1 s2 s3 s4 s5 s6 s7 s8), het resultaat van (9*s0) + (8*s1) + (7*s2) +...+ (2*s7) - (1*s8) deelbaar is door elf. Er moeten dus 9 cijfers aanwezig zijn. (optional)</param>
        /// <param name="geboorteDatum">Datum waarop de INGESCHREVEN NATUURLIJK PERSOON geboren is. Er kan alleen gezocht worden met een volledige geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/parametervalidatie.feature) (optional)</param>
        /// <param name="geboortePlaats">Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="geslachtsaanduiding">Een aanduiding die aangeeft dat de ingeschrevene een man of een vrouw is, of dat het geslacht (nog) onbekend is. (optional)</param>
        /// <param name="inclusiefoverledenpersonen">Indien in het antwoord op de zoekvraag ook overleden personen moeten worden geretourneerd, dan dient de parameter *inclusiefOverledenPersonen* opgenomen te zijn met de waarde _True_. Indien de parameter *inclusiefOverledenPersonen* ontbreekt of de waarde _False_ heeft worden geen overleden personen opgenomen in het zoekresultaat. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature) (optional)</param>
        /// <param name="naamGeslachtsnaam">De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels en adellijke titel/predikaat zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="naamVoornamen">De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="verblijfplaatsGemeentevaninschrijving">Een code die aangeeft in welke gemeente de PL zich bevindt of de gemeente waarnaar de PL is uitgeschreven of de gemeente waar de PL voor de eerste keer is opgenomen. De waarde (0000) is geen geldige inhoud voor de query-parameter. (optional)</param>
        /// <param name="verblijfplaatsHuisletter">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken. (optional)</param>
        /// <param name="verblijfplaatsHuisnummer">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Alle natuurlijke getallen tussen 1 en 99999. (optional)</param>
        /// <param name="verblijfplaatsHuisnummertoevoeging">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. a - z , A - Z , 0 – 9 (optional)</param>
        /// <param name="verblijfplaatsIdentificatiecodenummeraanduiding">De unieke aanduiding van een NUMMERAANDUIDING. Combinatie van de viercijferige &#39;gemeentecode&#39; , de tweecijferige &#39;objecttypecode&#39; en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig &#39;objectvolgnummer&#39;. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding. (optional)</param>
        /// <param name="verblijfplaatsNaamopenbareruimte">Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** Tekens gecodeerd volgens de UTF-8 standaard (optional)</param>
        /// <param name="verblijfplaatsPostcode">De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer (optional)</param>
        /// <param name="naamVoorvoegsel">Dat deel van de geslachtsnaam dat voorkomt in de Voorvoegseltabel en, gescheiden door een spatie, vooraf gaat aan de rest van de geslachtsnaam. **De tabel bevat vorvoegsels met hoofdletters en met kleine letters. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <returns>Task of IngeschrevenPersoonHalCollectie</returns>
        System.Threading.Tasks.Task<IngeschrevenPersoonHalCollectie> IngeschrevenNatuurlijkPersonenAsync (string expand = default(string), string fields = default(string), List<string> burgerservicenummer = default(List<string>), DateTime? geboorteDatum = default(DateTime?), string geboortePlaats = default(string), GeslachtEnum? geslachtsaanduiding = default(GeslachtEnum?), bool? inclusiefoverledenpersonen = default(bool?), string naamGeslachtsnaam = default(string), string naamVoornamen = default(string), string verblijfplaatsGemeentevaninschrijving = default(string), string verblijfplaatsHuisletter = default(string), int? verblijfplaatsHuisnummer = default(int?), string verblijfplaatsHuisnummertoevoeging = default(string), string verblijfplaatsIdentificatiecodenummeraanduiding = default(string), string verblijfplaatsNaamopenbareruimte = default(string), string verblijfplaatsPostcode = default(string), string naamVoorvoegsel = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen van een collectie ingeschreven personen inclusief het verblijfsadres, ouders, partners, kinderen en reisdocumenten. Het betreft alleen actuele gegevens van de betreffende ingeschreven personen. Ten minste één van de volgende combinaties van parameters moet zijn opgenomen:   1.  Persoon     -  geboorte__datum     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) ) 2.  Persoon     -  verblijfplaats__gemeentevaninschrijving     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) ) 3.  Persoon     -  burgerservicenummer   4.  Postcode     -  verblijfplaats__postcode     -  verblijfplaats__huisnummer   5.  NaamOpenbareRuimte     -  verblijfplaats__naamopenbareruimte (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) )      -  verblijfplaats__gemeentevaninschrijving     -  verblijfplaats__huisnummer   6.  Nummeraanduiding     -  verblijfplaats__identificatiecodenummeraanduiding  De bovenstaande combinaties van parameters mogen gecombineerd worden met de overige beschikbare query-parameters, maar binnen iedere combinatie zijn de hier genoemde velden **verplicht**.   Default levert een zoekvraag alleen personen op die nog in leven zijn. Indien **_inclusiefoverledenpersonen_** de waarde **_true_** heeft worden [overleden personen](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature) opgenomen in het zoekresultaat.   Het maximale aantal zoekresultaten dat geretourneerd wordt is aan de provider om te bepalen. Als het resultaat van de de request dit aantal overtreft worden er geen resultaten geretourneerd en volgt er een foutmelding.    Er vind geen sortering plaats. 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <param name="burgerservicenummer">Het burgerservicenummer, bedoeld in artikel 1.1 van de Wet algemene bepalingen burgerservicenummer. Alle nummers waarvoor geldt dat, indien aangeduid als (s0 s1 s2 s3 s4 s5 s6 s7 s8), het resultaat van (9*s0) + (8*s1) + (7*s2) +...+ (2*s7) - (1*s8) deelbaar is door elf. Er moeten dus 9 cijfers aanwezig zijn. (optional)</param>
        /// <param name="geboorteDatum">Datum waarop de INGESCHREVEN NATUURLIJK PERSOON geboren is. Er kan alleen gezocht worden met een volledige geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/parametervalidatie.feature) (optional)</param>
        /// <param name="geboortePlaats">Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="geslachtsaanduiding">Een aanduiding die aangeeft dat de ingeschrevene een man of een vrouw is, of dat het geslacht (nog) onbekend is. (optional)</param>
        /// <param name="inclusiefoverledenpersonen">Indien in het antwoord op de zoekvraag ook overleden personen moeten worden geretourneerd, dan dient de parameter *inclusiefOverledenPersonen* opgenomen te zijn met de waarde _True_. Indien de parameter *inclusiefOverledenPersonen* ontbreekt of de waarde _False_ heeft worden geen overleden personen opgenomen in het zoekresultaat. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature) (optional)</param>
        /// <param name="naamGeslachtsnaam">De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels en adellijke titel/predikaat zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="naamVoornamen">De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="verblijfplaatsGemeentevaninschrijving">Een code die aangeeft in welke gemeente de PL zich bevindt of de gemeente waarnaar de PL is uitgeschreven of de gemeente waar de PL voor de eerste keer is opgenomen. De waarde (0000) is geen geldige inhoud voor de query-parameter. (optional)</param>
        /// <param name="verblijfplaatsHuisletter">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken. (optional)</param>
        /// <param name="verblijfplaatsHuisnummer">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Alle natuurlijke getallen tussen 1 en 99999. (optional)</param>
        /// <param name="verblijfplaatsHuisnummertoevoeging">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. a - z , A - Z , 0 – 9 (optional)</param>
        /// <param name="verblijfplaatsIdentificatiecodenummeraanduiding">De unieke aanduiding van een NUMMERAANDUIDING. Combinatie van de viercijferige &#39;gemeentecode&#39; , de tweecijferige &#39;objecttypecode&#39; en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig &#39;objectvolgnummer&#39;. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding. (optional)</param>
        /// <param name="verblijfplaatsNaamopenbareruimte">Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** Tekens gecodeerd volgens de UTF-8 standaard (optional)</param>
        /// <param name="verblijfplaatsPostcode">De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer (optional)</param>
        /// <param name="naamVoorvoegsel">Dat deel van de geslachtsnaam dat voorkomt in de Voorvoegseltabel en, gescheiden door een spatie, vooraf gaat aan de rest van de geslachtsnaam. **De tabel bevat vorvoegsels met hoofdletters en met kleine letters. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <returns>Task of ApiResponse (IngeschrevenPersoonHalCollectie)</returns>
        System.Threading.Tasks.Task<ApiResponse<IngeschrevenPersoonHalCollectie>> IngeschrevenNatuurlijkPersonenAsyncWithHttpInfo (string expand = default(string), string fields = default(string), List<string> burgerservicenummer = default(List<string>), DateTime? geboorteDatum = default(DateTime?), string geboortePlaats = default(string), GeslachtEnum? geslachtsaanduiding = default(GeslachtEnum?), bool? inclusiefoverledenpersonen = default(bool?), string naamGeslachtsnaam = default(string), string naamVoornamen = default(string), string verblijfplaatsGemeentevaninschrijving = default(string), string verblijfplaatsHuisletter = default(string), int? verblijfplaatsHuisnummer = default(int?), string verblijfplaatsHuisnummertoevoeging = default(string), string verblijfplaatsIdentificatiecodenummeraanduiding = default(string), string verblijfplaatsNaamopenbareruimte = default(string), string verblijfplaatsPostcode = default(string), string naamVoorvoegsel = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de actuele gegevens van een Ingeschreven Persoon, inclusief verblijfplaats, kinderen, partners en ouders. Het betreft alleen actuele gegevens van de betreffende ingeschreven personen.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <returns>Task of IngeschrevenPersoonHal</returns>
        System.Threading.Tasks.Task<IngeschrevenPersoonHal> IngeschrevenNatuurlijkPersoonAsync (string burgerservicenummer, string expand = default(string), string fields = default(string));

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de actuele gegevens van een Ingeschreven Persoon, inclusief verblijfplaats, kinderen, partners en ouders. Het betreft alleen actuele gegevens van de betreffende ingeschreven personen.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <returns>Task of ApiResponse (IngeschrevenPersoonHal)</returns>
        System.Threading.Tasks.Task<ApiResponse<IngeschrevenPersoonHal>> IngeschrevenNatuurlijkPersoonAsyncWithHttpInfo (string burgerservicenummer, string expand = default(string), string fields = default(string));
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de kind-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Er vind geen sortering plaats.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>Task of KindHalCollectie</returns>
        System.Threading.Tasks.Task<KindHalCollectie> IngeschrevenpersonenBurgerservicenummerkinderenAsync (string burgerservicenummer);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de kind-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Er vind geen sortering plaats.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>Task of ApiResponse (KindHalCollectie)</returns>
        System.Threading.Tasks.Task<ApiResponse<KindHalCollectie>> IngeschrevenpersonenBurgerservicenummerkinderenAsyncWithHttpInfo (string burgerservicenummer);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de kind-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van het kind.</param>
        /// <returns>Task of KindHal</returns>
        System.Threading.Tasks.Task<KindHal> IngeschrevenpersonenBurgerservicenummerkinderenIdAsync (string burgerservicenummer, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de kind-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van het kind.</param>
        /// <returns>Task of ApiResponse (KindHal)</returns>
        System.Threading.Tasks.Task<ApiResponse<KindHal>> IngeschrevenpersonenBurgerservicenummerkinderenIdAsyncWithHttpInfo (string burgerservicenummer, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de ouder-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Er vind geen sortering plaats.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>Task of OuderHalCollectie</returns>
        System.Threading.Tasks.Task<OuderHalCollectie> IngeschrevenpersonenBurgerservicenummeroudersAsync (string burgerservicenummer);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de ouder-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Er vind geen sortering plaats.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>Task of ApiResponse (OuderHalCollectie)</returns>
        System.Threading.Tasks.Task<ApiResponse<OuderHalCollectie>> IngeschrevenpersonenBurgerservicenummeroudersAsyncWithHttpInfo (string burgerservicenummer);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de ouder-gegevens van een van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen..
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van de ouder.</param>
        /// <returns>Task of OuderHal</returns>
        System.Threading.Tasks.Task<OuderHal> IngeschrevenpersonenBurgerservicenummeroudersIdAsync (string burgerservicenummer, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de ouder-gegevens van een van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen..
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van de ouder.</param>
        /// <returns>Task of ApiResponse (OuderHal)</returns>
        System.Threading.Tasks.Task<ApiResponse<OuderHal>> IngeschrevenpersonenBurgerservicenummeroudersIdAsyncWithHttpInfo (string burgerservicenummer, string id);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de actuele partner-gegevens van een van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Een beëindigd huwelijk of geregistreerd partnerschap wordt niet opgenomen in het antwoord. De gevonden huwelijken/partnerschappen worden ongesorteerd teruggegeven.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>Task of PartnerHalCollectie</returns>
        System.Threading.Tasks.Task<PartnerHalCollectie> IngeschrevenpersonenBurgerservicenummerpartnersAsync (string burgerservicenummer);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de actuele partner-gegevens van een van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Een beëindigd huwelijk of geregistreerd partnerschap wordt niet opgenomen in het antwoord. De gevonden huwelijken/partnerschappen worden ongesorteerd teruggegeven.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>Task of ApiResponse (PartnerHalCollectie)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartnerHalCollectie>> IngeschrevenpersonenBurgerservicenummerpartnersAsyncWithHttpInfo (string burgerservicenummer);
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de partner-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van de partner.</param>
        /// <returns>Task of PartnerHal</returns>
        System.Threading.Tasks.Task<PartnerHal> IngeschrevenpersonenBurgerservicenummerpartnersIdAsync (string burgerservicenummer, string id);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Het ophalen de partner-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van de partner.</param>
        /// <returns>Task of ApiResponse (PartnerHal)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartnerHal>> IngeschrevenpersonenBurgerservicenummerpartnersIdAsyncWithHttpInfo (string burgerservicenummer, string id);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IngeschrevenpersonenApi : IIngeschrevenpersonenApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IngeschrevenpersonenApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IngeschrevenpersonenApi(String basePath)
        {
            this.Configuration = new Org.OpenAPITools.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IngeschrevenpersonenApi"/> class
        /// </summary>
        /// <returns></returns>
        public IngeschrevenpersonenApi()
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.Default;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IngeschrevenpersonenApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IngeschrevenpersonenApi(Org.OpenAPITools.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Org.OpenAPITools.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        ///  Het ophalen van een collectie ingeschreven personen inclusief het verblijfsadres, ouders, partners, kinderen en reisdocumenten. Het betreft alleen actuele gegevens van de betreffende ingeschreven personen. Ten minste één van de volgende combinaties van parameters moet zijn opgenomen:   1.  Persoon     -  geboorte__datum     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) ) 2.  Persoon     -  verblijfplaats__gemeentevaninschrijving     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) ) 3.  Persoon     -  burgerservicenummer   4.  Postcode     -  verblijfplaats__postcode     -  verblijfplaats__huisnummer   5.  NaamOpenbareRuimte     -  verblijfplaats__naamopenbareruimte (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) )      -  verblijfplaats__gemeentevaninschrijving     -  verblijfplaats__huisnummer   6.  Nummeraanduiding     -  verblijfplaats__identificatiecodenummeraanduiding  De bovenstaande combinaties van parameters mogen gecombineerd worden met de overige beschikbare query-parameters, maar binnen iedere combinatie zijn de hier genoemde velden **verplicht**.   Default levert een zoekvraag alleen personen op die nog in leven zijn. Indien **_inclusiefoverledenpersonen_** de waarde **_true_** heeft worden [overleden personen](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature) opgenomen in het zoekresultaat.   Het maximale aantal zoekresultaten dat geretourneerd wordt is aan de provider om te bepalen. Als het resultaat van de de request dit aantal overtreft worden er geen resultaten geretourneerd en volgt er een foutmelding.    Er vind geen sortering plaats. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <param name="burgerservicenummer">Het burgerservicenummer, bedoeld in artikel 1.1 van de Wet algemene bepalingen burgerservicenummer. Alle nummers waarvoor geldt dat, indien aangeduid als (s0 s1 s2 s3 s4 s5 s6 s7 s8), het resultaat van (9*s0) + (8*s1) + (7*s2) +...+ (2*s7) - (1*s8) deelbaar is door elf. Er moeten dus 9 cijfers aanwezig zijn. (optional)</param>
        /// <param name="geboorteDatum">Datum waarop de INGESCHREVEN NATUURLIJK PERSOON geboren is. Er kan alleen gezocht worden met een volledige geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/parametervalidatie.feature) (optional)</param>
        /// <param name="geboortePlaats">Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="geslachtsaanduiding">Een aanduiding die aangeeft dat de ingeschrevene een man of een vrouw is, of dat het geslacht (nog) onbekend is. (optional)</param>
        /// <param name="inclusiefoverledenpersonen">Indien in het antwoord op de zoekvraag ook overleden personen moeten worden geretourneerd, dan dient de parameter *inclusiefOverledenPersonen* opgenomen te zijn met de waarde _True_. Indien de parameter *inclusiefOverledenPersonen* ontbreekt of de waarde _False_ heeft worden geen overleden personen opgenomen in het zoekresultaat. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature) (optional)</param>
        /// <param name="naamGeslachtsnaam">De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels en adellijke titel/predikaat zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="naamVoornamen">De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="verblijfplaatsGemeentevaninschrijving">Een code die aangeeft in welke gemeente de PL zich bevindt of de gemeente waarnaar de PL is uitgeschreven of de gemeente waar de PL voor de eerste keer is opgenomen. De waarde (0000) is geen geldige inhoud voor de query-parameter. (optional)</param>
        /// <param name="verblijfplaatsHuisletter">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken. (optional)</param>
        /// <param name="verblijfplaatsHuisnummer">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Alle natuurlijke getallen tussen 1 en 99999. (optional)</param>
        /// <param name="verblijfplaatsHuisnummertoevoeging">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. a - z , A - Z , 0 – 9 (optional)</param>
        /// <param name="verblijfplaatsIdentificatiecodenummeraanduiding">De unieke aanduiding van een NUMMERAANDUIDING. Combinatie van de viercijferige &#39;gemeentecode&#39; , de tweecijferige &#39;objecttypecode&#39; en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig &#39;objectvolgnummer&#39;. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding. (optional)</param>
        /// <param name="verblijfplaatsNaamopenbareruimte">Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** Tekens gecodeerd volgens de UTF-8 standaard (optional)</param>
        /// <param name="verblijfplaatsPostcode">De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer (optional)</param>
        /// <param name="naamVoorvoegsel">Dat deel van de geslachtsnaam dat voorkomt in de Voorvoegseltabel en, gescheiden door een spatie, vooraf gaat aan de rest van de geslachtsnaam. **De tabel bevat vorvoegsels met hoofdletters en met kleine letters. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <returns>IngeschrevenPersoonHalCollectie</returns>
        public IngeschrevenPersoonHalCollectie IngeschrevenNatuurlijkPersonen (string expand = default(string), string fields = default(string), List<string> burgerservicenummer = default(List<string>), DateTime? geboorteDatum = default(DateTime?), string geboortePlaats = default(string), GeslachtEnum? geslachtsaanduiding = default(GeslachtEnum?), bool? inclusiefoverledenpersonen = default(bool?), string naamGeslachtsnaam = default(string), string naamVoornamen = default(string), string verblijfplaatsGemeentevaninschrijving = default(string), string verblijfplaatsHuisletter = default(string), int? verblijfplaatsHuisnummer = default(int?), string verblijfplaatsHuisnummertoevoeging = default(string), string verblijfplaatsIdentificatiecodenummeraanduiding = default(string), string verblijfplaatsNaamopenbareruimte = default(string), string verblijfplaatsPostcode = default(string), string naamVoorvoegsel = default(string))
        {
             ApiResponse<IngeschrevenPersoonHalCollectie> localVarResponse = IngeschrevenNatuurlijkPersonenWithHttpInfo(expand, fields, burgerservicenummer, geboorteDatum, geboortePlaats, geslachtsaanduiding, inclusiefoverledenpersonen, naamGeslachtsnaam, naamVoornamen, verblijfplaatsGemeentevaninschrijving, verblijfplaatsHuisletter, verblijfplaatsHuisnummer, verblijfplaatsHuisnummertoevoeging, verblijfplaatsIdentificatiecodenummeraanduiding, verblijfplaatsNaamopenbareruimte, verblijfplaatsPostcode, naamVoorvoegsel);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Het ophalen van een collectie ingeschreven personen inclusief het verblijfsadres, ouders, partners, kinderen en reisdocumenten. Het betreft alleen actuele gegevens van de betreffende ingeschreven personen. Ten minste één van de volgende combinaties van parameters moet zijn opgenomen:   1.  Persoon     -  geboorte__datum     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) ) 2.  Persoon     -  verblijfplaats__gemeentevaninschrijving     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) ) 3.  Persoon     -  burgerservicenummer   4.  Postcode     -  verblijfplaats__postcode     -  verblijfplaats__huisnummer   5.  NaamOpenbareRuimte     -  verblijfplaats__naamopenbareruimte (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) )      -  verblijfplaats__gemeentevaninschrijving     -  verblijfplaats__huisnummer   6.  Nummeraanduiding     -  verblijfplaats__identificatiecodenummeraanduiding  De bovenstaande combinaties van parameters mogen gecombineerd worden met de overige beschikbare query-parameters, maar binnen iedere combinatie zijn de hier genoemde velden **verplicht**.   Default levert een zoekvraag alleen personen op die nog in leven zijn. Indien **_inclusiefoverledenpersonen_** de waarde **_true_** heeft worden [overleden personen](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature) opgenomen in het zoekresultaat.   Het maximale aantal zoekresultaten dat geretourneerd wordt is aan de provider om te bepalen. Als het resultaat van de de request dit aantal overtreft worden er geen resultaten geretourneerd en volgt er een foutmelding.    Er vind geen sortering plaats. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <param name="burgerservicenummer">Het burgerservicenummer, bedoeld in artikel 1.1 van de Wet algemene bepalingen burgerservicenummer. Alle nummers waarvoor geldt dat, indien aangeduid als (s0 s1 s2 s3 s4 s5 s6 s7 s8), het resultaat van (9*s0) + (8*s1) + (7*s2) +...+ (2*s7) - (1*s8) deelbaar is door elf. Er moeten dus 9 cijfers aanwezig zijn. (optional)</param>
        /// <param name="geboorteDatum">Datum waarop de INGESCHREVEN NATUURLIJK PERSOON geboren is. Er kan alleen gezocht worden met een volledige geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/parametervalidatie.feature) (optional)</param>
        /// <param name="geboortePlaats">Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="geslachtsaanduiding">Een aanduiding die aangeeft dat de ingeschrevene een man of een vrouw is, of dat het geslacht (nog) onbekend is. (optional)</param>
        /// <param name="inclusiefoverledenpersonen">Indien in het antwoord op de zoekvraag ook overleden personen moeten worden geretourneerd, dan dient de parameter *inclusiefOverledenPersonen* opgenomen te zijn met de waarde _True_. Indien de parameter *inclusiefOverledenPersonen* ontbreekt of de waarde _False_ heeft worden geen overleden personen opgenomen in het zoekresultaat. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature) (optional)</param>
        /// <param name="naamGeslachtsnaam">De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels en adellijke titel/predikaat zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="naamVoornamen">De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="verblijfplaatsGemeentevaninschrijving">Een code die aangeeft in welke gemeente de PL zich bevindt of de gemeente waarnaar de PL is uitgeschreven of de gemeente waar de PL voor de eerste keer is opgenomen. De waarde (0000) is geen geldige inhoud voor de query-parameter. (optional)</param>
        /// <param name="verblijfplaatsHuisletter">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken. (optional)</param>
        /// <param name="verblijfplaatsHuisnummer">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Alle natuurlijke getallen tussen 1 en 99999. (optional)</param>
        /// <param name="verblijfplaatsHuisnummertoevoeging">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. a - z , A - Z , 0 – 9 (optional)</param>
        /// <param name="verblijfplaatsIdentificatiecodenummeraanduiding">De unieke aanduiding van een NUMMERAANDUIDING. Combinatie van de viercijferige &#39;gemeentecode&#39; , de tweecijferige &#39;objecttypecode&#39; en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig &#39;objectvolgnummer&#39;. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding. (optional)</param>
        /// <param name="verblijfplaatsNaamopenbareruimte">Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** Tekens gecodeerd volgens de UTF-8 standaard (optional)</param>
        /// <param name="verblijfplaatsPostcode">De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer (optional)</param>
        /// <param name="naamVoorvoegsel">Dat deel van de geslachtsnaam dat voorkomt in de Voorvoegseltabel en, gescheiden door een spatie, vooraf gaat aan de rest van de geslachtsnaam. **De tabel bevat vorvoegsels met hoofdletters en met kleine letters. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <returns>ApiResponse of IngeschrevenPersoonHalCollectie</returns>
        public ApiResponse<IngeschrevenPersoonHalCollectie> IngeschrevenNatuurlijkPersonenWithHttpInfo (string expand = default(string), string fields = default(string), List<string> burgerservicenummer = default(List<string>), DateTime? geboorteDatum = default(DateTime?), string geboortePlaats = default(string), GeslachtEnum? geslachtsaanduiding = default(GeslachtEnum?), bool? inclusiefoverledenpersonen = default(bool?), string naamGeslachtsnaam = default(string), string naamVoornamen = default(string), string verblijfplaatsGemeentevaninschrijving = default(string), string verblijfplaatsHuisletter = default(string), int? verblijfplaatsHuisnummer = default(int?), string verblijfplaatsHuisnummertoevoeging = default(string), string verblijfplaatsIdentificatiecodenummeraanduiding = default(string), string verblijfplaatsNaamopenbareruimte = default(string), string verblijfplaatsPostcode = default(string), string naamVoorvoegsel = default(string))
        {

            var localVarPath = "/ingeschrevenpersonen";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (burgerservicenummer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "burgerservicenummer", burgerservicenummer)); // query parameter
            if (geboorteDatum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "geboorte__datum", geboorteDatum)); // query parameter
            if (geboortePlaats != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "geboorte__plaats", geboortePlaats)); // query parameter
            if (geslachtsaanduiding != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "geslachtsaanduiding", geslachtsaanduiding)); // query parameter
            if (inclusiefoverledenpersonen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inclusiefoverledenpersonen", inclusiefoverledenpersonen)); // query parameter
            if (naamGeslachtsnaam != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "naam__geslachtsnaam", naamGeslachtsnaam)); // query parameter
            if (naamVoornamen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "naam__voornamen", naamVoornamen)); // query parameter
            if (verblijfplaatsGemeentevaninschrijving != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verblijfplaats__gemeentevaninschrijving", verblijfplaatsGemeentevaninschrijving)); // query parameter
            if (verblijfplaatsHuisletter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verblijfplaats__huisletter", verblijfplaatsHuisletter)); // query parameter
            if (verblijfplaatsHuisnummer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verblijfplaats__huisnummer", verblijfplaatsHuisnummer)); // query parameter
            if (verblijfplaatsHuisnummertoevoeging != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verblijfplaats__huisnummertoevoeging", verblijfplaatsHuisnummertoevoeging)); // query parameter
            if (verblijfplaatsIdentificatiecodenummeraanduiding != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verblijfplaats__identificatiecodenummeraanduiding", verblijfplaatsIdentificatiecodenummeraanduiding)); // query parameter
            if (verblijfplaatsNaamopenbareruimte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verblijfplaats__naamopenbareruimte", verblijfplaatsNaamopenbareruimte)); // query parameter
            if (verblijfplaatsPostcode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verblijfplaats__postcode", verblijfplaatsPostcode)); // query parameter
            if (naamVoorvoegsel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "naam__voorvoegsel", naamVoorvoegsel)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IngeschrevenNatuurlijkPersonen", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IngeschrevenPersoonHalCollectie>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IngeschrevenPersoonHalCollectie) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IngeschrevenPersoonHalCollectie)));
        }

        /// <summary>
        ///  Het ophalen van een collectie ingeschreven personen inclusief het verblijfsadres, ouders, partners, kinderen en reisdocumenten. Het betreft alleen actuele gegevens van de betreffende ingeschreven personen. Ten minste één van de volgende combinaties van parameters moet zijn opgenomen:   1.  Persoon     -  geboorte__datum     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) ) 2.  Persoon     -  verblijfplaats__gemeentevaninschrijving     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) ) 3.  Persoon     -  burgerservicenummer   4.  Postcode     -  verblijfplaats__postcode     -  verblijfplaats__huisnummer   5.  NaamOpenbareRuimte     -  verblijfplaats__naamopenbareruimte (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) )      -  verblijfplaats__gemeentevaninschrijving     -  verblijfplaats__huisnummer   6.  Nummeraanduiding     -  verblijfplaats__identificatiecodenummeraanduiding  De bovenstaande combinaties van parameters mogen gecombineerd worden met de overige beschikbare query-parameters, maar binnen iedere combinatie zijn de hier genoemde velden **verplicht**.   Default levert een zoekvraag alleen personen op die nog in leven zijn. Indien **_inclusiefoverledenpersonen_** de waarde **_true_** heeft worden [overleden personen](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature) opgenomen in het zoekresultaat.   Het maximale aantal zoekresultaten dat geretourneerd wordt is aan de provider om te bepalen. Als het resultaat van de de request dit aantal overtreft worden er geen resultaten geretourneerd en volgt er een foutmelding.    Er vind geen sortering plaats. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <param name="burgerservicenummer">Het burgerservicenummer, bedoeld in artikel 1.1 van de Wet algemene bepalingen burgerservicenummer. Alle nummers waarvoor geldt dat, indien aangeduid als (s0 s1 s2 s3 s4 s5 s6 s7 s8), het resultaat van (9*s0) + (8*s1) + (7*s2) +...+ (2*s7) - (1*s8) deelbaar is door elf. Er moeten dus 9 cijfers aanwezig zijn. (optional)</param>
        /// <param name="geboorteDatum">Datum waarop de INGESCHREVEN NATUURLIJK PERSOON geboren is. Er kan alleen gezocht worden met een volledige geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/parametervalidatie.feature) (optional)</param>
        /// <param name="geboortePlaats">Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="geslachtsaanduiding">Een aanduiding die aangeeft dat de ingeschrevene een man of een vrouw is, of dat het geslacht (nog) onbekend is. (optional)</param>
        /// <param name="inclusiefoverledenpersonen">Indien in het antwoord op de zoekvraag ook overleden personen moeten worden geretourneerd, dan dient de parameter *inclusiefOverledenPersonen* opgenomen te zijn met de waarde _True_. Indien de parameter *inclusiefOverledenPersonen* ontbreekt of de waarde _False_ heeft worden geen overleden personen opgenomen in het zoekresultaat. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature) (optional)</param>
        /// <param name="naamGeslachtsnaam">De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels en adellijke titel/predikaat zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="naamVoornamen">De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="verblijfplaatsGemeentevaninschrijving">Een code die aangeeft in welke gemeente de PL zich bevindt of de gemeente waarnaar de PL is uitgeschreven of de gemeente waar de PL voor de eerste keer is opgenomen. De waarde (0000) is geen geldige inhoud voor de query-parameter. (optional)</param>
        /// <param name="verblijfplaatsHuisletter">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken. (optional)</param>
        /// <param name="verblijfplaatsHuisnummer">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Alle natuurlijke getallen tussen 1 en 99999. (optional)</param>
        /// <param name="verblijfplaatsHuisnummertoevoeging">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. a - z , A - Z , 0 – 9 (optional)</param>
        /// <param name="verblijfplaatsIdentificatiecodenummeraanduiding">De unieke aanduiding van een NUMMERAANDUIDING. Combinatie van de viercijferige &#39;gemeentecode&#39; , de tweecijferige &#39;objecttypecode&#39; en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig &#39;objectvolgnummer&#39;. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding. (optional)</param>
        /// <param name="verblijfplaatsNaamopenbareruimte">Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** Tekens gecodeerd volgens de UTF-8 standaard (optional)</param>
        /// <param name="verblijfplaatsPostcode">De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer (optional)</param>
        /// <param name="naamVoorvoegsel">Dat deel van de geslachtsnaam dat voorkomt in de Voorvoegseltabel en, gescheiden door een spatie, vooraf gaat aan de rest van de geslachtsnaam. **De tabel bevat vorvoegsels met hoofdletters en met kleine letters. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <returns>Task of IngeschrevenPersoonHalCollectie</returns>
        public async System.Threading.Tasks.Task<IngeschrevenPersoonHalCollectie> IngeschrevenNatuurlijkPersonenAsync (string expand = default(string), string fields = default(string), List<string> burgerservicenummer = default(List<string>), DateTime? geboorteDatum = default(DateTime?), string geboortePlaats = default(string), GeslachtEnum? geslachtsaanduiding = default(GeslachtEnum?), bool? inclusiefoverledenpersonen = default(bool?), string naamGeslachtsnaam = default(string), string naamVoornamen = default(string), string verblijfplaatsGemeentevaninschrijving = default(string), string verblijfplaatsHuisletter = default(string), int? verblijfplaatsHuisnummer = default(int?), string verblijfplaatsHuisnummertoevoeging = default(string), string verblijfplaatsIdentificatiecodenummeraanduiding = default(string), string verblijfplaatsNaamopenbareruimte = default(string), string verblijfplaatsPostcode = default(string), string naamVoorvoegsel = default(string))
        {
             ApiResponse<IngeschrevenPersoonHalCollectie> localVarResponse = await IngeschrevenNatuurlijkPersonenAsyncWithHttpInfo(expand, fields, burgerservicenummer, geboorteDatum, geboortePlaats, geslachtsaanduiding, inclusiefoverledenpersonen, naamGeslachtsnaam, naamVoornamen, verblijfplaatsGemeentevaninschrijving, verblijfplaatsHuisletter, verblijfplaatsHuisnummer, verblijfplaatsHuisnummertoevoeging, verblijfplaatsIdentificatiecodenummeraanduiding, verblijfplaatsNaamopenbareruimte, verblijfplaatsPostcode, naamVoorvoegsel);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Het ophalen van een collectie ingeschreven personen inclusief het verblijfsadres, ouders, partners, kinderen en reisdocumenten. Het betreft alleen actuele gegevens van de betreffende ingeschreven personen. Ten minste één van de volgende combinaties van parameters moet zijn opgenomen:   1.  Persoon     -  geboorte__datum     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) ) 2.  Persoon     -  verblijfplaats__gemeentevaninschrijving     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) ) 3.  Persoon     -  burgerservicenummer   4.  Postcode     -  verblijfplaats__postcode     -  verblijfplaats__huisnummer   5.  NaamOpenbareRuimte     -  verblijfplaats__naamopenbareruimte (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) )      -  verblijfplaats__gemeentevaninschrijving     -  verblijfplaats__huisnummer   6.  Nummeraanduiding     -  verblijfplaats__identificatiecodenummeraanduiding  De bovenstaande combinaties van parameters mogen gecombineerd worden met de overige beschikbare query-parameters, maar binnen iedere combinatie zijn de hier genoemde velden **verplicht**.   Default levert een zoekvraag alleen personen op die nog in leven zijn. Indien **_inclusiefoverledenpersonen_** de waarde **_true_** heeft worden [overleden personen](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature) opgenomen in het zoekresultaat.   Het maximale aantal zoekresultaten dat geretourneerd wordt is aan de provider om te bepalen. Als het resultaat van de de request dit aantal overtreft worden er geen resultaten geretourneerd en volgt er een foutmelding.    Er vind geen sortering plaats. 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <param name="burgerservicenummer">Het burgerservicenummer, bedoeld in artikel 1.1 van de Wet algemene bepalingen burgerservicenummer. Alle nummers waarvoor geldt dat, indien aangeduid als (s0 s1 s2 s3 s4 s5 s6 s7 s8), het resultaat van (9*s0) + (8*s1) + (7*s2) +...+ (2*s7) - (1*s8) deelbaar is door elf. Er moeten dus 9 cijfers aanwezig zijn. (optional)</param>
        /// <param name="geboorteDatum">Datum waarop de INGESCHREVEN NATUURLIJK PERSOON geboren is. Er kan alleen gezocht worden met een volledige geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/parametervalidatie.feature) (optional)</param>
        /// <param name="geboortePlaats">Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="geslachtsaanduiding">Een aanduiding die aangeeft dat de ingeschrevene een man of een vrouw is, of dat het geslacht (nog) onbekend is. (optional)</param>
        /// <param name="inclusiefoverledenpersonen">Indien in het antwoord op de zoekvraag ook overleden personen moeten worden geretourneerd, dan dient de parameter *inclusiefOverledenPersonen* opgenomen te zijn met de waarde _True_. Indien de parameter *inclusiefOverledenPersonen* ontbreekt of de waarde _False_ heeft worden geen overleden personen opgenomen in het zoekresultaat. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/overleden_personen.feature) (optional)</param>
        /// <param name="naamGeslachtsnaam">De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels en adellijke titel/predikaat zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="naamVoornamen">De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <param name="verblijfplaatsGemeentevaninschrijving">Een code die aangeeft in welke gemeente de PL zich bevindt of de gemeente waarnaar de PL is uitgeschreven of de gemeente waar de PL voor de eerste keer is opgenomen. De waarde (0000) is geen geldige inhoud voor de query-parameter. (optional)</param>
        /// <param name="verblijfplaatsHuisletter">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken. (optional)</param>
        /// <param name="verblijfplaatsHuisnummer">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Alle natuurlijke getallen tussen 1 en 99999. (optional)</param>
        /// <param name="verblijfplaatsHuisnummertoevoeging">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. a - z , A - Z , 0 – 9 (optional)</param>
        /// <param name="verblijfplaatsIdentificatiecodenummeraanduiding">De unieke aanduiding van een NUMMERAANDUIDING. Combinatie van de viercijferige &#39;gemeentecode&#39; , de tweecijferige &#39;objecttypecode&#39; en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig &#39;objectvolgnummer&#39;. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding. (optional)</param>
        /// <param name="verblijfplaatsNaamopenbareruimte">Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** Tekens gecodeerd volgens de UTF-8 standaard (optional)</param>
        /// <param name="verblijfplaatsPostcode">De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer (optional)</param>
        /// <param name="naamVoorvoegsel">Dat deel van de geslachtsnaam dat voorkomt in de Voorvoegseltabel en, gescheiden door een spatie, vooraf gaat aan de rest van de geslachtsnaam. **De tabel bevat vorvoegsels met hoofdletters en met kleine letters. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/blob/master/features/case_insensitive.feature).** (optional)</param>
        /// <returns>Task of ApiResponse (IngeschrevenPersoonHalCollectie)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IngeschrevenPersoonHalCollectie>> IngeschrevenNatuurlijkPersonenAsyncWithHttpInfo (string expand = default(string), string fields = default(string), List<string> burgerservicenummer = default(List<string>), DateTime? geboorteDatum = default(DateTime?), string geboortePlaats = default(string), GeslachtEnum? geslachtsaanduiding = default(GeslachtEnum?), bool? inclusiefoverledenpersonen = default(bool?), string naamGeslachtsnaam = default(string), string naamVoornamen = default(string), string verblijfplaatsGemeentevaninschrijving = default(string), string verblijfplaatsHuisletter = default(string), int? verblijfplaatsHuisnummer = default(int?), string verblijfplaatsHuisnummertoevoeging = default(string), string verblijfplaatsIdentificatiecodenummeraanduiding = default(string), string verblijfplaatsNaamopenbareruimte = default(string), string verblijfplaatsPostcode = default(string), string naamVoorvoegsel = default(string))
        {

            var localVarPath = "/ingeschrevenpersonen";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter
            if (burgerservicenummer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("csv", "burgerservicenummer", burgerservicenummer)); // query parameter
            if (geboorteDatum != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "geboorte__datum", geboorteDatum)); // query parameter
            if (geboortePlaats != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "geboorte__plaats", geboortePlaats)); // query parameter
            if (geslachtsaanduiding != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "geslachtsaanduiding", geslachtsaanduiding)); // query parameter
            if (inclusiefoverledenpersonen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "inclusiefoverledenpersonen", inclusiefoverledenpersonen)); // query parameter
            if (naamGeslachtsnaam != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "naam__geslachtsnaam", naamGeslachtsnaam)); // query parameter
            if (naamVoornamen != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "naam__voornamen", naamVoornamen)); // query parameter
            if (verblijfplaatsGemeentevaninschrijving != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verblijfplaats__gemeentevaninschrijving", verblijfplaatsGemeentevaninschrijving)); // query parameter
            if (verblijfplaatsHuisletter != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verblijfplaats__huisletter", verblijfplaatsHuisletter)); // query parameter
            if (verblijfplaatsHuisnummer != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verblijfplaats__huisnummer", verblijfplaatsHuisnummer)); // query parameter
            if (verblijfplaatsHuisnummertoevoeging != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verblijfplaats__huisnummertoevoeging", verblijfplaatsHuisnummertoevoeging)); // query parameter
            if (verblijfplaatsIdentificatiecodenummeraanduiding != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verblijfplaats__identificatiecodenummeraanduiding", verblijfplaatsIdentificatiecodenummeraanduiding)); // query parameter
            if (verblijfplaatsNaamopenbareruimte != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verblijfplaats__naamopenbareruimte", verblijfplaatsNaamopenbareruimte)); // query parameter
            if (verblijfplaatsPostcode != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "verblijfplaats__postcode", verblijfplaatsPostcode)); // query parameter
            if (naamVoorvoegsel != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "naam__voorvoegsel", naamVoorvoegsel)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IngeschrevenNatuurlijkPersonen", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IngeschrevenPersoonHalCollectie>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IngeschrevenPersoonHalCollectie) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IngeschrevenPersoonHalCollectie)));
        }

        /// <summary>
        ///  Het ophalen de actuele gegevens van een Ingeschreven Persoon, inclusief verblijfplaats, kinderen, partners en ouders. Het betreft alleen actuele gegevens van de betreffende ingeschreven personen.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <returns>IngeschrevenPersoonHal</returns>
        public IngeschrevenPersoonHal IngeschrevenNatuurlijkPersoon (string burgerservicenummer, string expand = default(string), string fields = default(string))
        {
             ApiResponse<IngeschrevenPersoonHal> localVarResponse = IngeschrevenNatuurlijkPersoonWithHttpInfo(burgerservicenummer, expand, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Het ophalen de actuele gegevens van een Ingeschreven Persoon, inclusief verblijfplaats, kinderen, partners en ouders. Het betreft alleen actuele gegevens van de betreffende ingeschreven personen.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <returns>ApiResponse of IngeschrevenPersoonHal</returns>
        public ApiResponse<IngeschrevenPersoonHal> IngeschrevenNatuurlijkPersoonWithHttpInfo (string burgerservicenummer, string expand = default(string), string fields = default(string))
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenpersonenApi->IngeschrevenNatuurlijkPersoon");

            var localVarPath = "/ingeschrevenpersonen/{burgerservicenummer}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (burgerservicenummer != null) localVarPathParams.Add("burgerservicenummer", this.Configuration.ApiClient.ParameterToString(burgerservicenummer)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IngeschrevenNatuurlijkPersoon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IngeschrevenPersoonHal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IngeschrevenPersoonHal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IngeschrevenPersoonHal)));
        }

        /// <summary>
        ///  Het ophalen de actuele gegevens van een Ingeschreven Persoon, inclusief verblijfplaats, kinderen, partners en ouders. Het betreft alleen actuele gegevens van de betreffende ingeschreven personen.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <returns>Task of IngeschrevenPersoonHal</returns>
        public async System.Threading.Tasks.Task<IngeschrevenPersoonHal> IngeschrevenNatuurlijkPersoonAsync (string burgerservicenummer, string expand = default(string), string fields = default(string))
        {
             ApiResponse<IngeschrevenPersoonHal> localVarResponse = await IngeschrevenNatuurlijkPersoonAsyncWithHttpInfo(burgerservicenummer, expand, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Het ophalen de actuele gegevens van een Ingeschreven Persoon, inclusief verblijfplaats, kinderen, partners en ouders. Het betreft alleen actuele gegevens van de betreffende ingeschreven personen.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <returns>Task of ApiResponse (IngeschrevenPersoonHal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<IngeschrevenPersoonHal>> IngeschrevenNatuurlijkPersoonAsyncWithHttpInfo (string burgerservicenummer, string expand = default(string), string fields = default(string))
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenpersonenApi->IngeschrevenNatuurlijkPersoon");

            var localVarPath = "/ingeschrevenpersonen/{burgerservicenummer}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (burgerservicenummer != null) localVarPathParams.Add("burgerservicenummer", this.Configuration.ApiClient.ParameterToString(burgerservicenummer)); // path parameter
            if (expand != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "expand", expand)); // query parameter
            if (fields != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "fields", fields)); // query parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IngeschrevenNatuurlijkPersoon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<IngeschrevenPersoonHal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (IngeschrevenPersoonHal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(IngeschrevenPersoonHal)));
        }

        /// <summary>
        ///  Het ophalen de kind-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Er vind geen sortering plaats.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>KindHalCollectie</returns>
        public KindHalCollectie IngeschrevenpersonenBurgerservicenummerkinderen (string burgerservicenummer)
        {
             ApiResponse<KindHalCollectie> localVarResponse = IngeschrevenpersonenBurgerservicenummerkinderenWithHttpInfo(burgerservicenummer);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Het ophalen de kind-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Er vind geen sortering plaats.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>ApiResponse of KindHalCollectie</returns>
        public ApiResponse<KindHalCollectie> IngeschrevenpersonenBurgerservicenummerkinderenWithHttpInfo (string burgerservicenummer)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenpersonenApi->IngeschrevenpersonenBurgerservicenummerkinderen");

            var localVarPath = "/ingeschrevenpersonen/{burgerservicenummer}/kinderen";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (burgerservicenummer != null) localVarPathParams.Add("burgerservicenummer", this.Configuration.ApiClient.ParameterToString(burgerservicenummer)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IngeschrevenpersonenBurgerservicenummerkinderen", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KindHalCollectie>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (KindHalCollectie) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KindHalCollectie)));
        }

        /// <summary>
        ///  Het ophalen de kind-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Er vind geen sortering plaats.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>Task of KindHalCollectie</returns>
        public async System.Threading.Tasks.Task<KindHalCollectie> IngeschrevenpersonenBurgerservicenummerkinderenAsync (string burgerservicenummer)
        {
             ApiResponse<KindHalCollectie> localVarResponse = await IngeschrevenpersonenBurgerservicenummerkinderenAsyncWithHttpInfo(burgerservicenummer);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Het ophalen de kind-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Er vind geen sortering plaats.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>Task of ApiResponse (KindHalCollectie)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KindHalCollectie>> IngeschrevenpersonenBurgerservicenummerkinderenAsyncWithHttpInfo (string burgerservicenummer)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenpersonenApi->IngeschrevenpersonenBurgerservicenummerkinderen");

            var localVarPath = "/ingeschrevenpersonen/{burgerservicenummer}/kinderen";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (burgerservicenummer != null) localVarPathParams.Add("burgerservicenummer", this.Configuration.ApiClient.ParameterToString(burgerservicenummer)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IngeschrevenpersonenBurgerservicenummerkinderen", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KindHalCollectie>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (KindHalCollectie) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KindHalCollectie)));
        }

        /// <summary>
        ///  Het ophalen de kind-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van het kind.</param>
        /// <returns>KindHal</returns>
        public KindHal IngeschrevenpersonenBurgerservicenummerkinderenId (string burgerservicenummer, string id)
        {
             ApiResponse<KindHal> localVarResponse = IngeschrevenpersonenBurgerservicenummerkinderenIdWithHttpInfo(burgerservicenummer, id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Het ophalen de kind-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van het kind.</param>
        /// <returns>ApiResponse of KindHal</returns>
        public ApiResponse<KindHal> IngeschrevenpersonenBurgerservicenummerkinderenIdWithHttpInfo (string burgerservicenummer, string id)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenpersonenApi->IngeschrevenpersonenBurgerservicenummerkinderenId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IngeschrevenpersonenApi->IngeschrevenpersonenBurgerservicenummerkinderenId");

            var localVarPath = "/ingeschrevenpersonen/{burgerservicenummer}/kinderen/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (burgerservicenummer != null) localVarPathParams.Add("burgerservicenummer", this.Configuration.ApiClient.ParameterToString(burgerservicenummer)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IngeschrevenpersonenBurgerservicenummerkinderenId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KindHal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (KindHal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KindHal)));
        }

        /// <summary>
        ///  Het ophalen de kind-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van het kind.</param>
        /// <returns>Task of KindHal</returns>
        public async System.Threading.Tasks.Task<KindHal> IngeschrevenpersonenBurgerservicenummerkinderenIdAsync (string burgerservicenummer, string id)
        {
             ApiResponse<KindHal> localVarResponse = await IngeschrevenpersonenBurgerservicenummerkinderenIdAsyncWithHttpInfo(burgerservicenummer, id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Het ophalen de kind-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van het kind.</param>
        /// <returns>Task of ApiResponse (KindHal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<KindHal>> IngeschrevenpersonenBurgerservicenummerkinderenIdAsyncWithHttpInfo (string burgerservicenummer, string id)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenpersonenApi->IngeschrevenpersonenBurgerservicenummerkinderenId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IngeschrevenpersonenApi->IngeschrevenpersonenBurgerservicenummerkinderenId");

            var localVarPath = "/ingeschrevenpersonen/{burgerservicenummer}/kinderen/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (burgerservicenummer != null) localVarPathParams.Add("burgerservicenummer", this.Configuration.ApiClient.ParameterToString(burgerservicenummer)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IngeschrevenpersonenBurgerservicenummerkinderenId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<KindHal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (KindHal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(KindHal)));
        }

        /// <summary>
        ///  Het ophalen de ouder-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Er vind geen sortering plaats.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>OuderHalCollectie</returns>
        public OuderHalCollectie IngeschrevenpersonenBurgerservicenummerouders (string burgerservicenummer)
        {
             ApiResponse<OuderHalCollectie> localVarResponse = IngeschrevenpersonenBurgerservicenummeroudersWithHttpInfo(burgerservicenummer);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Het ophalen de ouder-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Er vind geen sortering plaats.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>ApiResponse of OuderHalCollectie</returns>
        public ApiResponse<OuderHalCollectie> IngeschrevenpersonenBurgerservicenummeroudersWithHttpInfo (string burgerservicenummer)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenpersonenApi->IngeschrevenpersonenBurgerservicenummerouders");

            var localVarPath = "/ingeschrevenpersonen/{burgerservicenummer}/ouders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (burgerservicenummer != null) localVarPathParams.Add("burgerservicenummer", this.Configuration.ApiClient.ParameterToString(burgerservicenummer)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IngeschrevenpersonenBurgerservicenummerouders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OuderHalCollectie>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OuderHalCollectie) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OuderHalCollectie)));
        }

        /// <summary>
        ///  Het ophalen de ouder-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Er vind geen sortering plaats.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>Task of OuderHalCollectie</returns>
        public async System.Threading.Tasks.Task<OuderHalCollectie> IngeschrevenpersonenBurgerservicenummeroudersAsync (string burgerservicenummer)
        {
             ApiResponse<OuderHalCollectie> localVarResponse = await IngeschrevenpersonenBurgerservicenummeroudersAsyncWithHttpInfo(burgerservicenummer);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Het ophalen de ouder-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Er vind geen sortering plaats.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>Task of ApiResponse (OuderHalCollectie)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OuderHalCollectie>> IngeschrevenpersonenBurgerservicenummeroudersAsyncWithHttpInfo (string burgerservicenummer)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenpersonenApi->IngeschrevenpersonenBurgerservicenummerouders");

            var localVarPath = "/ingeschrevenpersonen/{burgerservicenummer}/ouders";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (burgerservicenummer != null) localVarPathParams.Add("burgerservicenummer", this.Configuration.ApiClient.ParameterToString(burgerservicenummer)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IngeschrevenpersonenBurgerservicenummerouders", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OuderHalCollectie>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OuderHalCollectie) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OuderHalCollectie)));
        }

        /// <summary>
        ///  Het ophalen de ouder-gegevens van een van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen..
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van de ouder.</param>
        /// <returns>OuderHal</returns>
        public OuderHal IngeschrevenpersonenBurgerservicenummeroudersId (string burgerservicenummer, string id)
        {
             ApiResponse<OuderHal> localVarResponse = IngeschrevenpersonenBurgerservicenummeroudersIdWithHttpInfo(burgerservicenummer, id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Het ophalen de ouder-gegevens van een van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen..
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van de ouder.</param>
        /// <returns>ApiResponse of OuderHal</returns>
        public ApiResponse<OuderHal> IngeschrevenpersonenBurgerservicenummeroudersIdWithHttpInfo (string burgerservicenummer, string id)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenpersonenApi->IngeschrevenpersonenBurgerservicenummeroudersId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IngeschrevenpersonenApi->IngeschrevenpersonenBurgerservicenummeroudersId");

            var localVarPath = "/ingeschrevenpersonen/{burgerservicenummer}/ouders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (burgerservicenummer != null) localVarPathParams.Add("burgerservicenummer", this.Configuration.ApiClient.ParameterToString(burgerservicenummer)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IngeschrevenpersonenBurgerservicenummeroudersId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OuderHal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OuderHal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OuderHal)));
        }

        /// <summary>
        ///  Het ophalen de ouder-gegevens van een van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen..
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van de ouder.</param>
        /// <returns>Task of OuderHal</returns>
        public async System.Threading.Tasks.Task<OuderHal> IngeschrevenpersonenBurgerservicenummeroudersIdAsync (string burgerservicenummer, string id)
        {
             ApiResponse<OuderHal> localVarResponse = await IngeschrevenpersonenBurgerservicenummeroudersIdAsyncWithHttpInfo(burgerservicenummer, id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Het ophalen de ouder-gegevens van een van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen..
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van de ouder.</param>
        /// <returns>Task of ApiResponse (OuderHal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<OuderHal>> IngeschrevenpersonenBurgerservicenummeroudersIdAsyncWithHttpInfo (string burgerservicenummer, string id)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenpersonenApi->IngeschrevenpersonenBurgerservicenummeroudersId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IngeschrevenpersonenApi->IngeschrevenpersonenBurgerservicenummeroudersId");

            var localVarPath = "/ingeschrevenpersonen/{burgerservicenummer}/ouders/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (burgerservicenummer != null) localVarPathParams.Add("burgerservicenummer", this.Configuration.ApiClient.ParameterToString(burgerservicenummer)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IngeschrevenpersonenBurgerservicenummeroudersId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<OuderHal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (OuderHal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(OuderHal)));
        }

        /// <summary>
        ///  Het ophalen de actuele partner-gegevens van een van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Een beëindigd huwelijk of geregistreerd partnerschap wordt niet opgenomen in het antwoord. De gevonden huwelijken/partnerschappen worden ongesorteerd teruggegeven.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>PartnerHalCollectie</returns>
        public PartnerHalCollectie IngeschrevenpersonenBurgerservicenummerpartners (string burgerservicenummer)
        {
             ApiResponse<PartnerHalCollectie> localVarResponse = IngeschrevenpersonenBurgerservicenummerpartnersWithHttpInfo(burgerservicenummer);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Het ophalen de actuele partner-gegevens van een van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Een beëindigd huwelijk of geregistreerd partnerschap wordt niet opgenomen in het antwoord. De gevonden huwelijken/partnerschappen worden ongesorteerd teruggegeven.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>ApiResponse of PartnerHalCollectie</returns>
        public ApiResponse<PartnerHalCollectie> IngeschrevenpersonenBurgerservicenummerpartnersWithHttpInfo (string burgerservicenummer)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenpersonenApi->IngeschrevenpersonenBurgerservicenummerpartners");

            var localVarPath = "/ingeschrevenpersonen/{burgerservicenummer}/partners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (burgerservicenummer != null) localVarPathParams.Add("burgerservicenummer", this.Configuration.ApiClient.ParameterToString(burgerservicenummer)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IngeschrevenpersonenBurgerservicenummerpartners", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PartnerHalCollectie>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PartnerHalCollectie) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PartnerHalCollectie)));
        }

        /// <summary>
        ///  Het ophalen de actuele partner-gegevens van een van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Een beëindigd huwelijk of geregistreerd partnerschap wordt niet opgenomen in het antwoord. De gevonden huwelijken/partnerschappen worden ongesorteerd teruggegeven.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>Task of PartnerHalCollectie</returns>
        public async System.Threading.Tasks.Task<PartnerHalCollectie> IngeschrevenpersonenBurgerservicenummerpartnersAsync (string burgerservicenummer)
        {
             ApiResponse<PartnerHalCollectie> localVarResponse = await IngeschrevenpersonenBurgerservicenummerpartnersAsyncWithHttpInfo(burgerservicenummer);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Het ophalen de actuele partner-gegevens van een van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen. Een beëindigd huwelijk of geregistreerd partnerschap wordt niet opgenomen in het antwoord. De gevonden huwelijken/partnerschappen worden ongesorteerd teruggegeven.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <returns>Task of ApiResponse (PartnerHalCollectie)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PartnerHalCollectie>> IngeschrevenpersonenBurgerservicenummerpartnersAsyncWithHttpInfo (string burgerservicenummer)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenpersonenApi->IngeschrevenpersonenBurgerservicenummerpartners");

            var localVarPath = "/ingeschrevenpersonen/{burgerservicenummer}/partners";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (burgerservicenummer != null) localVarPathParams.Add("burgerservicenummer", this.Configuration.ApiClient.ParameterToString(burgerservicenummer)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IngeschrevenpersonenBurgerservicenummerpartners", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PartnerHalCollectie>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PartnerHalCollectie) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PartnerHalCollectie)));
        }

        /// <summary>
        ///  Het ophalen de partner-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van de partner.</param>
        /// <returns>PartnerHal</returns>
        public PartnerHal IngeschrevenpersonenBurgerservicenummerpartnersId (string burgerservicenummer, string id)
        {
             ApiResponse<PartnerHal> localVarResponse = IngeschrevenpersonenBurgerservicenummerpartnersIdWithHttpInfo(burgerservicenummer, id);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  Het ophalen de partner-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van de partner.</param>
        /// <returns>ApiResponse of PartnerHal</returns>
        public ApiResponse<PartnerHal> IngeschrevenpersonenBurgerservicenummerpartnersIdWithHttpInfo (string burgerservicenummer, string id)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenpersonenApi->IngeschrevenpersonenBurgerservicenummerpartnersId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IngeschrevenpersonenApi->IngeschrevenpersonenBurgerservicenummerpartnersId");

            var localVarPath = "/ingeschrevenpersonen/{burgerservicenummer}/partners/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (burgerservicenummer != null) localVarPathParams.Add("burgerservicenummer", this.Configuration.ApiClient.ParameterToString(burgerservicenummer)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IngeschrevenpersonenBurgerservicenummerpartnersId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PartnerHal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PartnerHal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PartnerHal)));
        }

        /// <summary>
        ///  Het ophalen de partner-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van de partner.</param>
        /// <returns>Task of PartnerHal</returns>
        public async System.Threading.Tasks.Task<PartnerHal> IngeschrevenpersonenBurgerservicenummerpartnersIdAsync (string burgerservicenummer, string id)
        {
             ApiResponse<PartnerHal> localVarResponse = await IngeschrevenpersonenBurgerservicenummerpartnersIdAsyncWithHttpInfo(burgerservicenummer, id);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  Het ophalen de partner-gegevens van een Ingeschreven Persoon zoals die op de persoonslijst voorkomen.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer"></param>
        /// <param name="id">De identificatie van de partner.</param>
        /// <returns>Task of ApiResponse (PartnerHal)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<PartnerHal>> IngeschrevenpersonenBurgerservicenummerpartnersIdAsyncWithHttpInfo (string burgerservicenummer, string id)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenpersonenApi->IngeschrevenpersonenBurgerservicenummerpartnersId");
            // verify the required parameter 'id' is set
            if (id == null)
                throw new ApiException(400, "Missing required parameter 'id' when calling IngeschrevenpersonenApi->IngeschrevenpersonenBurgerservicenummerpartnersId");

            var localVarPath = "/ingeschrevenpersonen/{burgerservicenummer}/partners/{id}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (burgerservicenummer != null) localVarPathParams.Add("burgerservicenummer", this.Configuration.ApiClient.ParameterToString(burgerservicenummer)); // path parameter
            if (id != null) localVarPathParams.Add("id", this.Configuration.ApiClient.ParameterToString(id)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("IngeschrevenpersonenBurgerservicenummerpartnersId", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<PartnerHal>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => string.Join(",", x.Value)),
                (PartnerHal) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(PartnerHal)));
        }

    }
}
