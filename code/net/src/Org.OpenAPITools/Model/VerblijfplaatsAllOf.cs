/* 
 * Bevragingen ingeschreven personen
 *
 * API voor het ontsluiten van gegevens van ingeschreven personen en aanverwante gegevens uit de GBA en RNI. Met deze API worden de actuele gegevens van ingeschreven personen, hun kinderen, partners en ouders ontsloten. <br> Heeft een persoon bijvoorbeeld geen geldige nationaliteit, dan wordt nationaliteit niet geretourneerd. <br> Heeft een persoon een beëindigd partnerschap of huwelijk, dan wordt de partner niet geretourneerd. <br> <br> Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/tree/master/features) voor nadere toelichting. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Gegevens over het verblijf en adres van de ingeschreven persoon. Dit is het adres waarop een persoon is ingeschreven.  * **datumAanvangAdreshuishouding** : De datum van aangifte of ambtshalve melding van verblijf en adres.  * **datumIngangGeldigheid** : Datum waarop de gegevens over de verblijfplaats geldig zijn geworden.  * **datumInschrijvingInGemeente**: Bij inschrijving op grond van een aangifte door de burger van zijn vestiging in een (volgende) gemeente is dit de aangiftedatum. Bij inschrijving op grond van een geboorteakte is dit de geboortedatum. Bij ambtshalve inschrijving is dit de datum waarop de betrokkene schriftelijk van het voornemen van ambtshalve opneming mededeling is gedaan.  * **datumVestigingInNederland** : Datum van inschrijving in Nederland  * **landVanWaarIngeschreven** : Het land waar de ingeschreven persoon verblijf hield voor (her)vestiging in Nederland.  * **gemeenteVanInschrijving** : Een aanduiding die aangeeft in welke gemeente de PK zich bevindt. De code kan voorloopnullen bevatten  * **landVanWaarIngeschreven** : Het LAND waar de INGESCHREVEN PERSOON verblijf hield voor (her)vestiging in Nederland.
    /// </summary>
    [DataContract]
    public partial class VerblijfplaatsAllOf :  IEquatable<VerblijfplaatsAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerblijfplaatsAllOf" /> class.
        /// </summary>
        /// <param name="identificatiecodeAdresseerbaarObject">Een verblijfplaats kan een ligplaats, een standplaats of een verblijfsobject in een of meerdere panden zijn, waaraan respectievelijk een ligplaatsidentificatie, standplaatsidentificatie of verblijfsobjectidentificatie is toegekend. De Identificatiecode verblijfplaats is een combinatie van een viercijferige gemeentecode, een tweecijferige objecttypecode die aangeeft of de aanduiding een verblijfsobject (01), ligplaats (02) of standplaats (03) betreft en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig volgnummer. Combinatie van de viercijferige &#39;gemeentecode&#39; (volgens GBA tabel 33, Gemeententabel), de tweecijferige &#39;objecttypecode&#39; en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig &#39;objectvolgnummer&#39;..</param>
        /// <param name="indicatieVestigingVanuitBuitenland">Indicatie waarmee aangegeven wordt of de ingeschreven persoon zich vanuit het buitenland heeftingeschreven. Deze indicatie heeft als rol om aan te geven dat iemand zich vanuit het buitenland gevestigd heeft. Deze indicator wordt altijd meegeleverd als de waarde true is. Als de waarde false is wordt de indicator niet meegeleverd..</param>
        /// <param name="locatiebeschrijving">Een geheel of gedeeltelijke omschrijving van de ligging van een object..</param>
        /// <param name="straatnaam">De officiële straatnaam zoals door het bevoegd gemeentelijk orgaan is vastgesteld, zo nodig ingekort conform de specificaties van de NEN 5825. alle alfanumrieke tekens.</param>
        /// <param name="vanuitVertrokkenOnbekendWaarheen">Indicatie waarmee aangegeven wordt dat de persoon is teruggekeerd uit een situatie van vertrokken onbekend waarheen.</param>
        /// <param name="datumAanvangAdreshouding">datumAanvangAdreshouding.</param>
        /// <param name="datumIngangGeldigheid">datumIngangGeldigheid.</param>
        /// <param name="datumInschrijvingInGemeente">datumInschrijvingInGemeente.</param>
        /// <param name="datumVestigingInNederland">datumVestigingInNederland.</param>
        /// <param name="gemeenteVanInschrijving">gemeenteVanInschrijving.</param>
        /// <param name="landVanwaarIngeschreven">landVanwaarIngeschreven.</param>
        /// <param name="verblijfBuitenland">verblijfBuitenland.</param>
        /// <param name="inOnderzoek">inOnderzoek.</param>
        public VerblijfplaatsAllOf(string identificatiecodeAdresseerbaarObject = default(string), bool indicatieVestigingVanuitBuitenland = default(bool), string locatiebeschrijving = default(string), string straatnaam = default(string), bool vanuitVertrokkenOnbekendWaarheen = default(bool), DatumOnvolledig datumAanvangAdreshouding = default(DatumOnvolledig), DatumOnvolledig datumIngangGeldigheid = default(DatumOnvolledig), DatumOnvolledig datumInschrijvingInGemeente = default(DatumOnvolledig), DatumOnvolledig datumVestigingInNederland = default(DatumOnvolledig), Waardetabel gemeenteVanInschrijving = default(Waardetabel), Waardetabel landVanwaarIngeschreven = default(Waardetabel), VerblijfBuitenland verblijfBuitenland = default(VerblijfBuitenland), VerblijfplaatsInOnderzoek inOnderzoek = default(VerblijfplaatsInOnderzoek))
        {
            this.IdentificatiecodeAdresseerbaarObject = identificatiecodeAdresseerbaarObject;
            this.IndicatieVestigingVanuitBuitenland = indicatieVestigingVanuitBuitenland;
            this.Locatiebeschrijving = locatiebeschrijving;
            this.Straatnaam = straatnaam;
            this.VanuitVertrokkenOnbekendWaarheen = vanuitVertrokkenOnbekendWaarheen;
            this.DatumAanvangAdreshouding = datumAanvangAdreshouding;
            this.DatumIngangGeldigheid = datumIngangGeldigheid;
            this.DatumInschrijvingInGemeente = datumInschrijvingInGemeente;
            this.DatumVestigingInNederland = datumVestigingInNederland;
            this.GemeenteVanInschrijving = gemeenteVanInschrijving;
            this.LandVanwaarIngeschreven = landVanwaarIngeschreven;
            this.VerblijfBuitenland = verblijfBuitenland;
            this.InOnderzoek = inOnderzoek;
        }
        
        /// <summary>
        /// Een verblijfplaats kan een ligplaats, een standplaats of een verblijfsobject in een of meerdere panden zijn, waaraan respectievelijk een ligplaatsidentificatie, standplaatsidentificatie of verblijfsobjectidentificatie is toegekend. De Identificatiecode verblijfplaats is een combinatie van een viercijferige gemeentecode, een tweecijferige objecttypecode die aangeeft of de aanduiding een verblijfsobject (01), ligplaats (02) of standplaats (03) betreft en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig volgnummer. Combinatie van de viercijferige &#39;gemeentecode&#39; (volgens GBA tabel 33, Gemeententabel), de tweecijferige &#39;objecttypecode&#39; en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig &#39;objectvolgnummer&#39;.
        /// </summary>
        /// <value>Een verblijfplaats kan een ligplaats, een standplaats of een verblijfsobject in een of meerdere panden zijn, waaraan respectievelijk een ligplaatsidentificatie, standplaatsidentificatie of verblijfsobjectidentificatie is toegekend. De Identificatiecode verblijfplaats is een combinatie van een viercijferige gemeentecode, een tweecijferige objecttypecode die aangeeft of de aanduiding een verblijfsobject (01), ligplaats (02) of standplaats (03) betreft en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig volgnummer. Combinatie van de viercijferige &#39;gemeentecode&#39; (volgens GBA tabel 33, Gemeententabel), de tweecijferige &#39;objecttypecode&#39; en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig &#39;objectvolgnummer&#39;.</value>
        [DataMember(Name="identificatiecodeAdresseerbaarObject", EmitDefaultValue=false)]
        public string IdentificatiecodeAdresseerbaarObject { get; set; }

        /// <summary>
        /// Indicatie waarmee aangegeven wordt of de ingeschreven persoon zich vanuit het buitenland heeftingeschreven. Deze indicatie heeft als rol om aan te geven dat iemand zich vanuit het buitenland gevestigd heeft. Deze indicator wordt altijd meegeleverd als de waarde true is. Als de waarde false is wordt de indicator niet meegeleverd.
        /// </summary>
        /// <value>Indicatie waarmee aangegeven wordt of de ingeschreven persoon zich vanuit het buitenland heeftingeschreven. Deze indicatie heeft als rol om aan te geven dat iemand zich vanuit het buitenland gevestigd heeft. Deze indicator wordt altijd meegeleverd als de waarde true is. Als de waarde false is wordt de indicator niet meegeleverd.</value>
        [DataMember(Name="indicatieVestigingVanuitBuitenland", EmitDefaultValue=false)]
        public bool IndicatieVestigingVanuitBuitenland { get; set; }

        /// <summary>
        /// Een geheel of gedeeltelijke omschrijving van de ligging van een object.
        /// </summary>
        /// <value>Een geheel of gedeeltelijke omschrijving van de ligging van een object.</value>
        [DataMember(Name="locatiebeschrijving", EmitDefaultValue=false)]
        public string Locatiebeschrijving { get; set; }

        /// <summary>
        /// De officiële straatnaam zoals door het bevoegd gemeentelijk orgaan is vastgesteld, zo nodig ingekort conform de specificaties van de NEN 5825. alle alfanumrieke tekens
        /// </summary>
        /// <value>De officiële straatnaam zoals door het bevoegd gemeentelijk orgaan is vastgesteld, zo nodig ingekort conform de specificaties van de NEN 5825. alle alfanumrieke tekens</value>
        [DataMember(Name="straatnaam", EmitDefaultValue=false)]
        public string Straatnaam { get; set; }

        /// <summary>
        /// Indicatie waarmee aangegeven wordt dat de persoon is teruggekeerd uit een situatie van vertrokken onbekend waarheen
        /// </summary>
        /// <value>Indicatie waarmee aangegeven wordt dat de persoon is teruggekeerd uit een situatie van vertrokken onbekend waarheen</value>
        [DataMember(Name="vanuitVertrokkenOnbekendWaarheen", EmitDefaultValue=false)]
        public bool VanuitVertrokkenOnbekendWaarheen { get; set; }

        /// <summary>
        /// Gets or Sets DatumAanvangAdreshouding
        /// </summary>
        [DataMember(Name="datumAanvangAdreshouding", EmitDefaultValue=false)]
        public DatumOnvolledig DatumAanvangAdreshouding { get; set; }

        /// <summary>
        /// Gets or Sets DatumIngangGeldigheid
        /// </summary>
        [DataMember(Name="datumIngangGeldigheid", EmitDefaultValue=false)]
        public DatumOnvolledig DatumIngangGeldigheid { get; set; }

        /// <summary>
        /// Gets or Sets DatumInschrijvingInGemeente
        /// </summary>
        [DataMember(Name="datumInschrijvingInGemeente", EmitDefaultValue=false)]
        public DatumOnvolledig DatumInschrijvingInGemeente { get; set; }

        /// <summary>
        /// Gets or Sets DatumVestigingInNederland
        /// </summary>
        [DataMember(Name="datumVestigingInNederland", EmitDefaultValue=false)]
        public DatumOnvolledig DatumVestigingInNederland { get; set; }

        /// <summary>
        /// Gets or Sets GemeenteVanInschrijving
        /// </summary>
        [DataMember(Name="gemeenteVanInschrijving", EmitDefaultValue=false)]
        public Waardetabel GemeenteVanInschrijving { get; set; }

        /// <summary>
        /// Gets or Sets LandVanwaarIngeschreven
        /// </summary>
        [DataMember(Name="landVanwaarIngeschreven", EmitDefaultValue=false)]
        public Waardetabel LandVanwaarIngeschreven { get; set; }

        /// <summary>
        /// Gets or Sets VerblijfBuitenland
        /// </summary>
        [DataMember(Name="verblijfBuitenland", EmitDefaultValue=false)]
        public VerblijfBuitenland VerblijfBuitenland { get; set; }

        /// <summary>
        /// Gets or Sets InOnderzoek
        /// </summary>
        [DataMember(Name="inOnderzoek", EmitDefaultValue=false)]
        public VerblijfplaatsInOnderzoek InOnderzoek { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VerblijfplaatsAllOf {\n");
            sb.Append("  IdentificatiecodeAdresseerbaarObject: ").Append(IdentificatiecodeAdresseerbaarObject).Append("\n");
            sb.Append("  IndicatieVestigingVanuitBuitenland: ").Append(IndicatieVestigingVanuitBuitenland).Append("\n");
            sb.Append("  Locatiebeschrijving: ").Append(Locatiebeschrijving).Append("\n");
            sb.Append("  Straatnaam: ").Append(Straatnaam).Append("\n");
            sb.Append("  VanuitVertrokkenOnbekendWaarheen: ").Append(VanuitVertrokkenOnbekendWaarheen).Append("\n");
            sb.Append("  DatumAanvangAdreshouding: ").Append(DatumAanvangAdreshouding).Append("\n");
            sb.Append("  DatumIngangGeldigheid: ").Append(DatumIngangGeldigheid).Append("\n");
            sb.Append("  DatumInschrijvingInGemeente: ").Append(DatumInschrijvingInGemeente).Append("\n");
            sb.Append("  DatumVestigingInNederland: ").Append(DatumVestigingInNederland).Append("\n");
            sb.Append("  GemeenteVanInschrijving: ").Append(GemeenteVanInschrijving).Append("\n");
            sb.Append("  LandVanwaarIngeschreven: ").Append(LandVanwaarIngeschreven).Append("\n");
            sb.Append("  VerblijfBuitenland: ").Append(VerblijfBuitenland).Append("\n");
            sb.Append("  InOnderzoek: ").Append(InOnderzoek).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerblijfplaatsAllOf);
        }

        /// <summary>
        /// Returns true if VerblijfplaatsAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of VerblijfplaatsAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerblijfplaatsAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.IdentificatiecodeAdresseerbaarObject == input.IdentificatiecodeAdresseerbaarObject ||
                    (this.IdentificatiecodeAdresseerbaarObject != null &&
                    this.IdentificatiecodeAdresseerbaarObject.Equals(input.IdentificatiecodeAdresseerbaarObject))
                ) && 
                (
                    this.IndicatieVestigingVanuitBuitenland == input.IndicatieVestigingVanuitBuitenland ||
                    (this.IndicatieVestigingVanuitBuitenland != null &&
                    this.IndicatieVestigingVanuitBuitenland.Equals(input.IndicatieVestigingVanuitBuitenland))
                ) && 
                (
                    this.Locatiebeschrijving == input.Locatiebeschrijving ||
                    (this.Locatiebeschrijving != null &&
                    this.Locatiebeschrijving.Equals(input.Locatiebeschrijving))
                ) && 
                (
                    this.Straatnaam == input.Straatnaam ||
                    (this.Straatnaam != null &&
                    this.Straatnaam.Equals(input.Straatnaam))
                ) && 
                (
                    this.VanuitVertrokkenOnbekendWaarheen == input.VanuitVertrokkenOnbekendWaarheen ||
                    (this.VanuitVertrokkenOnbekendWaarheen != null &&
                    this.VanuitVertrokkenOnbekendWaarheen.Equals(input.VanuitVertrokkenOnbekendWaarheen))
                ) && 
                (
                    this.DatumAanvangAdreshouding == input.DatumAanvangAdreshouding ||
                    (this.DatumAanvangAdreshouding != null &&
                    this.DatumAanvangAdreshouding.Equals(input.DatumAanvangAdreshouding))
                ) && 
                (
                    this.DatumIngangGeldigheid == input.DatumIngangGeldigheid ||
                    (this.DatumIngangGeldigheid != null &&
                    this.DatumIngangGeldigheid.Equals(input.DatumIngangGeldigheid))
                ) && 
                (
                    this.DatumInschrijvingInGemeente == input.DatumInschrijvingInGemeente ||
                    (this.DatumInschrijvingInGemeente != null &&
                    this.DatumInschrijvingInGemeente.Equals(input.DatumInschrijvingInGemeente))
                ) && 
                (
                    this.DatumVestigingInNederland == input.DatumVestigingInNederland ||
                    (this.DatumVestigingInNederland != null &&
                    this.DatumVestigingInNederland.Equals(input.DatumVestigingInNederland))
                ) && 
                (
                    this.GemeenteVanInschrijving == input.GemeenteVanInschrijving ||
                    (this.GemeenteVanInschrijving != null &&
                    this.GemeenteVanInschrijving.Equals(input.GemeenteVanInschrijving))
                ) && 
                (
                    this.LandVanwaarIngeschreven == input.LandVanwaarIngeschreven ||
                    (this.LandVanwaarIngeschreven != null &&
                    this.LandVanwaarIngeschreven.Equals(input.LandVanwaarIngeschreven))
                ) && 
                (
                    this.VerblijfBuitenland == input.VerblijfBuitenland ||
                    (this.VerblijfBuitenland != null &&
                    this.VerblijfBuitenland.Equals(input.VerblijfBuitenland))
                ) && 
                (
                    this.InOnderzoek == input.InOnderzoek ||
                    (this.InOnderzoek != null &&
                    this.InOnderzoek.Equals(input.InOnderzoek))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.IdentificatiecodeAdresseerbaarObject != null)
                    hashCode = hashCode * 59 + this.IdentificatiecodeAdresseerbaarObject.GetHashCode();
                if (this.IndicatieVestigingVanuitBuitenland != null)
                    hashCode = hashCode * 59 + this.IndicatieVestigingVanuitBuitenland.GetHashCode();
                if (this.Locatiebeschrijving != null)
                    hashCode = hashCode * 59 + this.Locatiebeschrijving.GetHashCode();
                if (this.Straatnaam != null)
                    hashCode = hashCode * 59 + this.Straatnaam.GetHashCode();
                if (this.VanuitVertrokkenOnbekendWaarheen != null)
                    hashCode = hashCode * 59 + this.VanuitVertrokkenOnbekendWaarheen.GetHashCode();
                if (this.DatumAanvangAdreshouding != null)
                    hashCode = hashCode * 59 + this.DatumAanvangAdreshouding.GetHashCode();
                if (this.DatumIngangGeldigheid != null)
                    hashCode = hashCode * 59 + this.DatumIngangGeldigheid.GetHashCode();
                if (this.DatumInschrijvingInGemeente != null)
                    hashCode = hashCode * 59 + this.DatumInschrijvingInGemeente.GetHashCode();
                if (this.DatumVestigingInNederland != null)
                    hashCode = hashCode * 59 + this.DatumVestigingInNederland.GetHashCode();
                if (this.GemeenteVanInschrijving != null)
                    hashCode = hashCode * 59 + this.GemeenteVanInschrijving.GetHashCode();
                if (this.LandVanwaarIngeschreven != null)
                    hashCode = hashCode * 59 + this.LandVanwaarIngeschreven.GetHashCode();
                if (this.VerblijfBuitenland != null)
                    hashCode = hashCode * 59 + this.VerblijfBuitenland.GetHashCode();
                if (this.InOnderzoek != null)
                    hashCode = hashCode * 59 + this.InOnderzoek.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // IdentificatiecodeAdresseerbaarObject (string) maxLength
            if(this.IdentificatiecodeAdresseerbaarObject != null && this.IdentificatiecodeAdresseerbaarObject.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdentificatiecodeAdresseerbaarObject, length must be less than 16.", new [] { "IdentificatiecodeAdresseerbaarObject" });
            }

            
            // Locatiebeschrijving (string) maxLength
            if(this.Locatiebeschrijving != null && this.Locatiebeschrijving.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Locatiebeschrijving, length must be less than 35.", new [] { "Locatiebeschrijving" });
            }

            
            // Straatnaam (string) maxLength
            if(this.Straatnaam != null && this.Straatnaam.Length > 24)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Straatnaam, length must be less than 24.", new [] { "Straatnaam" });
            }

            
            yield break;
        }
    }

}
