/* 
 * Bevragingen ingeschreven personen
 *
 * API voor het ontsluiten van gegevens van ingeschreven personen en aanverwante gegevens uit de GBA en RNI. Met deze API worden de actuele gegevens van ingeschreven personen, hun kinderen, partners en ouders ontsloten. <br> Heeft een persoon bijvoorbeeld geen geldige nationaliteit, dan wordt nationaliteit niet geretourneerd. <br> Heeft een persoon een beÃ«indigd partnerschap of huwelijk, dan wordt de partner niet geretourneerd. <br> <br> Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/tree/master/features) voor nadere toelichting. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NaamPersoon
    /// </summary>
    [DataContract]
    public partial class NaamPersoon :  IEquatable<NaamPersoon>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NaamPersoon" /> class.
        /// </summary>
        /// <param name="geslachtsnaam">De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels en adellijke titel/predikaat zijn afgesplitst..</param>
        /// <param name="voorletters">De voorletters waarmee een persoon aangeschreven wil worden. De voorlettes zijn afgeleid van de voornamen..</param>
        /// <param name="voornamen">De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat..</param>
        /// <param name="voorvoegsel">Dat deel van de geslachtsnaam dat voorkomt in de Voorvoegseltabel en, gescheiden door een spatie, vooraf gaat aan de rest van de geslachtsnaam..</param>
        /// <param name="inOnderzoek">inOnderzoek.</param>
        /// <param name="aanhef">De aanhef zoals die in een brief, gericht aan een persoon gebruikt kan worden..</param>
        /// <param name="aanschrijfwijze">Samengestelde naam zoals die in communicatie met de persoon gebruikt kan worden..</param>
        /// <param name="gebruikInLopendeTekst">De naam zoals die in lopende tekst gebruikt kan worden..</param>
        /// <param name="aanduidingNaamgebruik">aanduidingNaamgebruik.</param>
        public NaamPersoon(string geslachtsnaam = default(string), string voorletters = default(string), string voornamen = default(string), string voorvoegsel = default(string), NaamInOnderzoek inOnderzoek = default(NaamInOnderzoek), string aanhef = default(string), string aanschrijfwijze = default(string), string gebruikInLopendeTekst = default(string), NaamgebruikEnum aanduidingNaamgebruik = default(NaamgebruikEnum))
        {
            this.Geslachtsnaam = geslachtsnaam;
            this.Voorletters = voorletters;
            this.Voornamen = voornamen;
            this.Voorvoegsel = voorvoegsel;
            this.InOnderzoek = inOnderzoek;
            this.Aanhef = aanhef;
            this.Aanschrijfwijze = aanschrijfwijze;
            this.GebruikInLopendeTekst = gebruikInLopendeTekst;
            this.AanduidingNaamgebruik = aanduidingNaamgebruik;
        }
        
        /// <summary>
        /// De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels en adellijke titel/predikaat zijn afgesplitst.
        /// </summary>
        /// <value>De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels en adellijke titel/predikaat zijn afgesplitst.</value>
        [DataMember(Name="geslachtsnaam", EmitDefaultValue=false)]
        public string Geslachtsnaam { get; set; }

        /// <summary>
        /// De voorletters waarmee een persoon aangeschreven wil worden. De voorlettes zijn afgeleid van de voornamen.
        /// </summary>
        /// <value>De voorletters waarmee een persoon aangeschreven wil worden. De voorlettes zijn afgeleid van de voornamen.</value>
        [DataMember(Name="voorletters", EmitDefaultValue=false)]
        public string Voorletters { get; set; }

        /// <summary>
        /// De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat.
        /// </summary>
        /// <value>De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat.</value>
        [DataMember(Name="voornamen", EmitDefaultValue=false)]
        public string Voornamen { get; set; }

        /// <summary>
        /// Dat deel van de geslachtsnaam dat voorkomt in de Voorvoegseltabel en, gescheiden door een spatie, vooraf gaat aan de rest van de geslachtsnaam.
        /// </summary>
        /// <value>Dat deel van de geslachtsnaam dat voorkomt in de Voorvoegseltabel en, gescheiden door een spatie, vooraf gaat aan de rest van de geslachtsnaam.</value>
        [DataMember(Name="voorvoegsel", EmitDefaultValue=false)]
        public string Voorvoegsel { get; set; }

        /// <summary>
        /// Gets or Sets InOnderzoek
        /// </summary>
        [DataMember(Name="inOnderzoek", EmitDefaultValue=false)]
        public NaamInOnderzoek InOnderzoek { get; set; }

        /// <summary>
        /// De aanhef zoals die in een brief, gericht aan een persoon gebruikt kan worden.
        /// </summary>
        /// <value>De aanhef zoals die in een brief, gericht aan een persoon gebruikt kan worden.</value>
        [DataMember(Name="aanhef", EmitDefaultValue=false)]
        public string Aanhef { get; set; }

        /// <summary>
        /// Samengestelde naam zoals die in communicatie met de persoon gebruikt kan worden.
        /// </summary>
        /// <value>Samengestelde naam zoals die in communicatie met de persoon gebruikt kan worden.</value>
        [DataMember(Name="aanschrijfwijze", EmitDefaultValue=false)]
        public string Aanschrijfwijze { get; set; }

        /// <summary>
        /// De naam zoals die in lopende tekst gebruikt kan worden.
        /// </summary>
        /// <value>De naam zoals die in lopende tekst gebruikt kan worden.</value>
        [DataMember(Name="gebruikInLopendeTekst", EmitDefaultValue=false)]
        public string GebruikInLopendeTekst { get; set; }

        /// <summary>
        /// Gets or Sets AanduidingNaamgebruik
        /// </summary>
        [DataMember(Name="aanduidingNaamgebruik", EmitDefaultValue=false)]
        public NaamgebruikEnum AanduidingNaamgebruik { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NaamPersoon {\n");
            sb.Append("  Geslachtsnaam: ").Append(Geslachtsnaam).Append("\n");
            sb.Append("  Voorletters: ").Append(Voorletters).Append("\n");
            sb.Append("  Voornamen: ").Append(Voornamen).Append("\n");
            sb.Append("  Voorvoegsel: ").Append(Voorvoegsel).Append("\n");
            sb.Append("  InOnderzoek: ").Append(InOnderzoek).Append("\n");
            sb.Append("  Aanhef: ").Append(Aanhef).Append("\n");
            sb.Append("  Aanschrijfwijze: ").Append(Aanschrijfwijze).Append("\n");
            sb.Append("  GebruikInLopendeTekst: ").Append(GebruikInLopendeTekst).Append("\n");
            sb.Append("  AanduidingNaamgebruik: ").Append(AanduidingNaamgebruik).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NaamPersoon);
        }

        /// <summary>
        /// Returns true if NaamPersoon instances are equal
        /// </summary>
        /// <param name="input">Instance of NaamPersoon to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NaamPersoon input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Geslachtsnaam == input.Geslachtsnaam ||
                    (this.Geslachtsnaam != null &&
                    this.Geslachtsnaam.Equals(input.Geslachtsnaam))
                ) && 
                (
                    this.Voorletters == input.Voorletters ||
                    (this.Voorletters != null &&
                    this.Voorletters.Equals(input.Voorletters))
                ) && 
                (
                    this.Voornamen == input.Voornamen ||
                    (this.Voornamen != null &&
                    this.Voornamen.Equals(input.Voornamen))
                ) && 
                (
                    this.Voorvoegsel == input.Voorvoegsel ||
                    (this.Voorvoegsel != null &&
                    this.Voorvoegsel.Equals(input.Voorvoegsel))
                ) && 
                (
                    this.InOnderzoek == input.InOnderzoek ||
                    (this.InOnderzoek != null &&
                    this.InOnderzoek.Equals(input.InOnderzoek))
                ) && 
                (
                    this.Aanhef == input.Aanhef ||
                    (this.Aanhef != null &&
                    this.Aanhef.Equals(input.Aanhef))
                ) && 
                (
                    this.Aanschrijfwijze == input.Aanschrijfwijze ||
                    (this.Aanschrijfwijze != null &&
                    this.Aanschrijfwijze.Equals(input.Aanschrijfwijze))
                ) && 
                (
                    this.GebruikInLopendeTekst == input.GebruikInLopendeTekst ||
                    (this.GebruikInLopendeTekst != null &&
                    this.GebruikInLopendeTekst.Equals(input.GebruikInLopendeTekst))
                ) && 
                (
                    this.AanduidingNaamgebruik == input.AanduidingNaamgebruik ||
                    (this.AanduidingNaamgebruik != null &&
                    this.AanduidingNaamgebruik.Equals(input.AanduidingNaamgebruik))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Geslachtsnaam != null)
                    hashCode = hashCode * 59 + this.Geslachtsnaam.GetHashCode();
                if (this.Voorletters != null)
                    hashCode = hashCode * 59 + this.Voorletters.GetHashCode();
                if (this.Voornamen != null)
                    hashCode = hashCode * 59 + this.Voornamen.GetHashCode();
                if (this.Voorvoegsel != null)
                    hashCode = hashCode * 59 + this.Voorvoegsel.GetHashCode();
                if (this.InOnderzoek != null)
                    hashCode = hashCode * 59 + this.InOnderzoek.GetHashCode();
                if (this.Aanhef != null)
                    hashCode = hashCode * 59 + this.Aanhef.GetHashCode();
                if (this.Aanschrijfwijze != null)
                    hashCode = hashCode * 59 + this.Aanschrijfwijze.GetHashCode();
                if (this.GebruikInLopendeTekst != null)
                    hashCode = hashCode * 59 + this.GebruikInLopendeTekst.GetHashCode();
                if (this.AanduidingNaamgebruik != null)
                    hashCode = hashCode * 59 + this.AanduidingNaamgebruik.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Geslachtsnaam (string) maxLength
            if(this.Geslachtsnaam != null && this.Geslachtsnaam.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Geslachtsnaam, length must be less than 200.", new [] { "Geslachtsnaam" });
            }

            
            // Voorletters (string) maxLength
            if(this.Voorletters != null && this.Voorletters.Length > 20)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Voorletters, length must be less than 20.", new [] { "Voorletters" });
            }

            
            // Voornamen (string) maxLength
            if(this.Voornamen != null && this.Voornamen.Length > 200)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Voornamen, length must be less than 200.", new [] { "Voornamen" });
            }

            
            // Voorvoegsel (string) maxLength
            if(this.Voorvoegsel != null && this.Voorvoegsel.Length > 10)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Voorvoegsel, length must be less than 10.", new [] { "Voorvoegsel" });
            }

            
            yield break;
        }
    }

}
