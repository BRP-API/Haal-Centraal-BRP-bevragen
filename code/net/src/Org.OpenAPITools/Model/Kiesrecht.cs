/* 
 * Bevragingen ingeschreven personen
 *
 * API voor het ontsluiten van gegevens van ingeschreven personen en aanverwante gegevens uit de GBA en RNI. Met deze API worden de actuele gegevens van ingeschreven personen, hun kinderen, partners en ouders ontsloten. <br> Heeft een persoon bijvoorbeeld geen geldige nationaliteit, dan wordt nationaliteit niet geretourneerd. <br> Heeft een persoon een beÃ«indigd partnerschap of huwelijk, dan wordt de partner niet geretourneerd. <br> <br> Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/tree/master/features) voor nadere toelichting. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Gegevens over het kiesrecht van de ingeschreven persoon.  * **datumUitsluitingEuropeesKiesrecht**: De datum waarop een uitsluiting voor deelname aan verkiezingen voor het Europees parlement niet meer van toepassing is, als er sprake is van uitsluiting voor bepaalde tijd.  * **datumUitsluitingKiesrecht**: De datum waarop een uitsluiting voor deelname aan verkiezingen niet meer van toepassing is, als er sprake is van uitsluiting voor bepaalde tijd.
    /// </summary>
    [DataContract]
    public partial class Kiesrecht :  IEquatable<Kiesrecht>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Kiesrecht" /> class.
        /// </summary>
        /// <param name="europeesKiesrecht">Een aanduiding die aangeeft of de persoon een oproep moet ontvangen voor verkiezingen voor het Europees parlement.  * true: persoon ontvangt een oproep.</param>
        /// <param name="uitgeslotenVanKiesrecht">Een aanduiding die aangeeft of de persoon is uitgesloten van kiesrecht. * true: persoon is uitgesloten.</param>
        /// <param name="einddatumUitsluitingEuropeesKiesrecht">einddatumUitsluitingEuropeesKiesrecht.</param>
        /// <param name="einddatumUitsluitingKiesrecht">einddatumUitsluitingKiesrecht.</param>
        public Kiesrecht(bool europeesKiesrecht = default(bool), bool uitgeslotenVanKiesrecht = default(bool), DatumOnvolledig einddatumUitsluitingEuropeesKiesrecht = default(DatumOnvolledig), DatumOnvolledig einddatumUitsluitingKiesrecht = default(DatumOnvolledig))
        {
            this.EuropeesKiesrecht = europeesKiesrecht;
            this.UitgeslotenVanKiesrecht = uitgeslotenVanKiesrecht;
            this.EinddatumUitsluitingEuropeesKiesrecht = einddatumUitsluitingEuropeesKiesrecht;
            this.EinddatumUitsluitingKiesrecht = einddatumUitsluitingKiesrecht;
        }
        
        /// <summary>
        /// Een aanduiding die aangeeft of de persoon een oproep moet ontvangen voor verkiezingen voor het Europees parlement.  * true: persoon ontvangt een oproep
        /// </summary>
        /// <value>Een aanduiding die aangeeft of de persoon een oproep moet ontvangen voor verkiezingen voor het Europees parlement.  * true: persoon ontvangt een oproep</value>
        [DataMember(Name="europeesKiesrecht", EmitDefaultValue=false)]
        public bool EuropeesKiesrecht { get; set; }

        /// <summary>
        /// Een aanduiding die aangeeft of de persoon is uitgesloten van kiesrecht. * true: persoon is uitgesloten
        /// </summary>
        /// <value>Een aanduiding die aangeeft of de persoon is uitgesloten van kiesrecht. * true: persoon is uitgesloten</value>
        [DataMember(Name="uitgeslotenVanKiesrecht", EmitDefaultValue=false)]
        public bool UitgeslotenVanKiesrecht { get; set; }

        /// <summary>
        /// Gets or Sets EinddatumUitsluitingEuropeesKiesrecht
        /// </summary>
        [DataMember(Name="einddatumUitsluitingEuropeesKiesrecht", EmitDefaultValue=false)]
        public DatumOnvolledig EinddatumUitsluitingEuropeesKiesrecht { get; set; }

        /// <summary>
        /// Gets or Sets EinddatumUitsluitingKiesrecht
        /// </summary>
        [DataMember(Name="einddatumUitsluitingKiesrecht", EmitDefaultValue=false)]
        public DatumOnvolledig EinddatumUitsluitingKiesrecht { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Kiesrecht {\n");
            sb.Append("  EuropeesKiesrecht: ").Append(EuropeesKiesrecht).Append("\n");
            sb.Append("  UitgeslotenVanKiesrecht: ").Append(UitgeslotenVanKiesrecht).Append("\n");
            sb.Append("  EinddatumUitsluitingEuropeesKiesrecht: ").Append(EinddatumUitsluitingEuropeesKiesrecht).Append("\n");
            sb.Append("  EinddatumUitsluitingKiesrecht: ").Append(EinddatumUitsluitingKiesrecht).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Kiesrecht);
        }

        /// <summary>
        /// Returns true if Kiesrecht instances are equal
        /// </summary>
        /// <param name="input">Instance of Kiesrecht to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Kiesrecht input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.EuropeesKiesrecht == input.EuropeesKiesrecht ||
                    (this.EuropeesKiesrecht != null &&
                    this.EuropeesKiesrecht.Equals(input.EuropeesKiesrecht))
                ) && 
                (
                    this.UitgeslotenVanKiesrecht == input.UitgeslotenVanKiesrecht ||
                    (this.UitgeslotenVanKiesrecht != null &&
                    this.UitgeslotenVanKiesrecht.Equals(input.UitgeslotenVanKiesrecht))
                ) && 
                (
                    this.EinddatumUitsluitingEuropeesKiesrecht == input.EinddatumUitsluitingEuropeesKiesrecht ||
                    (this.EinddatumUitsluitingEuropeesKiesrecht != null &&
                    this.EinddatumUitsluitingEuropeesKiesrecht.Equals(input.EinddatumUitsluitingEuropeesKiesrecht))
                ) && 
                (
                    this.EinddatumUitsluitingKiesrecht == input.EinddatumUitsluitingKiesrecht ||
                    (this.EinddatumUitsluitingKiesrecht != null &&
                    this.EinddatumUitsluitingKiesrecht.Equals(input.EinddatumUitsluitingKiesrecht))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.EuropeesKiesrecht != null)
                    hashCode = hashCode * 59 + this.EuropeesKiesrecht.GetHashCode();
                if (this.UitgeslotenVanKiesrecht != null)
                    hashCode = hashCode * 59 + this.UitgeslotenVanKiesrecht.GetHashCode();
                if (this.EinddatumUitsluitingEuropeesKiesrecht != null)
                    hashCode = hashCode * 59 + this.EinddatumUitsluitingEuropeesKiesrecht.GetHashCode();
                if (this.EinddatumUitsluitingKiesrecht != null)
                    hashCode = hashCode * 59 + this.EinddatumUitsluitingKiesrecht.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
