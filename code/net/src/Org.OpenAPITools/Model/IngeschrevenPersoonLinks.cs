/* 
 * Bevragen Ingeschreven Personen
 *
 * API voor het bevragen van ingeschreven personen uit de basisregistratie personen (BRP), inclusief de registratie niet-ingezeten (RNI). Met deze API kun je personen zoeken en actuele gegevens over personen, kinderen, partners en ouders raadplegen.  Gegevens die er niet zijn of niet actueel zijn krijg je niet terug. Heeft een persoon bijvoorbeeld geen geldige nationaliteit, en alleen een beëindigd partnerschap, dan krijg je geen gegevens over nationaliteit en partner.  Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/tree/v1.1.0/features) voor nadere toelichting. 
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// IngeschrevenPersoonLinks
    /// </summary>
    [DataContract]
    public partial class IngeschrevenPersoonLinks :  IEquatable<IngeschrevenPersoonLinks>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IngeschrevenPersoonLinks" /> class.
        /// </summary>
        /// <param name="self">self.</param>
        /// <param name="ouders">De ouders van de persoon. .</param>
        /// <param name="reisdocumenten">De reisdocumenten die aan de persoon zijn verstrekt. .</param>
        /// <param name="kinderen">De kinderen van de persoon. .</param>
        /// <param name="partners">De actuele bij de ingeschreven persoon geregistreerde huwelijken en geregistreerd partnerschappen. Een beëindigd huwelijk of geregistreerd partnerschap wordt niet teruggegeven. .</param>
        /// <param name="partnerhistorie">partnerhistorie.</param>
        /// <param name="verblijfplaatshistorie">verblijfplaatshistorie.</param>
        /// <param name="verblijfstitelhistorie">verblijfstitelhistorie.</param>
        /// <param name="nationaliteitHistorie">nationaliteitHistorie.</param>
        /// <param name="adres">adres.</param>
        public IngeschrevenPersoonLinks(HalLink self = default(HalLink), List<HalLink> ouders = default(List<HalLink>), List<HalLink> reisdocumenten = default(List<HalLink>), List<HalLink> kinderen = default(List<HalLink>), List<HalLink> partners = default(List<HalLink>), HalLink partnerhistorie = default(HalLink), HalLink verblijfplaatshistorie = default(HalLink), HalLink verblijfstitelhistorie = default(HalLink), HalLink nationaliteitHistorie = default(HalLink), HalLink adres = default(HalLink))
        {
            this.Self = self;
            this.Ouders = ouders;
            this.Reisdocumenten = reisdocumenten;
            this.Kinderen = kinderen;
            this.Partners = partners;
            this.Partnerhistorie = partnerhistorie;
            this.Verblijfplaatshistorie = verblijfplaatshistorie;
            this.Verblijfstitelhistorie = verblijfstitelhistorie;
            this.NationaliteitHistorie = nationaliteitHistorie;
            this.Adres = adres;
        }
        
        /// <summary>
        /// Gets or Sets Self
        /// </summary>
        [DataMember(Name="self", EmitDefaultValue=false)]
        public HalLink Self { get; set; }

        /// <summary>
        /// De ouders van de persoon. 
        /// </summary>
        /// <value>De ouders van de persoon. </value>
        [DataMember(Name="ouders", EmitDefaultValue=false)]
        public List<HalLink> Ouders { get; set; }

        /// <summary>
        /// De reisdocumenten die aan de persoon zijn verstrekt. 
        /// </summary>
        /// <value>De reisdocumenten die aan de persoon zijn verstrekt. </value>
        [DataMember(Name="reisdocumenten", EmitDefaultValue=false)]
        public List<HalLink> Reisdocumenten { get; set; }

        /// <summary>
        /// De kinderen van de persoon. 
        /// </summary>
        /// <value>De kinderen van de persoon. </value>
        [DataMember(Name="kinderen", EmitDefaultValue=false)]
        public List<HalLink> Kinderen { get; set; }

        /// <summary>
        /// De actuele bij de ingeschreven persoon geregistreerde huwelijken en geregistreerd partnerschappen. Een beëindigd huwelijk of geregistreerd partnerschap wordt niet teruggegeven. 
        /// </summary>
        /// <value>De actuele bij de ingeschreven persoon geregistreerde huwelijken en geregistreerd partnerschappen. Een beëindigd huwelijk of geregistreerd partnerschap wordt niet teruggegeven. </value>
        [DataMember(Name="partners", EmitDefaultValue=false)]
        public List<HalLink> Partners { get; set; }

        /// <summary>
        /// Gets or Sets Partnerhistorie
        /// </summary>
        [DataMember(Name="partnerhistorie", EmitDefaultValue=false)]
        public HalLink Partnerhistorie { get; set; }

        /// <summary>
        /// Gets or Sets Verblijfplaatshistorie
        /// </summary>
        [DataMember(Name="verblijfplaatshistorie", EmitDefaultValue=false)]
        public HalLink Verblijfplaatshistorie { get; set; }

        /// <summary>
        /// Gets or Sets Verblijfstitelhistorie
        /// </summary>
        [DataMember(Name="verblijfstitelhistorie", EmitDefaultValue=false)]
        public HalLink Verblijfstitelhistorie { get; set; }

        /// <summary>
        /// Gets or Sets NationaliteitHistorie
        /// </summary>
        [DataMember(Name="nationaliteitHistorie", EmitDefaultValue=false)]
        public HalLink NationaliteitHistorie { get; set; }

        /// <summary>
        /// Gets or Sets Adres
        /// </summary>
        [DataMember(Name="adres", EmitDefaultValue=false)]
        public HalLink Adres { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IngeschrevenPersoonLinks {\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Ouders: ").Append(Ouders).Append("\n");
            sb.Append("  Reisdocumenten: ").Append(Reisdocumenten).Append("\n");
            sb.Append("  Kinderen: ").Append(Kinderen).Append("\n");
            sb.Append("  Partners: ").Append(Partners).Append("\n");
            sb.Append("  Partnerhistorie: ").Append(Partnerhistorie).Append("\n");
            sb.Append("  Verblijfplaatshistorie: ").Append(Verblijfplaatshistorie).Append("\n");
            sb.Append("  Verblijfstitelhistorie: ").Append(Verblijfstitelhistorie).Append("\n");
            sb.Append("  NationaliteitHistorie: ").Append(NationaliteitHistorie).Append("\n");
            sb.Append("  Adres: ").Append(Adres).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IngeschrevenPersoonLinks);
        }

        /// <summary>
        /// Returns true if IngeschrevenPersoonLinks instances are equal
        /// </summary>
        /// <param name="input">Instance of IngeschrevenPersoonLinks to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IngeschrevenPersoonLinks input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Self == input.Self ||
                    (this.Self != null &&
                    this.Self.Equals(input.Self))
                ) && 
                (
                    this.Ouders == input.Ouders ||
                    this.Ouders != null &&
                    input.Ouders != null &&
                    this.Ouders.SequenceEqual(input.Ouders)
                ) && 
                (
                    this.Reisdocumenten == input.Reisdocumenten ||
                    this.Reisdocumenten != null &&
                    input.Reisdocumenten != null &&
                    this.Reisdocumenten.SequenceEqual(input.Reisdocumenten)
                ) && 
                (
                    this.Kinderen == input.Kinderen ||
                    this.Kinderen != null &&
                    input.Kinderen != null &&
                    this.Kinderen.SequenceEqual(input.Kinderen)
                ) && 
                (
                    this.Partners == input.Partners ||
                    this.Partners != null &&
                    input.Partners != null &&
                    this.Partners.SequenceEqual(input.Partners)
                ) && 
                (
                    this.Partnerhistorie == input.Partnerhistorie ||
                    (this.Partnerhistorie != null &&
                    this.Partnerhistorie.Equals(input.Partnerhistorie))
                ) && 
                (
                    this.Verblijfplaatshistorie == input.Verblijfplaatshistorie ||
                    (this.Verblijfplaatshistorie != null &&
                    this.Verblijfplaatshistorie.Equals(input.Verblijfplaatshistorie))
                ) && 
                (
                    this.Verblijfstitelhistorie == input.Verblijfstitelhistorie ||
                    (this.Verblijfstitelhistorie != null &&
                    this.Verblijfstitelhistorie.Equals(input.Verblijfstitelhistorie))
                ) && 
                (
                    this.NationaliteitHistorie == input.NationaliteitHistorie ||
                    (this.NationaliteitHistorie != null &&
                    this.NationaliteitHistorie.Equals(input.NationaliteitHistorie))
                ) && 
                (
                    this.Adres == input.Adres ||
                    (this.Adres != null &&
                    this.Adres.Equals(input.Adres))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Self != null)
                    hashCode = hashCode * 59 + this.Self.GetHashCode();
                if (this.Ouders != null)
                    hashCode = hashCode * 59 + this.Ouders.GetHashCode();
                if (this.Reisdocumenten != null)
                    hashCode = hashCode * 59 + this.Reisdocumenten.GetHashCode();
                if (this.Kinderen != null)
                    hashCode = hashCode * 59 + this.Kinderen.GetHashCode();
                if (this.Partners != null)
                    hashCode = hashCode * 59 + this.Partners.GetHashCode();
                if (this.Partnerhistorie != null)
                    hashCode = hashCode * 59 + this.Partnerhistorie.GetHashCode();
                if (this.Verblijfplaatshistorie != null)
                    hashCode = hashCode * 59 + this.Verblijfplaatshistorie.GetHashCode();
                if (this.Verblijfstitelhistorie != null)
                    hashCode = hashCode * 59 + this.Verblijfstitelhistorie.GetHashCode();
                if (this.NationaliteitHistorie != null)
                    hashCode = hashCode * 59 + this.NationaliteitHistorie.GetHashCode();
                if (this.Adres != null)
                    hashCode = hashCode * 59 + this.Adres.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
