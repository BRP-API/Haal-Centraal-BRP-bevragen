/* 
 * Bevragingen ingeschreven personen
 *
 * API voor het ontsluiten van gegevens van ingeschreven personen en aanverwante gegevens uit de GBA en RNI. Met deze API worden de actuele gegevens van ingeschreven personen, hun kinderen, partners en ouders ontsloten. <br> Heeft een persoon bijvoorbeeld geen geldige nationaliteit, dan wordt nationaliteit niet geretourneerd. <br> Heeft een persoon een beëindigd partnerschap of huwelijk, dan wordt de partner niet geretourneerd. <br> <br> Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/tree/master/features) voor nadere toelichting. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Verblijfplaatshistorie
    /// </summary>
    [DataContract]
    public partial class Verblijfplaatshistorie :  IEquatable<Verblijfplaatshistorie>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Verblijfplaatshistorie" /> class.
        /// </summary>
        /// <param name="functieAdres">functieAdres.</param>
        /// <param name="huisletter">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken. a - z , A – Z.</param>
        /// <param name="huisnummer">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Alle natuurlijke getallen tussen 1 en 99999..</param>
        /// <param name="huisnummertoevoeging">Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. a - z , A - Z , 0 – 9.</param>
        /// <param name="aanduidingBijHuisnummer">aanduidingBijHuisnummer.</param>
        /// <param name="identificatiecodeNummeraanduiding">De unieke aanduiding van een NUMMERAANDUIDING. Combinatie van de viercijferige &#39;gemeentecode&#39; de tweecijferige &#39;objecttypecode&#39; en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig &#39;objectvolgnummer&#39;. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding. Combinatie van de viercijferige &#39;gemeentecode&#39; (volgens GBA tabel 33, Gemeententabel), de tweecijferige &#39;objecttypecode&#39; en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig &#39;objectvolgnummer&#39;. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding..</param>
        /// <param name="naamOpenbareRuimte">Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming Tekens gecodeerd volgens de UTF-8 standaard.</param>
        /// <param name="postcode">De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer.</param>
        /// <param name="woonplaatsnaam">De door het bevoegde gemeentelijke orgaan aan een WOONPLAATS toegekende benaming. Tekens gecodeerd volgens de UTF-8 standaard..</param>
        /// <param name="identificatiecodeAdresseerbaarObject">Een verblijfplaats kan een ligplaats, een standplaats of een verblijfsobject in een of meerdere panden zijn, waaraan respectievelijk een ligplaatsidentificatie, standplaatsidentificatie of verblijfsobjectidentificatie is toegekend. De Identificatiecode verblijfplaats is een combinatie van een viercijferige gemeentecode, een tweecijferige objecttypecode die aangeeft of de aanduiding een verblijfsobject (01), ligplaats (02) of standplaats (03) betreft en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig volgnummer. Combinatie van de viercijferige &#39;gemeentecode&#39; (volgens GBA tabel 33, Gemeententabel), de tweecijferige &#39;objecttypecode&#39; en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig &#39;objectvolgnummer&#39;..</param>
        /// <param name="indicatieVestigingVanuitBuitenland">Indicatie waarmee aangegeven wordt of de ingeschreven persoon zich vanuit het buitenland heeftingeschreven. Deze indicatie heeft als rol om aan te geven dat iemand zich vanuit het buitenland gevestigd heeft. Deze indicator wordt altijd meegeleverd als de waarde true is. Als de waarde false is wordt de indicator niet meegeleverd..</param>
        /// <param name="locatiebeschrijving">Een geheel of gedeeltelijke omschrijving van de ligging van een object..</param>
        /// <param name="straatnaam">De officiële straatnaam zoals door het bevoegd gemeentelijk orgaan is vastgesteld, zo nodig ingekort conform de specificaties van de NEN 5825. alle alfanumrieke tekens.</param>
        /// <param name="vanuitVertrokkenOnbekendWaarheen">Indicatie waarmee aangegeven wordt dat de persoon is teruggekeerd uit een situatie van vertrokken onbekend waarheen.</param>
        /// <param name="datumAanvangAdreshouding">datumAanvangAdreshouding.</param>
        /// <param name="datumIngangGeldigheid">datumIngangGeldigheid.</param>
        /// <param name="datumInschrijvingInGemeente">datumInschrijvingInGemeente.</param>
        /// <param name="datumVestigingInNederland">datumVestigingInNederland.</param>
        /// <param name="gemeenteVanInschrijving">gemeenteVanInschrijving.</param>
        /// <param name="landVanwaarIngeschreven">landVanwaarIngeschreven.</param>
        /// <param name="verblijfBuitenland">verblijfBuitenland.</param>
        /// <param name="inOnderzoek">inOnderzoek.</param>
        /// <param name="datumTot">datumTot.</param>
        /// <param name="geheimhoudingPersoonsgegevens">Een aanduiding die aangeeft dat gegevens wel of niet verstrekt mogen worden. Indien true: op verzoek van deze persoon is het verstrekken van gegevens over deze persoon aan bepaalde derden niet toegestaan..</param>
        public Verblijfplaatshistorie(SoortAdresEnum functieAdres = default(SoortAdresEnum), string huisletter = default(string), int huisnummer = default(int), string huisnummertoevoeging = default(string), AanduidingBijHuisnummerEnum aanduidingBijHuisnummer = default(AanduidingBijHuisnummerEnum), string identificatiecodeNummeraanduiding = default(string), string naamOpenbareRuimte = default(string), string postcode = default(string), string woonplaatsnaam = default(string), string identificatiecodeAdresseerbaarObject = default(string), bool indicatieVestigingVanuitBuitenland = default(bool), string locatiebeschrijving = default(string), string straatnaam = default(string), bool vanuitVertrokkenOnbekendWaarheen = default(bool), DatumOnvolledig datumAanvangAdreshouding = default(DatumOnvolledig), DatumOnvolledig datumIngangGeldigheid = default(DatumOnvolledig), DatumOnvolledig datumInschrijvingInGemeente = default(DatumOnvolledig), DatumOnvolledig datumVestigingInNederland = default(DatumOnvolledig), Waardetabel gemeenteVanInschrijving = default(Waardetabel), Waardetabel landVanwaarIngeschreven = default(Waardetabel), VerblijfBuitenland verblijfBuitenland = default(VerblijfBuitenland), VerblijfplaatsInOnderzoek inOnderzoek = default(VerblijfplaatsInOnderzoek), DatumOnvolledig datumTot = default(DatumOnvolledig), bool geheimhoudingPersoonsgegevens = default(bool))
        {
            this.FunctieAdres = functieAdres;
            this.Huisletter = huisletter;
            this.Huisnummer = huisnummer;
            this.Huisnummertoevoeging = huisnummertoevoeging;
            this.AanduidingBijHuisnummer = aanduidingBijHuisnummer;
            this.IdentificatiecodeNummeraanduiding = identificatiecodeNummeraanduiding;
            this.NaamOpenbareRuimte = naamOpenbareRuimte;
            this.Postcode = postcode;
            this.Woonplaatsnaam = woonplaatsnaam;
            this.IdentificatiecodeAdresseerbaarObject = identificatiecodeAdresseerbaarObject;
            this.IndicatieVestigingVanuitBuitenland = indicatieVestigingVanuitBuitenland;
            this.Locatiebeschrijving = locatiebeschrijving;
            this.Straatnaam = straatnaam;
            this.VanuitVertrokkenOnbekendWaarheen = vanuitVertrokkenOnbekendWaarheen;
            this.DatumAanvangAdreshouding = datumAanvangAdreshouding;
            this.DatumIngangGeldigheid = datumIngangGeldigheid;
            this.DatumInschrijvingInGemeente = datumInschrijvingInGemeente;
            this.DatumVestigingInNederland = datumVestigingInNederland;
            this.GemeenteVanInschrijving = gemeenteVanInschrijving;
            this.LandVanwaarIngeschreven = landVanwaarIngeschreven;
            this.VerblijfBuitenland = verblijfBuitenland;
            this.InOnderzoek = inOnderzoek;
            this.DatumTot = datumTot;
            this.GeheimhoudingPersoonsgegevens = geheimhoudingPersoonsgegevens;
        }
        
        /// <summary>
        /// Gets or Sets FunctieAdres
        /// </summary>
        [DataMember(Name="functieAdres", EmitDefaultValue=false)]
        public SoortAdresEnum FunctieAdres { get; set; }

        /// <summary>
        /// Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken. a - z , A – Z
        /// </summary>
        /// <value>Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende toevoeging aan een huisnummer in de vorm van een alfanumeriek teken. a - z , A – Z</value>
        [DataMember(Name="huisletter", EmitDefaultValue=false)]
        public string Huisletter { get; set; }

        /// <summary>
        /// Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Alle natuurlijke getallen tussen 1 en 99999.
        /// </summary>
        /// <value>Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nummering. Alle natuurlijke getallen tussen 1 en 99999.</value>
        [DataMember(Name="huisnummer", EmitDefaultValue=false)]
        public int Huisnummer { get; set; }

        /// <summary>
        /// Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. a - z , A - Z , 0 – 9
        /// </summary>
        /// <value>Een door of namens het bevoegd gemeentelijk orgaan ten aanzien van een adresseerbaar object toegekende nadere toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter. a - z , A - Z , 0 – 9</value>
        [DataMember(Name="huisnummertoevoeging", EmitDefaultValue=false)]
        public string Huisnummertoevoeging { get; set; }

        /// <summary>
        /// Gets or Sets AanduidingBijHuisnummer
        /// </summary>
        [DataMember(Name="aanduidingBijHuisnummer", EmitDefaultValue=false)]
        public AanduidingBijHuisnummerEnum AanduidingBijHuisnummer { get; set; }

        /// <summary>
        /// De unieke aanduiding van een NUMMERAANDUIDING. Combinatie van de viercijferige &#39;gemeentecode&#39; de tweecijferige &#39;objecttypecode&#39; en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig &#39;objectvolgnummer&#39;. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding. Combinatie van de viercijferige &#39;gemeentecode&#39; (volgens GBA tabel 33, Gemeententabel), de tweecijferige &#39;objecttypecode&#39; en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig &#39;objectvolgnummer&#39;. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding.
        /// </summary>
        /// <value>De unieke aanduiding van een NUMMERAANDUIDING. Combinatie van de viercijferige &#39;gemeentecode&#39; de tweecijferige &#39;objecttypecode&#39; en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig &#39;objectvolgnummer&#39;. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding. Combinatie van de viercijferige &#39;gemeentecode&#39; (volgens GBA tabel 33, Gemeententabel), de tweecijferige &#39;objecttypecode&#39; en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig &#39;objectvolgnummer&#39;. De objecttypecode kent in de BAG de volgende waarde:20 nummeraanduiding.</value>
        [DataMember(Name="identificatiecodeNummeraanduiding", EmitDefaultValue=false)]
        public string IdentificatiecodeNummeraanduiding { get; set; }

        /// <summary>
        /// Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming Tekens gecodeerd volgens de UTF-8 standaard
        /// </summary>
        /// <value>Een door het bevoegde gemeentelijke orgaan aan een OPENBARE RUIMTE toegekende benaming Tekens gecodeerd volgens de UTF-8 standaard</value>
        [DataMember(Name="naamOpenbareRuimte", EmitDefaultValue=false)]
        public string NaamOpenbareRuimte { get; set; }

        /// <summary>
        /// De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer
        /// </summary>
        /// <value>De door PostNL vastgestelde code behorende bij een bepaalde combinatie van een naam van een woonplaats, naam van een openbare ruimte en een huisnummer</value>
        [DataMember(Name="postcode", EmitDefaultValue=false)]
        public string Postcode { get; set; }

        /// <summary>
        /// De door het bevoegde gemeentelijke orgaan aan een WOONPLAATS toegekende benaming. Tekens gecodeerd volgens de UTF-8 standaard.
        /// </summary>
        /// <value>De door het bevoegde gemeentelijke orgaan aan een WOONPLAATS toegekende benaming. Tekens gecodeerd volgens de UTF-8 standaard.</value>
        [DataMember(Name="woonplaatsnaam", EmitDefaultValue=false)]
        public string Woonplaatsnaam { get; set; }

        /// <summary>
        /// Een verblijfplaats kan een ligplaats, een standplaats of een verblijfsobject in een of meerdere panden zijn, waaraan respectievelijk een ligplaatsidentificatie, standplaatsidentificatie of verblijfsobjectidentificatie is toegekend. De Identificatiecode verblijfplaats is een combinatie van een viercijferige gemeentecode, een tweecijferige objecttypecode die aangeeft of de aanduiding een verblijfsobject (01), ligplaats (02) of standplaats (03) betreft en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig volgnummer. Combinatie van de viercijferige &#39;gemeentecode&#39; (volgens GBA tabel 33, Gemeententabel), de tweecijferige &#39;objecttypecode&#39; en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig &#39;objectvolgnummer&#39;.
        /// </summary>
        /// <value>Een verblijfplaats kan een ligplaats, een standplaats of een verblijfsobject in een of meerdere panden zijn, waaraan respectievelijk een ligplaatsidentificatie, standplaatsidentificatie of verblijfsobjectidentificatie is toegekend. De Identificatiecode verblijfplaats is een combinatie van een viercijferige gemeentecode, een tweecijferige objecttypecode die aangeeft of de aanduiding een verblijfsobject (01), ligplaats (02) of standplaats (03) betreft en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig volgnummer. Combinatie van de viercijferige &#39;gemeentecode&#39; (volgens GBA tabel 33, Gemeententabel), de tweecijferige &#39;objecttypecode&#39; en een voor het betreffende objecttype binnen een gemeente uniek tiencijferig &#39;objectvolgnummer&#39;.</value>
        [DataMember(Name="identificatiecodeAdresseerbaarObject", EmitDefaultValue=false)]
        public string IdentificatiecodeAdresseerbaarObject { get; set; }

        /// <summary>
        /// Indicatie waarmee aangegeven wordt of de ingeschreven persoon zich vanuit het buitenland heeftingeschreven. Deze indicatie heeft als rol om aan te geven dat iemand zich vanuit het buitenland gevestigd heeft. Deze indicator wordt altijd meegeleverd als de waarde true is. Als de waarde false is wordt de indicator niet meegeleverd.
        /// </summary>
        /// <value>Indicatie waarmee aangegeven wordt of de ingeschreven persoon zich vanuit het buitenland heeftingeschreven. Deze indicatie heeft als rol om aan te geven dat iemand zich vanuit het buitenland gevestigd heeft. Deze indicator wordt altijd meegeleverd als de waarde true is. Als de waarde false is wordt de indicator niet meegeleverd.</value>
        [DataMember(Name="indicatieVestigingVanuitBuitenland", EmitDefaultValue=false)]
        public bool IndicatieVestigingVanuitBuitenland { get; set; }

        /// <summary>
        /// Een geheel of gedeeltelijke omschrijving van de ligging van een object.
        /// </summary>
        /// <value>Een geheel of gedeeltelijke omschrijving van de ligging van een object.</value>
        [DataMember(Name="locatiebeschrijving", EmitDefaultValue=false)]
        public string Locatiebeschrijving { get; set; }

        /// <summary>
        /// De officiële straatnaam zoals door het bevoegd gemeentelijk orgaan is vastgesteld, zo nodig ingekort conform de specificaties van de NEN 5825. alle alfanumrieke tekens
        /// </summary>
        /// <value>De officiële straatnaam zoals door het bevoegd gemeentelijk orgaan is vastgesteld, zo nodig ingekort conform de specificaties van de NEN 5825. alle alfanumrieke tekens</value>
        [DataMember(Name="straatnaam", EmitDefaultValue=false)]
        public string Straatnaam { get; set; }

        /// <summary>
        /// Indicatie waarmee aangegeven wordt dat de persoon is teruggekeerd uit een situatie van vertrokken onbekend waarheen
        /// </summary>
        /// <value>Indicatie waarmee aangegeven wordt dat de persoon is teruggekeerd uit een situatie van vertrokken onbekend waarheen</value>
        [DataMember(Name="vanuitVertrokkenOnbekendWaarheen", EmitDefaultValue=false)]
        public bool VanuitVertrokkenOnbekendWaarheen { get; set; }

        /// <summary>
        /// Gets or Sets DatumAanvangAdreshouding
        /// </summary>
        [DataMember(Name="datumAanvangAdreshouding", EmitDefaultValue=false)]
        public DatumOnvolledig DatumAanvangAdreshouding { get; set; }

        /// <summary>
        /// Gets or Sets DatumIngangGeldigheid
        /// </summary>
        [DataMember(Name="datumIngangGeldigheid", EmitDefaultValue=false)]
        public DatumOnvolledig DatumIngangGeldigheid { get; set; }

        /// <summary>
        /// Gets or Sets DatumInschrijvingInGemeente
        /// </summary>
        [DataMember(Name="datumInschrijvingInGemeente", EmitDefaultValue=false)]
        public DatumOnvolledig DatumInschrijvingInGemeente { get; set; }

        /// <summary>
        /// Gets or Sets DatumVestigingInNederland
        /// </summary>
        [DataMember(Name="datumVestigingInNederland", EmitDefaultValue=false)]
        public DatumOnvolledig DatumVestigingInNederland { get; set; }

        /// <summary>
        /// Gets or Sets GemeenteVanInschrijving
        /// </summary>
        [DataMember(Name="gemeenteVanInschrijving", EmitDefaultValue=false)]
        public Waardetabel GemeenteVanInschrijving { get; set; }

        /// <summary>
        /// Gets or Sets LandVanwaarIngeschreven
        /// </summary>
        [DataMember(Name="landVanwaarIngeschreven", EmitDefaultValue=false)]
        public Waardetabel LandVanwaarIngeschreven { get; set; }

        /// <summary>
        /// Gets or Sets VerblijfBuitenland
        /// </summary>
        [DataMember(Name="verblijfBuitenland", EmitDefaultValue=false)]
        public VerblijfBuitenland VerblijfBuitenland { get; set; }

        /// <summary>
        /// Gets or Sets InOnderzoek
        /// </summary>
        [DataMember(Name="inOnderzoek", EmitDefaultValue=false)]
        public VerblijfplaatsInOnderzoek InOnderzoek { get; set; }

        /// <summary>
        /// Gets or Sets DatumTot
        /// </summary>
        [DataMember(Name="datumTot", EmitDefaultValue=false)]
        public DatumOnvolledig DatumTot { get; set; }

        /// <summary>
        /// Een aanduiding die aangeeft dat gegevens wel of niet verstrekt mogen worden. Indien true: op verzoek van deze persoon is het verstrekken van gegevens over deze persoon aan bepaalde derden niet toegestaan.
        /// </summary>
        /// <value>Een aanduiding die aangeeft dat gegevens wel of niet verstrekt mogen worden. Indien true: op verzoek van deze persoon is het verstrekken van gegevens over deze persoon aan bepaalde derden niet toegestaan.</value>
        [DataMember(Name="geheimhoudingPersoonsgegevens", EmitDefaultValue=false)]
        public bool GeheimhoudingPersoonsgegevens { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Verblijfplaatshistorie {\n");
            sb.Append("  FunctieAdres: ").Append(FunctieAdres).Append("\n");
            sb.Append("  Huisletter: ").Append(Huisletter).Append("\n");
            sb.Append("  Huisnummer: ").Append(Huisnummer).Append("\n");
            sb.Append("  Huisnummertoevoeging: ").Append(Huisnummertoevoeging).Append("\n");
            sb.Append("  AanduidingBijHuisnummer: ").Append(AanduidingBijHuisnummer).Append("\n");
            sb.Append("  IdentificatiecodeNummeraanduiding: ").Append(IdentificatiecodeNummeraanduiding).Append("\n");
            sb.Append("  NaamOpenbareRuimte: ").Append(NaamOpenbareRuimte).Append("\n");
            sb.Append("  Postcode: ").Append(Postcode).Append("\n");
            sb.Append("  Woonplaatsnaam: ").Append(Woonplaatsnaam).Append("\n");
            sb.Append("  IdentificatiecodeAdresseerbaarObject: ").Append(IdentificatiecodeAdresseerbaarObject).Append("\n");
            sb.Append("  IndicatieVestigingVanuitBuitenland: ").Append(IndicatieVestigingVanuitBuitenland).Append("\n");
            sb.Append("  Locatiebeschrijving: ").Append(Locatiebeschrijving).Append("\n");
            sb.Append("  Straatnaam: ").Append(Straatnaam).Append("\n");
            sb.Append("  VanuitVertrokkenOnbekendWaarheen: ").Append(VanuitVertrokkenOnbekendWaarheen).Append("\n");
            sb.Append("  DatumAanvangAdreshouding: ").Append(DatumAanvangAdreshouding).Append("\n");
            sb.Append("  DatumIngangGeldigheid: ").Append(DatumIngangGeldigheid).Append("\n");
            sb.Append("  DatumInschrijvingInGemeente: ").Append(DatumInschrijvingInGemeente).Append("\n");
            sb.Append("  DatumVestigingInNederland: ").Append(DatumVestigingInNederland).Append("\n");
            sb.Append("  GemeenteVanInschrijving: ").Append(GemeenteVanInschrijving).Append("\n");
            sb.Append("  LandVanwaarIngeschreven: ").Append(LandVanwaarIngeschreven).Append("\n");
            sb.Append("  VerblijfBuitenland: ").Append(VerblijfBuitenland).Append("\n");
            sb.Append("  InOnderzoek: ").Append(InOnderzoek).Append("\n");
            sb.Append("  DatumTot: ").Append(DatumTot).Append("\n");
            sb.Append("  GeheimhoudingPersoonsgegevens: ").Append(GeheimhoudingPersoonsgegevens).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Verblijfplaatshistorie);
        }

        /// <summary>
        /// Returns true if Verblijfplaatshistorie instances are equal
        /// </summary>
        /// <param name="input">Instance of Verblijfplaatshistorie to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Verblijfplaatshistorie input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FunctieAdres == input.FunctieAdres ||
                    (this.FunctieAdres != null &&
                    this.FunctieAdres.Equals(input.FunctieAdres))
                ) && 
                (
                    this.Huisletter == input.Huisletter ||
                    (this.Huisletter != null &&
                    this.Huisletter.Equals(input.Huisletter))
                ) && 
                (
                    this.Huisnummer == input.Huisnummer ||
                    (this.Huisnummer != null &&
                    this.Huisnummer.Equals(input.Huisnummer))
                ) && 
                (
                    this.Huisnummertoevoeging == input.Huisnummertoevoeging ||
                    (this.Huisnummertoevoeging != null &&
                    this.Huisnummertoevoeging.Equals(input.Huisnummertoevoeging))
                ) && 
                (
                    this.AanduidingBijHuisnummer == input.AanduidingBijHuisnummer ||
                    (this.AanduidingBijHuisnummer != null &&
                    this.AanduidingBijHuisnummer.Equals(input.AanduidingBijHuisnummer))
                ) && 
                (
                    this.IdentificatiecodeNummeraanduiding == input.IdentificatiecodeNummeraanduiding ||
                    (this.IdentificatiecodeNummeraanduiding != null &&
                    this.IdentificatiecodeNummeraanduiding.Equals(input.IdentificatiecodeNummeraanduiding))
                ) && 
                (
                    this.NaamOpenbareRuimte == input.NaamOpenbareRuimte ||
                    (this.NaamOpenbareRuimte != null &&
                    this.NaamOpenbareRuimte.Equals(input.NaamOpenbareRuimte))
                ) && 
                (
                    this.Postcode == input.Postcode ||
                    (this.Postcode != null &&
                    this.Postcode.Equals(input.Postcode))
                ) && 
                (
                    this.Woonplaatsnaam == input.Woonplaatsnaam ||
                    (this.Woonplaatsnaam != null &&
                    this.Woonplaatsnaam.Equals(input.Woonplaatsnaam))
                ) && 
                (
                    this.IdentificatiecodeAdresseerbaarObject == input.IdentificatiecodeAdresseerbaarObject ||
                    (this.IdentificatiecodeAdresseerbaarObject != null &&
                    this.IdentificatiecodeAdresseerbaarObject.Equals(input.IdentificatiecodeAdresseerbaarObject))
                ) && 
                (
                    this.IndicatieVestigingVanuitBuitenland == input.IndicatieVestigingVanuitBuitenland ||
                    (this.IndicatieVestigingVanuitBuitenland != null &&
                    this.IndicatieVestigingVanuitBuitenland.Equals(input.IndicatieVestigingVanuitBuitenland))
                ) && 
                (
                    this.Locatiebeschrijving == input.Locatiebeschrijving ||
                    (this.Locatiebeschrijving != null &&
                    this.Locatiebeschrijving.Equals(input.Locatiebeschrijving))
                ) && 
                (
                    this.Straatnaam == input.Straatnaam ||
                    (this.Straatnaam != null &&
                    this.Straatnaam.Equals(input.Straatnaam))
                ) && 
                (
                    this.VanuitVertrokkenOnbekendWaarheen == input.VanuitVertrokkenOnbekendWaarheen ||
                    (this.VanuitVertrokkenOnbekendWaarheen != null &&
                    this.VanuitVertrokkenOnbekendWaarheen.Equals(input.VanuitVertrokkenOnbekendWaarheen))
                ) && 
                (
                    this.DatumAanvangAdreshouding == input.DatumAanvangAdreshouding ||
                    (this.DatumAanvangAdreshouding != null &&
                    this.DatumAanvangAdreshouding.Equals(input.DatumAanvangAdreshouding))
                ) && 
                (
                    this.DatumIngangGeldigheid == input.DatumIngangGeldigheid ||
                    (this.DatumIngangGeldigheid != null &&
                    this.DatumIngangGeldigheid.Equals(input.DatumIngangGeldigheid))
                ) && 
                (
                    this.DatumInschrijvingInGemeente == input.DatumInschrijvingInGemeente ||
                    (this.DatumInschrijvingInGemeente != null &&
                    this.DatumInschrijvingInGemeente.Equals(input.DatumInschrijvingInGemeente))
                ) && 
                (
                    this.DatumVestigingInNederland == input.DatumVestigingInNederland ||
                    (this.DatumVestigingInNederland != null &&
                    this.DatumVestigingInNederland.Equals(input.DatumVestigingInNederland))
                ) && 
                (
                    this.GemeenteVanInschrijving == input.GemeenteVanInschrijving ||
                    (this.GemeenteVanInschrijving != null &&
                    this.GemeenteVanInschrijving.Equals(input.GemeenteVanInschrijving))
                ) && 
                (
                    this.LandVanwaarIngeschreven == input.LandVanwaarIngeschreven ||
                    (this.LandVanwaarIngeschreven != null &&
                    this.LandVanwaarIngeschreven.Equals(input.LandVanwaarIngeschreven))
                ) && 
                (
                    this.VerblijfBuitenland == input.VerblijfBuitenland ||
                    (this.VerblijfBuitenland != null &&
                    this.VerblijfBuitenland.Equals(input.VerblijfBuitenland))
                ) && 
                (
                    this.InOnderzoek == input.InOnderzoek ||
                    (this.InOnderzoek != null &&
                    this.InOnderzoek.Equals(input.InOnderzoek))
                ) && 
                (
                    this.DatumTot == input.DatumTot ||
                    (this.DatumTot != null &&
                    this.DatumTot.Equals(input.DatumTot))
                ) && 
                (
                    this.GeheimhoudingPersoonsgegevens == input.GeheimhoudingPersoonsgegevens ||
                    (this.GeheimhoudingPersoonsgegevens != null &&
                    this.GeheimhoudingPersoonsgegevens.Equals(input.GeheimhoudingPersoonsgegevens))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FunctieAdres != null)
                    hashCode = hashCode * 59 + this.FunctieAdres.GetHashCode();
                if (this.Huisletter != null)
                    hashCode = hashCode * 59 + this.Huisletter.GetHashCode();
                if (this.Huisnummer != null)
                    hashCode = hashCode * 59 + this.Huisnummer.GetHashCode();
                if (this.Huisnummertoevoeging != null)
                    hashCode = hashCode * 59 + this.Huisnummertoevoeging.GetHashCode();
                if (this.AanduidingBijHuisnummer != null)
                    hashCode = hashCode * 59 + this.AanduidingBijHuisnummer.GetHashCode();
                if (this.IdentificatiecodeNummeraanduiding != null)
                    hashCode = hashCode * 59 + this.IdentificatiecodeNummeraanduiding.GetHashCode();
                if (this.NaamOpenbareRuimte != null)
                    hashCode = hashCode * 59 + this.NaamOpenbareRuimte.GetHashCode();
                if (this.Postcode != null)
                    hashCode = hashCode * 59 + this.Postcode.GetHashCode();
                if (this.Woonplaatsnaam != null)
                    hashCode = hashCode * 59 + this.Woonplaatsnaam.GetHashCode();
                if (this.IdentificatiecodeAdresseerbaarObject != null)
                    hashCode = hashCode * 59 + this.IdentificatiecodeAdresseerbaarObject.GetHashCode();
                if (this.IndicatieVestigingVanuitBuitenland != null)
                    hashCode = hashCode * 59 + this.IndicatieVestigingVanuitBuitenland.GetHashCode();
                if (this.Locatiebeschrijving != null)
                    hashCode = hashCode * 59 + this.Locatiebeschrijving.GetHashCode();
                if (this.Straatnaam != null)
                    hashCode = hashCode * 59 + this.Straatnaam.GetHashCode();
                if (this.VanuitVertrokkenOnbekendWaarheen != null)
                    hashCode = hashCode * 59 + this.VanuitVertrokkenOnbekendWaarheen.GetHashCode();
                if (this.DatumAanvangAdreshouding != null)
                    hashCode = hashCode * 59 + this.DatumAanvangAdreshouding.GetHashCode();
                if (this.DatumIngangGeldigheid != null)
                    hashCode = hashCode * 59 + this.DatumIngangGeldigheid.GetHashCode();
                if (this.DatumInschrijvingInGemeente != null)
                    hashCode = hashCode * 59 + this.DatumInschrijvingInGemeente.GetHashCode();
                if (this.DatumVestigingInNederland != null)
                    hashCode = hashCode * 59 + this.DatumVestigingInNederland.GetHashCode();
                if (this.GemeenteVanInschrijving != null)
                    hashCode = hashCode * 59 + this.GemeenteVanInschrijving.GetHashCode();
                if (this.LandVanwaarIngeschreven != null)
                    hashCode = hashCode * 59 + this.LandVanwaarIngeschreven.GetHashCode();
                if (this.VerblijfBuitenland != null)
                    hashCode = hashCode * 59 + this.VerblijfBuitenland.GetHashCode();
                if (this.InOnderzoek != null)
                    hashCode = hashCode * 59 + this.InOnderzoek.GetHashCode();
                if (this.DatumTot != null)
                    hashCode = hashCode * 59 + this.DatumTot.GetHashCode();
                if (this.GeheimhoudingPersoonsgegevens != null)
                    hashCode = hashCode * 59 + this.GeheimhoudingPersoonsgegevens.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Huisletter (string) maxLength
            if(this.Huisletter != null && this.Huisletter.Length > 1)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Huisletter, length must be less than 1.", new [] { "Huisletter" });
            }

            
            // Huisletter (string) pattern
            Regex regexHuisletter = new Regex(@"^[A-Z,a-z]$", RegexOptions.CultureInvariant);
            if (false == regexHuisletter.Match(this.Huisletter).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Huisletter, must match a pattern of " + regexHuisletter, new [] { "Huisletter" });
            }


            
            // Huisnummer (int) maximum
            if(this.Huisnummer > (int)99999)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Huisnummer, must be a value less than or equal to 99999.", new [] { "Huisnummer" });
            }

            // Huisnummertoevoeging (string) maxLength
            if(this.Huisnummertoevoeging != null && this.Huisnummertoevoeging.Length > 4)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Huisnummertoevoeging, length must be less than 4.", new [] { "Huisnummertoevoeging" });
            }

            
            // Huisnummertoevoeging (string) pattern
            Regex regexHuisnummertoevoeging = new Regex(@"^[a-zA-Z0-9]{1,4}$", RegexOptions.CultureInvariant);
            if (false == regexHuisnummertoevoeging.Match(this.Huisnummertoevoeging).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Huisnummertoevoeging, must match a pattern of " + regexHuisnummertoevoeging, new [] { "Huisnummertoevoeging" });
            }

            // IdentificatiecodeNummeraanduiding (string) maxLength
            if(this.IdentificatiecodeNummeraanduiding != null && this.IdentificatiecodeNummeraanduiding.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdentificatiecodeNummeraanduiding, length must be less than 16.", new [] { "IdentificatiecodeNummeraanduiding" });
            }

            
            // NaamOpenbareRuimte (string) maxLength
            if(this.NaamOpenbareRuimte != null && this.NaamOpenbareRuimte.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for NaamOpenbareRuimte, length must be less than 80.", new [] { "NaamOpenbareRuimte" });
            }

            

            
            // Postcode (string) pattern
            Regex regexPostcode = new Regex(@"^[1-9]{1}[0-9]{3}[A-Z]{2}$", RegexOptions.CultureInvariant);
            if (false == regexPostcode.Match(this.Postcode).Success)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Postcode, must match a pattern of " + regexPostcode, new [] { "Postcode" });
            }

            // Woonplaatsnaam (string) maxLength
            if(this.Woonplaatsnaam != null && this.Woonplaatsnaam.Length > 80)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Woonplaatsnaam, length must be less than 80.", new [] { "Woonplaatsnaam" });
            }

            
            // IdentificatiecodeAdresseerbaarObject (string) maxLength
            if(this.IdentificatiecodeAdresseerbaarObject != null && this.IdentificatiecodeAdresseerbaarObject.Length > 16)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for IdentificatiecodeAdresseerbaarObject, length must be less than 16.", new [] { "IdentificatiecodeAdresseerbaarObject" });
            }

            
            // Locatiebeschrijving (string) maxLength
            if(this.Locatiebeschrijving != null && this.Locatiebeschrijving.Length > 35)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Locatiebeschrijving, length must be less than 35.", new [] { "Locatiebeschrijving" });
            }

            
            // Straatnaam (string) maxLength
            if(this.Straatnaam != null && this.Straatnaam.Length > 24)
            {
                yield return new System.ComponentModel.DataAnnotations.ValidationResult("Invalid value for Straatnaam, length must be less than 24.", new [] { "Straatnaam" });
            }

            
            yield break;
        }
    }

}
