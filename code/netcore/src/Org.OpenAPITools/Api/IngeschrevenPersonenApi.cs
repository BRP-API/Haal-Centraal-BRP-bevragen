/* 
 * Bevragen Ingeschreven Personen
 *
 * API voor het bevragen van ingeschreven personen uit de basisregistratie personen (BRP), inclusief de registratie niet-ingezeten (RNI). Met deze API kun je personen zoeken en actuele gegevens over personen, kinderen, partners en ouders raadplegen.  Gegevens die er niet zijn of niet actueel zijn krijg je niet terug. Heeft een persoon bijvoorbeeld geen geldige nationaliteit, en alleen een beëindigd partnerschap, dan krijg je geen gegevens over nationaliteit en partner.  Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/tree/v1.0.0/features) voor nadere toelichting. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIngeschrevenPersonenApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Vindt personen
        /// </summary>
        /// <remarks>
        /// Zoek personen met één van de onderstaande verplichte combinaties van parameters en vul ze evt. aan met parameters uit de andere combinaties.   Default krijg je personen terug die nog in leven zijn, tenzij je de inclusiefoverledenpersonen&#x3D;true opgeeft.   Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/fields_extensie.feature)   Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature)   1.  Persoon     -  geboorte__datum     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   2.  Persoon     -  verblijfplaats__gemeenteVanInschrijving     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   3.  Persoon     -  burgerservicenummer   4.  Postcode     -  verblijfplaats__postcode     -  verblijfplaats__huisnummer   5.  Straat     -  verblijfplaats__straat (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) )     -  verblijfplaats__gemeenteVanInschrijving     -  verblijfplaats__huisnummer   6.  Adres     -  verblijfplaats__nummeraanduidingIdentificatie 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <param name="burgerservicenummer">Uniek persoonsnummer.  (optional)</param>
        /// <param name="geboorteDatum">Je kunt alleen zoeken met een volledig geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/parametervalidatie.feature)  (optional)</param>
        /// <param name="geboortePlaats">Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="geslachtsaanduiding">Geeft aan dat de persoon een man of een vrouw is, of dat het geslacht (nog) onbekend is.  (optional)</param>
        /// <param name="inclusiefOverledenPersonen">Als je ook overleden personen in het antwoord wilt, geef dan de parameter inclusiefOverledenPersonen op met waarde True.  Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/overleden_personen.feature)  (optional)</param>
        /// <param name="naamGeslachtsnaam">De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="naamVoorvoegsel">Deel van de geslachtsnaam dat vooraf gaat aan de rest van de geslachtsnaam. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="naamVoornamen">De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="verblijfplaatsGemeenteVanInschrijving">Een code die aangeeft in welke gemeente de persoon woont, of de laatste gemeente waar de persoon heeft gewoond, of de gemeente waar de persoon voor het eerst is ingeschreven.  (optional)</param>
        /// <param name="verblijfplaatsHuisletter">Een toevoeging aan een huisnummer in de vorm van een letter die door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsHuisnummer">Een nummer dat door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsHuisnummertoevoeging">Een toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter die door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsNummeraanduidingIdentificatie">Unieke identificatie van een nummeraanduiding (en het bijbehorende adres) in de BAG.  (optional)</param>
        /// <param name="verblijfplaatsStraat">Een naam die door de gemeente aan een openbare ruimte is gegeven. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).  (optional)</param>
        /// <param name="verblijfplaatsPostcode">De door PostNL vastgestelde code die bij een bepaalde combinatie van een straatnaam en een huisnummer hoort.  (optional)</param>
        /// <returns>IngeschrevenPersoonHalCollectie</returns>
        IngeschrevenPersoonHalCollectie GetIngeschrevenPersonen (string expand = default(string), string fields = default(string), List<string> burgerservicenummer = default(List<string>), DateTime? geboorteDatum = default(DateTime?), string geboortePlaats = default(string), GeslachtEnum? geslachtsaanduiding = default(GeslachtEnum?), bool? inclusiefOverledenPersonen = default(bool?), string naamGeslachtsnaam = default(string), string naamVoorvoegsel = default(string), string naamVoornamen = default(string), string verblijfplaatsGemeenteVanInschrijving = default(string), string verblijfplaatsHuisletter = default(string), int? verblijfplaatsHuisnummer = default(int?), string verblijfplaatsHuisnummertoevoeging = default(string), string verblijfplaatsNummeraanduidingIdentificatie = default(string), string verblijfplaatsStraat = default(string), string verblijfplaatsPostcode = default(string));

        /// <summary>
        /// Vindt personen
        /// </summary>
        /// <remarks>
        /// Zoek personen met één van de onderstaande verplichte combinaties van parameters en vul ze evt. aan met parameters uit de andere combinaties.   Default krijg je personen terug die nog in leven zijn, tenzij je de inclusiefoverledenpersonen&#x3D;true opgeeft.   Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/fields_extensie.feature)   Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature)   1.  Persoon     -  geboorte__datum     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   2.  Persoon     -  verblijfplaats__gemeenteVanInschrijving     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   3.  Persoon     -  burgerservicenummer   4.  Postcode     -  verblijfplaats__postcode     -  verblijfplaats__huisnummer   5.  Straat     -  verblijfplaats__straat (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) )     -  verblijfplaats__gemeenteVanInschrijving     -  verblijfplaats__huisnummer   6.  Adres     -  verblijfplaats__nummeraanduidingIdentificatie 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <param name="burgerservicenummer">Uniek persoonsnummer.  (optional)</param>
        /// <param name="geboorteDatum">Je kunt alleen zoeken met een volledig geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/parametervalidatie.feature)  (optional)</param>
        /// <param name="geboortePlaats">Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="geslachtsaanduiding">Geeft aan dat de persoon een man of een vrouw is, of dat het geslacht (nog) onbekend is.  (optional)</param>
        /// <param name="inclusiefOverledenPersonen">Als je ook overleden personen in het antwoord wilt, geef dan de parameter inclusiefOverledenPersonen op met waarde True.  Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/overleden_personen.feature)  (optional)</param>
        /// <param name="naamGeslachtsnaam">De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="naamVoorvoegsel">Deel van de geslachtsnaam dat vooraf gaat aan de rest van de geslachtsnaam. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="naamVoornamen">De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="verblijfplaatsGemeenteVanInschrijving">Een code die aangeeft in welke gemeente de persoon woont, of de laatste gemeente waar de persoon heeft gewoond, of de gemeente waar de persoon voor het eerst is ingeschreven.  (optional)</param>
        /// <param name="verblijfplaatsHuisletter">Een toevoeging aan een huisnummer in de vorm van een letter die door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsHuisnummer">Een nummer dat door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsHuisnummertoevoeging">Een toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter die door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsNummeraanduidingIdentificatie">Unieke identificatie van een nummeraanduiding (en het bijbehorende adres) in de BAG.  (optional)</param>
        /// <param name="verblijfplaatsStraat">Een naam die door de gemeente aan een openbare ruimte is gegeven. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).  (optional)</param>
        /// <param name="verblijfplaatsPostcode">De door PostNL vastgestelde code die bij een bepaalde combinatie van een straatnaam en een huisnummer hoort.  (optional)</param>
        /// <returns>ApiResponse of IngeschrevenPersoonHalCollectie</returns>
        ApiResponse<IngeschrevenPersoonHalCollectie> GetIngeschrevenPersonenWithHttpInfo (string expand = default(string), string fields = default(string), List<string> burgerservicenummer = default(List<string>), DateTime? geboorteDatum = default(DateTime?), string geboortePlaats = default(string), GeslachtEnum? geslachtsaanduiding = default(GeslachtEnum?), bool? inclusiefOverledenPersonen = default(bool?), string naamGeslachtsnaam = default(string), string naamVoorvoegsel = default(string), string naamVoornamen = default(string), string verblijfplaatsGemeenteVanInschrijving = default(string), string verblijfplaatsHuisletter = default(string), int? verblijfplaatsHuisnummer = default(int?), string verblijfplaatsHuisnummertoevoeging = default(string), string verblijfplaatsNummeraanduidingIdentificatie = default(string), string verblijfplaatsStraat = default(string), string verblijfplaatsPostcode = default(string));
        /// <summary>
        /// Raadpleeg een persoon
        /// </summary>
        /// <remarks>
        /// Raadpleeg een (overleden) persoon.  Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/fields_extensie.feature).  Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature). 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <returns>IngeschrevenPersoonHal</returns>
        IngeschrevenPersoonHal GetIngeschrevenPersoon (string burgerservicenummer, string expand = default(string), string fields = default(string));

        /// <summary>
        /// Raadpleeg een persoon
        /// </summary>
        /// <remarks>
        /// Raadpleeg een (overleden) persoon.  Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/fields_extensie.feature).  Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature). 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <returns>ApiResponse of IngeschrevenPersoonHal</returns>
        ApiResponse<IngeschrevenPersoonHal> GetIngeschrevenPersoonWithHttpInfo (string burgerservicenummer, string expand = default(string), string fields = default(string));
        /// <summary>
        /// Raadpleeg een kind van een persoon
        /// </summary>
        /// <remarks>
        /// Raadpleeg een kind van een persoon 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van het kind. </param>
        /// <returns>KindHalBasis</returns>
        KindHalBasis GetKind (string burgerservicenummer, string id);

        /// <summary>
        /// Raadpleeg een kind van een persoon
        /// </summary>
        /// <remarks>
        /// Raadpleeg een kind van een persoon 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van het kind. </param>
        /// <returns>ApiResponse of KindHalBasis</returns>
        ApiResponse<KindHalBasis> GetKindWithHttpInfo (string burgerservicenummer, string id);
        /// <summary>
        /// Levert de kinderen van een persoon
        /// </summary>
        /// <remarks>
        /// Levert de kinderen van een persoon 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>KindHalCollectie</returns>
        KindHalCollectie GetKinderen (string burgerservicenummer);

        /// <summary>
        /// Levert de kinderen van een persoon
        /// </summary>
        /// <remarks>
        /// Levert de kinderen van een persoon 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>ApiResponse of KindHalCollectie</returns>
        ApiResponse<KindHalCollectie> GetKinderenWithHttpInfo (string burgerservicenummer);
        /// <summary>
        /// Raadpleeg een ouder van een persoon
        /// </summary>
        /// <remarks>
        /// Raadpleeg een ouder van een persoon 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van de ouder. </param>
        /// <returns>OuderHalBasis</returns>
        OuderHalBasis GetOuder (string burgerservicenummer, string id);

        /// <summary>
        /// Raadpleeg een ouder van een persoon
        /// </summary>
        /// <remarks>
        /// Raadpleeg een ouder van een persoon 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van de ouder. </param>
        /// <returns>ApiResponse of OuderHalBasis</returns>
        ApiResponse<OuderHalBasis> GetOuderWithHttpInfo (string burgerservicenummer, string id);
        /// <summary>
        /// Levert de ouders van een persoon
        /// </summary>
        /// <remarks>
        /// Levert de ouders van een persoon 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>OuderHalCollectie</returns>
        OuderHalCollectie GetOuders (string burgerservicenummer);

        /// <summary>
        /// Levert de ouders van een persoon
        /// </summary>
        /// <remarks>
        /// Levert de ouders van een persoon 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>ApiResponse of OuderHalCollectie</returns>
        ApiResponse<OuderHalCollectie> GetOudersWithHttpInfo (string burgerservicenummer);
        /// <summary>
        /// Raadpleeg de partner van een persoon
        /// </summary>
        /// <remarks>
        /// Raadpleeg de partner van een persoon 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van de partner. </param>
        /// <returns>PartnerHalBasis</returns>
        PartnerHalBasis GetPartner (string burgerservicenummer, string id);

        /// <summary>
        /// Raadpleeg de partner van een persoon
        /// </summary>
        /// <remarks>
        /// Raadpleeg de partner van een persoon 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van de partner. </param>
        /// <returns>ApiResponse of PartnerHalBasis</returns>
        ApiResponse<PartnerHalBasis> GetPartnerWithHttpInfo (string burgerservicenummer, string id);
        /// <summary>
        /// Levert de actuele partners van een persoon
        /// </summary>
        /// <remarks>
        /// Levert de actuele partners van een persoon. Partners uit beëindigde huwelijken of partnerschappen worden niet geretourneerd 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>PartnerHalCollectie</returns>
        PartnerHalCollectie GetPartners (string burgerservicenummer);

        /// <summary>
        /// Levert de actuele partners van een persoon
        /// </summary>
        /// <remarks>
        /// Levert de actuele partners van een persoon. Partners uit beëindigde huwelijken of partnerschappen worden niet geretourneerd 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>ApiResponse of PartnerHalCollectie</returns>
        ApiResponse<PartnerHalCollectie> GetPartnersWithHttpInfo (string burgerservicenummer);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIngeschrevenPersonenApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Vindt personen
        /// </summary>
        /// <remarks>
        /// Zoek personen met één van de onderstaande verplichte combinaties van parameters en vul ze evt. aan met parameters uit de andere combinaties.   Default krijg je personen terug die nog in leven zijn, tenzij je de inclusiefoverledenpersonen&#x3D;true opgeeft.   Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/fields_extensie.feature)   Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature)   1.  Persoon     -  geboorte__datum     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   2.  Persoon     -  verblijfplaats__gemeenteVanInschrijving     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   3.  Persoon     -  burgerservicenummer   4.  Postcode     -  verblijfplaats__postcode     -  verblijfplaats__huisnummer   5.  Straat     -  verblijfplaats__straat (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) )     -  verblijfplaats__gemeenteVanInschrijving     -  verblijfplaats__huisnummer   6.  Adres     -  verblijfplaats__nummeraanduidingIdentificatie 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <param name="burgerservicenummer">Uniek persoonsnummer.  (optional)</param>
        /// <param name="geboorteDatum">Je kunt alleen zoeken met een volledig geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/parametervalidatie.feature)  (optional)</param>
        /// <param name="geboortePlaats">Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="geslachtsaanduiding">Geeft aan dat de persoon een man of een vrouw is, of dat het geslacht (nog) onbekend is.  (optional)</param>
        /// <param name="inclusiefOverledenPersonen">Als je ook overleden personen in het antwoord wilt, geef dan de parameter inclusiefOverledenPersonen op met waarde True.  Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/overleden_personen.feature)  (optional)</param>
        /// <param name="naamGeslachtsnaam">De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="naamVoorvoegsel">Deel van de geslachtsnaam dat vooraf gaat aan de rest van de geslachtsnaam. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="naamVoornamen">De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="verblijfplaatsGemeenteVanInschrijving">Een code die aangeeft in welke gemeente de persoon woont, of de laatste gemeente waar de persoon heeft gewoond, of de gemeente waar de persoon voor het eerst is ingeschreven.  (optional)</param>
        /// <param name="verblijfplaatsHuisletter">Een toevoeging aan een huisnummer in de vorm van een letter die door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsHuisnummer">Een nummer dat door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsHuisnummertoevoeging">Een toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter die door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsNummeraanduidingIdentificatie">Unieke identificatie van een nummeraanduiding (en het bijbehorende adres) in de BAG.  (optional)</param>
        /// <param name="verblijfplaatsStraat">Een naam die door de gemeente aan een openbare ruimte is gegeven. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).  (optional)</param>
        /// <param name="verblijfplaatsPostcode">De door PostNL vastgestelde code die bij een bepaalde combinatie van een straatnaam en een huisnummer hoort.  (optional)</param>
        /// <returns>Task of IngeschrevenPersoonHalCollectie</returns>
        System.Threading.Tasks.Task<IngeschrevenPersoonHalCollectie> GetIngeschrevenPersonenAsync (string expand = default(string), string fields = default(string), List<string> burgerservicenummer = default(List<string>), DateTime? geboorteDatum = default(DateTime?), string geboortePlaats = default(string), GeslachtEnum? geslachtsaanduiding = default(GeslachtEnum?), bool? inclusiefOverledenPersonen = default(bool?), string naamGeslachtsnaam = default(string), string naamVoorvoegsel = default(string), string naamVoornamen = default(string), string verblijfplaatsGemeenteVanInschrijving = default(string), string verblijfplaatsHuisletter = default(string), int? verblijfplaatsHuisnummer = default(int?), string verblijfplaatsHuisnummertoevoeging = default(string), string verblijfplaatsNummeraanduidingIdentificatie = default(string), string verblijfplaatsStraat = default(string), string verblijfplaatsPostcode = default(string));

        /// <summary>
        /// Vindt personen
        /// </summary>
        /// <remarks>
        /// Zoek personen met één van de onderstaande verplichte combinaties van parameters en vul ze evt. aan met parameters uit de andere combinaties.   Default krijg je personen terug die nog in leven zijn, tenzij je de inclusiefoverledenpersonen&#x3D;true opgeeft.   Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/fields_extensie.feature)   Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature)   1.  Persoon     -  geboorte__datum     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   2.  Persoon     -  verblijfplaats__gemeenteVanInschrijving     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   3.  Persoon     -  burgerservicenummer   4.  Postcode     -  verblijfplaats__postcode     -  verblijfplaats__huisnummer   5.  Straat     -  verblijfplaats__straat (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) )     -  verblijfplaats__gemeenteVanInschrijving     -  verblijfplaats__huisnummer   6.  Adres     -  verblijfplaats__nummeraanduidingIdentificatie 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <param name="burgerservicenummer">Uniek persoonsnummer.  (optional)</param>
        /// <param name="geboorteDatum">Je kunt alleen zoeken met een volledig geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/parametervalidatie.feature)  (optional)</param>
        /// <param name="geboortePlaats">Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="geslachtsaanduiding">Geeft aan dat de persoon een man of een vrouw is, of dat het geslacht (nog) onbekend is.  (optional)</param>
        /// <param name="inclusiefOverledenPersonen">Als je ook overleden personen in het antwoord wilt, geef dan de parameter inclusiefOverledenPersonen op met waarde True.  Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/overleden_personen.feature)  (optional)</param>
        /// <param name="naamGeslachtsnaam">De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="naamVoorvoegsel">Deel van de geslachtsnaam dat vooraf gaat aan de rest van de geslachtsnaam. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="naamVoornamen">De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="verblijfplaatsGemeenteVanInschrijving">Een code die aangeeft in welke gemeente de persoon woont, of de laatste gemeente waar de persoon heeft gewoond, of de gemeente waar de persoon voor het eerst is ingeschreven.  (optional)</param>
        /// <param name="verblijfplaatsHuisletter">Een toevoeging aan een huisnummer in de vorm van een letter die door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsHuisnummer">Een nummer dat door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsHuisnummertoevoeging">Een toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter die door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsNummeraanduidingIdentificatie">Unieke identificatie van een nummeraanduiding (en het bijbehorende adres) in de BAG.  (optional)</param>
        /// <param name="verblijfplaatsStraat">Een naam die door de gemeente aan een openbare ruimte is gegeven. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).  (optional)</param>
        /// <param name="verblijfplaatsPostcode">De door PostNL vastgestelde code die bij een bepaalde combinatie van een straatnaam en een huisnummer hoort.  (optional)</param>
        /// <returns>Task of ApiResponse (IngeschrevenPersoonHalCollectie)</returns>
        System.Threading.Tasks.Task<ApiResponse<IngeschrevenPersoonHalCollectie>> GetIngeschrevenPersonenAsyncWithHttpInfo (string expand = default(string), string fields = default(string), List<string> burgerservicenummer = default(List<string>), DateTime? geboorteDatum = default(DateTime?), string geboortePlaats = default(string), GeslachtEnum? geslachtsaanduiding = default(GeslachtEnum?), bool? inclusiefOverledenPersonen = default(bool?), string naamGeslachtsnaam = default(string), string naamVoorvoegsel = default(string), string naamVoornamen = default(string), string verblijfplaatsGemeenteVanInschrijving = default(string), string verblijfplaatsHuisletter = default(string), int? verblijfplaatsHuisnummer = default(int?), string verblijfplaatsHuisnummertoevoeging = default(string), string verblijfplaatsNummeraanduidingIdentificatie = default(string), string verblijfplaatsStraat = default(string), string verblijfplaatsPostcode = default(string));
        /// <summary>
        /// Raadpleeg een persoon
        /// </summary>
        /// <remarks>
        /// Raadpleeg een (overleden) persoon.  Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/fields_extensie.feature).  Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature). 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <returns>Task of IngeschrevenPersoonHal</returns>
        System.Threading.Tasks.Task<IngeschrevenPersoonHal> GetIngeschrevenPersoonAsync (string burgerservicenummer, string expand = default(string), string fields = default(string));

        /// <summary>
        /// Raadpleeg een persoon
        /// </summary>
        /// <remarks>
        /// Raadpleeg een (overleden) persoon.  Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/fields_extensie.feature).  Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature). 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <returns>Task of ApiResponse (IngeschrevenPersoonHal)</returns>
        System.Threading.Tasks.Task<ApiResponse<IngeschrevenPersoonHal>> GetIngeschrevenPersoonAsyncWithHttpInfo (string burgerservicenummer, string expand = default(string), string fields = default(string));
        /// <summary>
        /// Raadpleeg een kind van een persoon
        /// </summary>
        /// <remarks>
        /// Raadpleeg een kind van een persoon 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van het kind. </param>
        /// <returns>Task of KindHalBasis</returns>
        System.Threading.Tasks.Task<KindHalBasis> GetKindAsync (string burgerservicenummer, string id);

        /// <summary>
        /// Raadpleeg een kind van een persoon
        /// </summary>
        /// <remarks>
        /// Raadpleeg een kind van een persoon 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van het kind. </param>
        /// <returns>Task of ApiResponse (KindHalBasis)</returns>
        System.Threading.Tasks.Task<ApiResponse<KindHalBasis>> GetKindAsyncWithHttpInfo (string burgerservicenummer, string id);
        /// <summary>
        /// Levert de kinderen van een persoon
        /// </summary>
        /// <remarks>
        /// Levert de kinderen van een persoon 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>Task of KindHalCollectie</returns>
        System.Threading.Tasks.Task<KindHalCollectie> GetKinderenAsync (string burgerservicenummer);

        /// <summary>
        /// Levert de kinderen van een persoon
        /// </summary>
        /// <remarks>
        /// Levert de kinderen van een persoon 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>Task of ApiResponse (KindHalCollectie)</returns>
        System.Threading.Tasks.Task<ApiResponse<KindHalCollectie>> GetKinderenAsyncWithHttpInfo (string burgerservicenummer);
        /// <summary>
        /// Raadpleeg een ouder van een persoon
        /// </summary>
        /// <remarks>
        /// Raadpleeg een ouder van een persoon 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van de ouder. </param>
        /// <returns>Task of OuderHalBasis</returns>
        System.Threading.Tasks.Task<OuderHalBasis> GetOuderAsync (string burgerservicenummer, string id);

        /// <summary>
        /// Raadpleeg een ouder van een persoon
        /// </summary>
        /// <remarks>
        /// Raadpleeg een ouder van een persoon 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van de ouder. </param>
        /// <returns>Task of ApiResponse (OuderHalBasis)</returns>
        System.Threading.Tasks.Task<ApiResponse<OuderHalBasis>> GetOuderAsyncWithHttpInfo (string burgerservicenummer, string id);
        /// <summary>
        /// Levert de ouders van een persoon
        /// </summary>
        /// <remarks>
        /// Levert de ouders van een persoon 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>Task of OuderHalCollectie</returns>
        System.Threading.Tasks.Task<OuderHalCollectie> GetOudersAsync (string burgerservicenummer);

        /// <summary>
        /// Levert de ouders van een persoon
        /// </summary>
        /// <remarks>
        /// Levert de ouders van een persoon 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>Task of ApiResponse (OuderHalCollectie)</returns>
        System.Threading.Tasks.Task<ApiResponse<OuderHalCollectie>> GetOudersAsyncWithHttpInfo (string burgerservicenummer);
        /// <summary>
        /// Raadpleeg de partner van een persoon
        /// </summary>
        /// <remarks>
        /// Raadpleeg de partner van een persoon 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van de partner. </param>
        /// <returns>Task of PartnerHalBasis</returns>
        System.Threading.Tasks.Task<PartnerHalBasis> GetPartnerAsync (string burgerservicenummer, string id);

        /// <summary>
        /// Raadpleeg de partner van een persoon
        /// </summary>
        /// <remarks>
        /// Raadpleeg de partner van een persoon 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van de partner. </param>
        /// <returns>Task of ApiResponse (PartnerHalBasis)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartnerHalBasis>> GetPartnerAsyncWithHttpInfo (string burgerservicenummer, string id);
        /// <summary>
        /// Levert de actuele partners van een persoon
        /// </summary>
        /// <remarks>
        /// Levert de actuele partners van een persoon. Partners uit beëindigde huwelijken of partnerschappen worden niet geretourneerd 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>Task of PartnerHalCollectie</returns>
        System.Threading.Tasks.Task<PartnerHalCollectie> GetPartnersAsync (string burgerservicenummer);

        /// <summary>
        /// Levert de actuele partners van een persoon
        /// </summary>
        /// <remarks>
        /// Levert de actuele partners van een persoon. Partners uit beëindigde huwelijken of partnerschappen worden niet geretourneerd 
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>Task of ApiResponse (PartnerHalCollectie)</returns>
        System.Threading.Tasks.Task<ApiResponse<PartnerHalCollectie>> GetPartnersAsyncWithHttpInfo (string burgerservicenummer);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IIngeschrevenPersonenApi : IIngeschrevenPersonenApiSync, IIngeschrevenPersonenApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class IngeschrevenPersonenApi : IIngeschrevenPersonenApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="IngeschrevenPersonenApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IngeschrevenPersonenApi() : this((string) null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IngeschrevenPersonenApi"/> class.
        /// </summary>
        /// <returns></returns>
        public IngeschrevenPersonenApi(String basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IngeschrevenPersonenApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public IngeschrevenPersonenApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="IngeschrevenPersonenApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public IngeschrevenPersonenApi(Org.OpenAPITools.Client.ISynchronousClient client,Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if(client == null) throw new ArgumentNullException("client");
            if(asyncClient == null) throw new ArgumentNullException("asyncClient");
            if(configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Vindt personen Zoek personen met één van de onderstaande verplichte combinaties van parameters en vul ze evt. aan met parameters uit de andere combinaties.   Default krijg je personen terug die nog in leven zijn, tenzij je de inclusiefoverledenpersonen&#x3D;true opgeeft.   Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/fields_extensie.feature)   Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature)   1.  Persoon     -  geboorte__datum     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   2.  Persoon     -  verblijfplaats__gemeenteVanInschrijving     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   3.  Persoon     -  burgerservicenummer   4.  Postcode     -  verblijfplaats__postcode     -  verblijfplaats__huisnummer   5.  Straat     -  verblijfplaats__straat (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) )     -  verblijfplaats__gemeenteVanInschrijving     -  verblijfplaats__huisnummer   6.  Adres     -  verblijfplaats__nummeraanduidingIdentificatie 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <param name="burgerservicenummer">Uniek persoonsnummer.  (optional)</param>
        /// <param name="geboorteDatum">Je kunt alleen zoeken met een volledig geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/parametervalidatie.feature)  (optional)</param>
        /// <param name="geboortePlaats">Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="geslachtsaanduiding">Geeft aan dat de persoon een man of een vrouw is, of dat het geslacht (nog) onbekend is.  (optional)</param>
        /// <param name="inclusiefOverledenPersonen">Als je ook overleden personen in het antwoord wilt, geef dan de parameter inclusiefOverledenPersonen op met waarde True.  Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/overleden_personen.feature)  (optional)</param>
        /// <param name="naamGeslachtsnaam">De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="naamVoorvoegsel">Deel van de geslachtsnaam dat vooraf gaat aan de rest van de geslachtsnaam. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="naamVoornamen">De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="verblijfplaatsGemeenteVanInschrijving">Een code die aangeeft in welke gemeente de persoon woont, of de laatste gemeente waar de persoon heeft gewoond, of de gemeente waar de persoon voor het eerst is ingeschreven.  (optional)</param>
        /// <param name="verblijfplaatsHuisletter">Een toevoeging aan een huisnummer in de vorm van een letter die door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsHuisnummer">Een nummer dat door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsHuisnummertoevoeging">Een toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter die door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsNummeraanduidingIdentificatie">Unieke identificatie van een nummeraanduiding (en het bijbehorende adres) in de BAG.  (optional)</param>
        /// <param name="verblijfplaatsStraat">Een naam die door de gemeente aan een openbare ruimte is gegeven. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).  (optional)</param>
        /// <param name="verblijfplaatsPostcode">De door PostNL vastgestelde code die bij een bepaalde combinatie van een straatnaam en een huisnummer hoort.  (optional)</param>
        /// <returns>IngeschrevenPersoonHalCollectie</returns>
        public IngeschrevenPersoonHalCollectie GetIngeschrevenPersonen (string expand = default(string), string fields = default(string), List<string> burgerservicenummer = default(List<string>), DateTime? geboorteDatum = default(DateTime?), string geboortePlaats = default(string), GeslachtEnum? geslachtsaanduiding = default(GeslachtEnum?), bool? inclusiefOverledenPersonen = default(bool?), string naamGeslachtsnaam = default(string), string naamVoorvoegsel = default(string), string naamVoornamen = default(string), string verblijfplaatsGemeenteVanInschrijving = default(string), string verblijfplaatsHuisletter = default(string), int? verblijfplaatsHuisnummer = default(int?), string verblijfplaatsHuisnummertoevoeging = default(string), string verblijfplaatsNummeraanduidingIdentificatie = default(string), string verblijfplaatsStraat = default(string), string verblijfplaatsPostcode = default(string))
        {
             Org.OpenAPITools.Client.ApiResponse<IngeschrevenPersoonHalCollectie> localVarResponse = GetIngeschrevenPersonenWithHttpInfo(expand, fields, burgerservicenummer, geboorteDatum, geboortePlaats, geslachtsaanduiding, inclusiefOverledenPersonen, naamGeslachtsnaam, naamVoorvoegsel, naamVoornamen, verblijfplaatsGemeenteVanInschrijving, verblijfplaatsHuisletter, verblijfplaatsHuisnummer, verblijfplaatsHuisnummertoevoeging, verblijfplaatsNummeraanduidingIdentificatie, verblijfplaatsStraat, verblijfplaatsPostcode);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Vindt personen Zoek personen met één van de onderstaande verplichte combinaties van parameters en vul ze evt. aan met parameters uit de andere combinaties.   Default krijg je personen terug die nog in leven zijn, tenzij je de inclusiefoverledenpersonen&#x3D;true opgeeft.   Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/fields_extensie.feature)   Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature)   1.  Persoon     -  geboorte__datum     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   2.  Persoon     -  verblijfplaats__gemeenteVanInschrijving     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   3.  Persoon     -  burgerservicenummer   4.  Postcode     -  verblijfplaats__postcode     -  verblijfplaats__huisnummer   5.  Straat     -  verblijfplaats__straat (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) )     -  verblijfplaats__gemeenteVanInschrijving     -  verblijfplaats__huisnummer   6.  Adres     -  verblijfplaats__nummeraanduidingIdentificatie 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <param name="burgerservicenummer">Uniek persoonsnummer.  (optional)</param>
        /// <param name="geboorteDatum">Je kunt alleen zoeken met een volledig geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/parametervalidatie.feature)  (optional)</param>
        /// <param name="geboortePlaats">Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="geslachtsaanduiding">Geeft aan dat de persoon een man of een vrouw is, of dat het geslacht (nog) onbekend is.  (optional)</param>
        /// <param name="inclusiefOverledenPersonen">Als je ook overleden personen in het antwoord wilt, geef dan de parameter inclusiefOverledenPersonen op met waarde True.  Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/overleden_personen.feature)  (optional)</param>
        /// <param name="naamGeslachtsnaam">De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="naamVoorvoegsel">Deel van de geslachtsnaam dat vooraf gaat aan de rest van de geslachtsnaam. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="naamVoornamen">De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="verblijfplaatsGemeenteVanInschrijving">Een code die aangeeft in welke gemeente de persoon woont, of de laatste gemeente waar de persoon heeft gewoond, of de gemeente waar de persoon voor het eerst is ingeschreven.  (optional)</param>
        /// <param name="verblijfplaatsHuisletter">Een toevoeging aan een huisnummer in de vorm van een letter die door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsHuisnummer">Een nummer dat door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsHuisnummertoevoeging">Een toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter die door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsNummeraanduidingIdentificatie">Unieke identificatie van een nummeraanduiding (en het bijbehorende adres) in de BAG.  (optional)</param>
        /// <param name="verblijfplaatsStraat">Een naam die door de gemeente aan een openbare ruimte is gegeven. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).  (optional)</param>
        /// <param name="verblijfplaatsPostcode">De door PostNL vastgestelde code die bij een bepaalde combinatie van een straatnaam en een huisnummer hoort.  (optional)</param>
        /// <returns>ApiResponse of IngeschrevenPersoonHalCollectie</returns>
        public Org.OpenAPITools.Client.ApiResponse< IngeschrevenPersoonHalCollectie > GetIngeschrevenPersonenWithHttpInfo (string expand = default(string), string fields = default(string), List<string> burgerservicenummer = default(List<string>), DateTime? geboorteDatum = default(DateTime?), string geboortePlaats = default(string), GeslachtEnum? geslachtsaanduiding = default(GeslachtEnum?), bool? inclusiefOverledenPersonen = default(bool?), string naamGeslachtsnaam = default(string), string naamVoorvoegsel = default(string), string naamVoornamen = default(string), string verblijfplaatsGemeenteVanInschrijving = default(string), string verblijfplaatsHuisletter = default(string), int? verblijfplaatsHuisnummer = default(int?), string verblijfplaatsHuisnummertoevoeging = default(string), string verblijfplaatsNummeraanduidingIdentificatie = default(string), string verblijfplaatsStraat = default(string), string verblijfplaatsPostcode = default(string))
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (burgerservicenummer != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "burgerservicenummer", burgerservicenummer));
            }
            if (geboorteDatum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "geboorte__datum", geboorteDatum));
            }
            if (geboortePlaats != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "geboorte__plaats", geboortePlaats));
            }
            if (geslachtsaanduiding != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "geslachtsaanduiding", geslachtsaanduiding));
            }
            if (inclusiefOverledenPersonen != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "inclusiefOverledenPersonen", inclusiefOverledenPersonen));
            }
            if (naamGeslachtsnaam != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "naam__geslachtsnaam", naamGeslachtsnaam));
            }
            if (naamVoorvoegsel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "naam__voorvoegsel", naamVoorvoegsel));
            }
            if (naamVoornamen != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "naam__voornamen", naamVoornamen));
            }
            if (verblijfplaatsGemeenteVanInschrijving != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verblijfplaats__gemeenteVanInschrijving", verblijfplaatsGemeenteVanInschrijving));
            }
            if (verblijfplaatsHuisletter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verblijfplaats__huisletter", verblijfplaatsHuisletter));
            }
            if (verblijfplaatsHuisnummer != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verblijfplaats__huisnummer", verblijfplaatsHuisnummer));
            }
            if (verblijfplaatsHuisnummertoevoeging != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verblijfplaats__huisnummertoevoeging", verblijfplaatsHuisnummertoevoeging));
            }
            if (verblijfplaatsNummeraanduidingIdentificatie != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verblijfplaats__nummeraanduidingIdentificatie", verblijfplaatsNummeraanduidingIdentificatie));
            }
            if (verblijfplaatsStraat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verblijfplaats__straat", verblijfplaatsStraat));
            }
            if (verblijfplaatsPostcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verblijfplaats__postcode", verblijfplaatsPostcode));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< IngeschrevenPersoonHalCollectie >("/ingeschrevenpersonen", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIngeschrevenPersonen", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Vindt personen Zoek personen met één van de onderstaande verplichte combinaties van parameters en vul ze evt. aan met parameters uit de andere combinaties.   Default krijg je personen terug die nog in leven zijn, tenzij je de inclusiefoverledenpersonen&#x3D;true opgeeft.   Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/fields_extensie.feature)   Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature)   1.  Persoon     -  geboorte__datum     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   2.  Persoon     -  verblijfplaats__gemeenteVanInschrijving     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   3.  Persoon     -  burgerservicenummer   4.  Postcode     -  verblijfplaats__postcode     -  verblijfplaats__huisnummer   5.  Straat     -  verblijfplaats__straat (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) )     -  verblijfplaats__gemeenteVanInschrijving     -  verblijfplaats__huisnummer   6.  Adres     -  verblijfplaats__nummeraanduidingIdentificatie 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <param name="burgerservicenummer">Uniek persoonsnummer.  (optional)</param>
        /// <param name="geboorteDatum">Je kunt alleen zoeken met een volledig geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/parametervalidatie.feature)  (optional)</param>
        /// <param name="geboortePlaats">Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="geslachtsaanduiding">Geeft aan dat de persoon een man of een vrouw is, of dat het geslacht (nog) onbekend is.  (optional)</param>
        /// <param name="inclusiefOverledenPersonen">Als je ook overleden personen in het antwoord wilt, geef dan de parameter inclusiefOverledenPersonen op met waarde True.  Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/overleden_personen.feature)  (optional)</param>
        /// <param name="naamGeslachtsnaam">De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="naamVoorvoegsel">Deel van de geslachtsnaam dat vooraf gaat aan de rest van de geslachtsnaam. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="naamVoornamen">De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="verblijfplaatsGemeenteVanInschrijving">Een code die aangeeft in welke gemeente de persoon woont, of de laatste gemeente waar de persoon heeft gewoond, of de gemeente waar de persoon voor het eerst is ingeschreven.  (optional)</param>
        /// <param name="verblijfplaatsHuisletter">Een toevoeging aan een huisnummer in de vorm van een letter die door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsHuisnummer">Een nummer dat door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsHuisnummertoevoeging">Een toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter die door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsNummeraanduidingIdentificatie">Unieke identificatie van een nummeraanduiding (en het bijbehorende adres) in de BAG.  (optional)</param>
        /// <param name="verblijfplaatsStraat">Een naam die door de gemeente aan een openbare ruimte is gegeven. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).  (optional)</param>
        /// <param name="verblijfplaatsPostcode">De door PostNL vastgestelde code die bij een bepaalde combinatie van een straatnaam en een huisnummer hoort.  (optional)</param>
        /// <returns>Task of IngeschrevenPersoonHalCollectie</returns>
        public async System.Threading.Tasks.Task<IngeschrevenPersoonHalCollectie> GetIngeschrevenPersonenAsync (string expand = default(string), string fields = default(string), List<string> burgerservicenummer = default(List<string>), DateTime? geboorteDatum = default(DateTime?), string geboortePlaats = default(string), GeslachtEnum? geslachtsaanduiding = default(GeslachtEnum?), bool? inclusiefOverledenPersonen = default(bool?), string naamGeslachtsnaam = default(string), string naamVoorvoegsel = default(string), string naamVoornamen = default(string), string verblijfplaatsGemeenteVanInschrijving = default(string), string verblijfplaatsHuisletter = default(string), int? verblijfplaatsHuisnummer = default(int?), string verblijfplaatsHuisnummertoevoeging = default(string), string verblijfplaatsNummeraanduidingIdentificatie = default(string), string verblijfplaatsStraat = default(string), string verblijfplaatsPostcode = default(string))
        {
             Org.OpenAPITools.Client.ApiResponse<IngeschrevenPersoonHalCollectie> localVarResponse = await GetIngeschrevenPersonenAsyncWithHttpInfo(expand, fields, burgerservicenummer, geboorteDatum, geboortePlaats, geslachtsaanduiding, inclusiefOverledenPersonen, naamGeslachtsnaam, naamVoorvoegsel, naamVoornamen, verblijfplaatsGemeenteVanInschrijving, verblijfplaatsHuisletter, verblijfplaatsHuisnummer, verblijfplaatsHuisnummertoevoeging, verblijfplaatsNummeraanduidingIdentificatie, verblijfplaatsStraat, verblijfplaatsPostcode);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Vindt personen Zoek personen met één van de onderstaande verplichte combinaties van parameters en vul ze evt. aan met parameters uit de andere combinaties.   Default krijg je personen terug die nog in leven zijn, tenzij je de inclusiefoverledenpersonen&#x3D;true opgeeft.   Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/fields_extensie.feature)   Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature)   1.  Persoon     -  geboorte__datum     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   2.  Persoon     -  verblijfplaats__gemeenteVanInschrijving     -  naam__geslachtsnaam (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)   3.  Persoon     -  burgerservicenummer   4.  Postcode     -  verblijfplaats__postcode     -  verblijfplaats__huisnummer   5.  Straat     -  verblijfplaats__straat (minimaal 2 karakters, [wildcard toegestaan](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) )     -  verblijfplaats__gemeenteVanInschrijving     -  verblijfplaats__huisnummer   6.  Adres     -  verblijfplaats__nummeraanduidingIdentificatie 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <param name="burgerservicenummer">Uniek persoonsnummer.  (optional)</param>
        /// <param name="geboorteDatum">Je kunt alleen zoeken met een volledig geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/parametervalidatie.feature)  (optional)</param>
        /// <param name="geboortePlaats">Gemeentenaam of een buitenlandse plaats of een plaatsbepaling, die aangeeft waar de persoon is geboren. **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="geslachtsaanduiding">Geeft aan dat de persoon een man of een vrouw is, of dat het geslacht (nog) onbekend is.  (optional)</param>
        /// <param name="inclusiefOverledenPersonen">Als je ook overleden personen in het antwoord wilt, geef dan de parameter inclusiefOverledenPersonen op met waarde True.  Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/overleden_personen.feature)  (optional)</param>
        /// <param name="naamGeslachtsnaam">De (geslachts)naam waarvan de eventueel aanwezige voorvoegsels zijn afgesplitst. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="naamVoorvoegsel">Deel van de geslachtsnaam dat vooraf gaat aan de rest van de geslachtsnaam. Het zoeken op het voorvoegsel is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="naamVoornamen">De verzameling namen die, gescheiden door spaties, aan de geslachtsnaam voorafgaat. ** Bij deze query-parameter is het gebruik van een [wildcard](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature) toegestaan in combinatie met minimaal 2 karakters.** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).**  (optional)</param>
        /// <param name="verblijfplaatsGemeenteVanInschrijving">Een code die aangeeft in welke gemeente de persoon woont, of de laatste gemeente waar de persoon heeft gewoond, of de gemeente waar de persoon voor het eerst is ingeschreven.  (optional)</param>
        /// <param name="verblijfplaatsHuisletter">Een toevoeging aan een huisnummer in de vorm van een letter die door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsHuisnummer">Een nummer dat door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsHuisnummertoevoeging">Een toevoeging aan een huisnummer of een combinatie van huisnummer en huisletter die door de gemeente aan een adresseerbaar object is gegeven.  (optional)</param>
        /// <param name="verblijfplaatsNummeraanduidingIdentificatie">Unieke identificatie van een nummeraanduiding (en het bijbehorende adres) in de BAG.  (optional)</param>
        /// <param name="verblijfplaatsStraat">Een naam die door de gemeente aan een openbare ruimte is gegeven. **Gebruik van de wildcard is toegestaan. Zie [feature-beschrijving](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.2.0/features/wildcard.feature)** **Zoeken met tekstvelden is [case-Insensitive](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/case_insensitive.feature).  (optional)</param>
        /// <param name="verblijfplaatsPostcode">De door PostNL vastgestelde code die bij een bepaalde combinatie van een straatnaam en een huisnummer hoort.  (optional)</param>
        /// <returns>Task of ApiResponse (IngeschrevenPersoonHalCollectie)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<IngeschrevenPersoonHalCollectie>> GetIngeschrevenPersonenAsyncWithHttpInfo (string expand = default(string), string fields = default(string), List<string> burgerservicenummer = default(List<string>), DateTime? geboorteDatum = default(DateTime?), string geboortePlaats = default(string), GeslachtEnum? geslachtsaanduiding = default(GeslachtEnum?), bool? inclusiefOverledenPersonen = default(bool?), string naamGeslachtsnaam = default(string), string naamVoorvoegsel = default(string), string naamVoornamen = default(string), string verblijfplaatsGemeenteVanInschrijving = default(string), string verblijfplaatsHuisletter = default(string), int? verblijfplaatsHuisnummer = default(int?), string verblijfplaatsHuisnummertoevoeging = default(string), string verblijfplaatsNummeraanduidingIdentificatie = default(string), string verblijfplaatsStraat = default(string), string verblijfplaatsPostcode = default(string))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }
            if (burgerservicenummer != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("csv", "burgerservicenummer", burgerservicenummer));
            }
            if (geboorteDatum != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "geboorte__datum", geboorteDatum));
            }
            if (geboortePlaats != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "geboorte__plaats", geboortePlaats));
            }
            if (geslachtsaanduiding != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "geslachtsaanduiding", geslachtsaanduiding));
            }
            if (inclusiefOverledenPersonen != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "inclusiefOverledenPersonen", inclusiefOverledenPersonen));
            }
            if (naamGeslachtsnaam != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "naam__geslachtsnaam", naamGeslachtsnaam));
            }
            if (naamVoorvoegsel != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "naam__voorvoegsel", naamVoorvoegsel));
            }
            if (naamVoornamen != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "naam__voornamen", naamVoornamen));
            }
            if (verblijfplaatsGemeenteVanInschrijving != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verblijfplaats__gemeenteVanInschrijving", verblijfplaatsGemeenteVanInschrijving));
            }
            if (verblijfplaatsHuisletter != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verblijfplaats__huisletter", verblijfplaatsHuisletter));
            }
            if (verblijfplaatsHuisnummer != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verblijfplaats__huisnummer", verblijfplaatsHuisnummer));
            }
            if (verblijfplaatsHuisnummertoevoeging != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verblijfplaats__huisnummertoevoeging", verblijfplaatsHuisnummertoevoeging));
            }
            if (verblijfplaatsNummeraanduidingIdentificatie != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verblijfplaats__nummeraanduidingIdentificatie", verblijfplaatsNummeraanduidingIdentificatie));
            }
            if (verblijfplaatsStraat != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verblijfplaats__straat", verblijfplaatsStraat));
            }
            if (verblijfplaatsPostcode != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "verblijfplaats__postcode", verblijfplaatsPostcode));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<IngeschrevenPersoonHalCollectie>("/ingeschrevenpersonen", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIngeschrevenPersonen", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Raadpleeg een persoon Raadpleeg een (overleden) persoon.  Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/fields_extensie.feature).  Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <returns>IngeschrevenPersoonHal</returns>
        public IngeschrevenPersoonHal GetIngeschrevenPersoon (string burgerservicenummer, string expand = default(string), string fields = default(string))
        {
             Org.OpenAPITools.Client.ApiResponse<IngeschrevenPersoonHal> localVarResponse = GetIngeschrevenPersoonWithHttpInfo(burgerservicenummer, expand, fields);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Raadpleeg een persoon Raadpleeg een (overleden) persoon.  Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/fields_extensie.feature).  Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <returns>ApiResponse of IngeschrevenPersoonHal</returns>
        public Org.OpenAPITools.Client.ApiResponse< IngeschrevenPersoonHal > GetIngeschrevenPersoonWithHttpInfo (string burgerservicenummer, string expand = default(string), string fields = default(string))
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenPersonenApi->GetIngeschrevenPersoon");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }


            // make the HTTP request
            var localVarResponse = this.Client.Get< IngeschrevenPersoonHal >("/ingeschrevenpersonen/{burgerservicenummer}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIngeschrevenPersoon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Raadpleeg een persoon Raadpleeg een (overleden) persoon.  Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/fields_extensie.feature).  Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <returns>Task of IngeschrevenPersoonHal</returns>
        public async System.Threading.Tasks.Task<IngeschrevenPersoonHal> GetIngeschrevenPersoonAsync (string burgerservicenummer, string expand = default(string), string fields = default(string))
        {
             Org.OpenAPITools.Client.ApiResponse<IngeschrevenPersoonHal> localVarResponse = await GetIngeschrevenPersoonAsyncWithHttpInfo(burgerservicenummer, expand, fields);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Raadpleeg een persoon Raadpleeg een (overleden) persoon.  Gebruik de fields parameter als je alleen specifieke velden in het antwoord wil zien, [zie functionele specificaties fields-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.0.0/features/fields_extensie.feature).  Gebruik de expand parameter als je het antwoord wil uitbreiden met (delen van) de gerelateerde resources kinderen, ouders of partners, [zie functionele specificaties expand-parameter](https://github.com/VNG-Realisatie/Haal-Centraal-Common/blob/v1.2.0/features/expand.feature). 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="expand">Hiermee kun je opgeven welke gerelateerde resources meegeleverd moeten worden, en hun inhoud naar behoefte aanpassen. Hele resources of enkele properties geef je in de expand parameter kommagescheiden op. Properties die je wil ontvangen geef je op met de resource-naam gevolgd door de property naam, met daartussen een punt. In de definitie van het antwoord kun je bij _embedded zien welke gerelateerde resources meegeleverd kunnen worden. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/expand.feature). (optional)</param>
        /// <param name="fields">Hiermee kun je de inhoud van de resource naar behoefte aanpassen door een door komma&#39;s gescheiden lijst van property namen op te geven. Bij opgave van niet-bestaande properties wordt een 400 Bad Request teruggegeven. Wanneer de fields parameter niet is opgegeven, worden alle properties met een waarde teruggegeven. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-common/blob/v1.1.0/features/fields.feature) (optional)</param>
        /// <returns>Task of ApiResponse (IngeschrevenPersoonHal)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<IngeschrevenPersoonHal>> GetIngeschrevenPersoonAsyncWithHttpInfo (string burgerservicenummer, string expand = default(string), string fields = default(string))
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenPersonenApi->GetIngeschrevenPersoon");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter
            if (expand != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "expand", expand));
            }
            if (fields != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "fields", fields));
            }


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<IngeschrevenPersoonHal>("/ingeschrevenpersonen/{burgerservicenummer}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetIngeschrevenPersoon", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Raadpleeg een kind van een persoon Raadpleeg een kind van een persoon 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van het kind. </param>
        /// <returns>KindHalBasis</returns>
        public KindHalBasis GetKind (string burgerservicenummer, string id)
        {
             Org.OpenAPITools.Client.ApiResponse<KindHalBasis> localVarResponse = GetKindWithHttpInfo(burgerservicenummer, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Raadpleeg een kind van een persoon Raadpleeg een kind van een persoon 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van het kind. </param>
        /// <returns>ApiResponse of KindHalBasis</returns>
        public Org.OpenAPITools.Client.ApiResponse< KindHalBasis > GetKindWithHttpInfo (string burgerservicenummer, string id)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenPersonenApi->GetKind");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling IngeschrevenPersonenApi->GetKind");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< KindHalBasis >("/ingeschrevenpersonen/{burgerservicenummer}/kinderen/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKind", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Raadpleeg een kind van een persoon Raadpleeg een kind van een persoon 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van het kind. </param>
        /// <returns>Task of KindHalBasis</returns>
        public async System.Threading.Tasks.Task<KindHalBasis> GetKindAsync (string burgerservicenummer, string id)
        {
             Org.OpenAPITools.Client.ApiResponse<KindHalBasis> localVarResponse = await GetKindAsyncWithHttpInfo(burgerservicenummer, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Raadpleeg een kind van een persoon Raadpleeg een kind van een persoon 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van het kind. </param>
        /// <returns>Task of ApiResponse (KindHalBasis)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<KindHalBasis>> GetKindAsyncWithHttpInfo (string burgerservicenummer, string id)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenPersonenApi->GetKind");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling IngeschrevenPersonenApi->GetKind");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<KindHalBasis>("/ingeschrevenpersonen/{burgerservicenummer}/kinderen/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKind", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Levert de kinderen van een persoon Levert de kinderen van een persoon 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>KindHalCollectie</returns>
        public KindHalCollectie GetKinderen (string burgerservicenummer)
        {
             Org.OpenAPITools.Client.ApiResponse<KindHalCollectie> localVarResponse = GetKinderenWithHttpInfo(burgerservicenummer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Levert de kinderen van een persoon Levert de kinderen van een persoon 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>ApiResponse of KindHalCollectie</returns>
        public Org.OpenAPITools.Client.ApiResponse< KindHalCollectie > GetKinderenWithHttpInfo (string burgerservicenummer)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenPersonenApi->GetKinderen");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< KindHalCollectie >("/ingeschrevenpersonen/{burgerservicenummer}/kinderen", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKinderen", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Levert de kinderen van een persoon Levert de kinderen van een persoon 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>Task of KindHalCollectie</returns>
        public async System.Threading.Tasks.Task<KindHalCollectie> GetKinderenAsync (string burgerservicenummer)
        {
             Org.OpenAPITools.Client.ApiResponse<KindHalCollectie> localVarResponse = await GetKinderenAsyncWithHttpInfo(burgerservicenummer);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Levert de kinderen van een persoon Levert de kinderen van een persoon 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>Task of ApiResponse (KindHalCollectie)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<KindHalCollectie>> GetKinderenAsyncWithHttpInfo (string burgerservicenummer)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenPersonenApi->GetKinderen");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<KindHalCollectie>("/ingeschrevenpersonen/{burgerservicenummer}/kinderen", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetKinderen", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Raadpleeg een ouder van een persoon Raadpleeg een ouder van een persoon 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van de ouder. </param>
        /// <returns>OuderHalBasis</returns>
        public OuderHalBasis GetOuder (string burgerservicenummer, string id)
        {
             Org.OpenAPITools.Client.ApiResponse<OuderHalBasis> localVarResponse = GetOuderWithHttpInfo(burgerservicenummer, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Raadpleeg een ouder van een persoon Raadpleeg een ouder van een persoon 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van de ouder. </param>
        /// <returns>ApiResponse of OuderHalBasis</returns>
        public Org.OpenAPITools.Client.ApiResponse< OuderHalBasis > GetOuderWithHttpInfo (string burgerservicenummer, string id)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenPersonenApi->GetOuder");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling IngeschrevenPersonenApi->GetOuder");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< OuderHalBasis >("/ingeschrevenpersonen/{burgerservicenummer}/ouders/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOuder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Raadpleeg een ouder van een persoon Raadpleeg een ouder van een persoon 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van de ouder. </param>
        /// <returns>Task of OuderHalBasis</returns>
        public async System.Threading.Tasks.Task<OuderHalBasis> GetOuderAsync (string burgerservicenummer, string id)
        {
             Org.OpenAPITools.Client.ApiResponse<OuderHalBasis> localVarResponse = await GetOuderAsyncWithHttpInfo(burgerservicenummer, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Raadpleeg een ouder van een persoon Raadpleeg een ouder van een persoon 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van de ouder. </param>
        /// <returns>Task of ApiResponse (OuderHalBasis)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OuderHalBasis>> GetOuderAsyncWithHttpInfo (string burgerservicenummer, string id)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenPersonenApi->GetOuder");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling IngeschrevenPersonenApi->GetOuder");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OuderHalBasis>("/ingeschrevenpersonen/{burgerservicenummer}/ouders/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOuder", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Levert de ouders van een persoon Levert de ouders van een persoon 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>OuderHalCollectie</returns>
        public OuderHalCollectie GetOuders (string burgerservicenummer)
        {
             Org.OpenAPITools.Client.ApiResponse<OuderHalCollectie> localVarResponse = GetOudersWithHttpInfo(burgerservicenummer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Levert de ouders van een persoon Levert de ouders van een persoon 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>ApiResponse of OuderHalCollectie</returns>
        public Org.OpenAPITools.Client.ApiResponse< OuderHalCollectie > GetOudersWithHttpInfo (string burgerservicenummer)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenPersonenApi->GetOuders");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< OuderHalCollectie >("/ingeschrevenpersonen/{burgerservicenummer}/ouders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOuders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Levert de ouders van een persoon Levert de ouders van een persoon 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>Task of OuderHalCollectie</returns>
        public async System.Threading.Tasks.Task<OuderHalCollectie> GetOudersAsync (string burgerservicenummer)
        {
             Org.OpenAPITools.Client.ApiResponse<OuderHalCollectie> localVarResponse = await GetOudersAsyncWithHttpInfo(burgerservicenummer);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Levert de ouders van een persoon Levert de ouders van een persoon 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>Task of ApiResponse (OuderHalCollectie)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<OuderHalCollectie>> GetOudersAsyncWithHttpInfo (string burgerservicenummer)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenPersonenApi->GetOuders");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<OuderHalCollectie>("/ingeschrevenpersonen/{burgerservicenummer}/ouders", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetOuders", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Raadpleeg de partner van een persoon Raadpleeg de partner van een persoon 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van de partner. </param>
        /// <returns>PartnerHalBasis</returns>
        public PartnerHalBasis GetPartner (string burgerservicenummer, string id)
        {
             Org.OpenAPITools.Client.ApiResponse<PartnerHalBasis> localVarResponse = GetPartnerWithHttpInfo(burgerservicenummer, id);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Raadpleeg de partner van een persoon Raadpleeg de partner van een persoon 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van de partner. </param>
        /// <returns>ApiResponse of PartnerHalBasis</returns>
        public Org.OpenAPITools.Client.ApiResponse< PartnerHalBasis > GetPartnerWithHttpInfo (string burgerservicenummer, string id)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenPersonenApi->GetPartner");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling IngeschrevenPersonenApi->GetPartner");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< PartnerHalBasis >("/ingeschrevenpersonen/{burgerservicenummer}/partners/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPartner", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Raadpleeg de partner van een persoon Raadpleeg de partner van een persoon 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van de partner. </param>
        /// <returns>Task of PartnerHalBasis</returns>
        public async System.Threading.Tasks.Task<PartnerHalBasis> GetPartnerAsync (string burgerservicenummer, string id)
        {
             Org.OpenAPITools.Client.ApiResponse<PartnerHalBasis> localVarResponse = await GetPartnerAsyncWithHttpInfo(burgerservicenummer, id);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Raadpleeg de partner van een persoon Raadpleeg de partner van een persoon 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <param name="id">De identificatie van de partner. </param>
        /// <returns>Task of ApiResponse (PartnerHalBasis)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PartnerHalBasis>> GetPartnerAsyncWithHttpInfo (string burgerservicenummer, string id)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenPersonenApi->GetPartner");

            // verify the required parameter 'id' is set
            if (id == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'id' when calling IngeschrevenPersonenApi->GetPartner");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter
            localVarRequestOptions.PathParameters.Add("id", Org.OpenAPITools.Client.ClientUtils.ParameterToString(id)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PartnerHalBasis>("/ingeschrevenpersonen/{burgerservicenummer}/partners/{id}", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPartner", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Levert de actuele partners van een persoon Levert de actuele partners van een persoon. Partners uit beëindigde huwelijken of partnerschappen worden niet geretourneerd 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>PartnerHalCollectie</returns>
        public PartnerHalCollectie GetPartners (string burgerservicenummer)
        {
             Org.OpenAPITools.Client.ApiResponse<PartnerHalCollectie> localVarResponse = GetPartnersWithHttpInfo(burgerservicenummer);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Levert de actuele partners van een persoon Levert de actuele partners van een persoon. Partners uit beëindigde huwelijken of partnerschappen worden niet geretourneerd 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>ApiResponse of PartnerHalCollectie</returns>
        public Org.OpenAPITools.Client.ApiResponse< PartnerHalCollectie > GetPartnersWithHttpInfo (string burgerservicenummer)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenPersonenApi->GetPartners");

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null) localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null) localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);

            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter


            // make the HTTP request
            var localVarResponse = this.Client.Get< PartnerHalCollectie >("/ingeschrevenpersonen/{burgerservicenummer}/partners", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPartners", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

        /// <summary>
        /// Levert de actuele partners van een persoon Levert de actuele partners van een persoon. Partners uit beëindigde huwelijken of partnerschappen worden niet geretourneerd 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>Task of PartnerHalCollectie</returns>
        public async System.Threading.Tasks.Task<PartnerHalCollectie> GetPartnersAsync (string burgerservicenummer)
        {
             Org.OpenAPITools.Client.ApiResponse<PartnerHalCollectie> localVarResponse = await GetPartnersAsyncWithHttpInfo(burgerservicenummer);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Levert de actuele partners van een persoon Levert de actuele partners van een persoon. Partners uit beëindigde huwelijken of partnerschappen worden niet geretourneerd 
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="burgerservicenummer">Uniek persoonsnummer </param>
        /// <returns>Task of ApiResponse (PartnerHalCollectie)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<PartnerHalCollectie>> GetPartnersAsyncWithHttpInfo (string burgerservicenummer)
        {
            // verify the required parameter 'burgerservicenummer' is set
            if (burgerservicenummer == null)
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'burgerservicenummer' when calling IngeschrevenPersonenApi->GetPartners");


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            String[] _contentTypes = new String[] {
            };

            // to determine the Accept header
            String[] _accepts = new String[] {
                "application/hal+json",
                "application/problem+json"
            };
            
            foreach (var _contentType in _contentTypes)
                localVarRequestOptions.HeaderParameters.Add("Content-Type", _contentType);
            
            foreach (var _accept in _accepts)
                localVarRequestOptions.HeaderParameters.Add("Accept", _accept);
            
            localVarRequestOptions.PathParameters.Add("burgerservicenummer", Org.OpenAPITools.Client.ClientUtils.ParameterToString(burgerservicenummer)); // path parameter


            // make the HTTP request

            var localVarResponse = await this.AsynchronousClient.GetAsync<PartnerHalCollectie>("/ingeschrevenpersonen/{burgerservicenummer}/partners", localVarRequestOptions, this.Configuration);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("GetPartners", localVarResponse);
                if (_exception != null) throw _exception;
            }

            return localVarResponse;
        }

    }
}
