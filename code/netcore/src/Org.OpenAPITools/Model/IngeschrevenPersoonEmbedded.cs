/*
 * Bevragen Ingeschreven Personen
 *
 * API voor het bevragen van ingeschreven personen uit de basisregistratie personen (BRP), inclusief de registratie niet-ingezeten (RNI). Met deze API kun je personen zoeken en actuele gegevens over personen, kinderen, partners en ouders raadplegen.  Gegevens die er niet zijn of niet actueel zijn krijg je niet terug. Heeft een persoon bijvoorbeeld geen geldige nationaliteit, en alleen een beëindigd partnerschap, dan krijg je geen gegevens over nationaliteit en partner.  Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/tree/v1.1.0/features) voor nadere toelichting. 
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// IngeschrevenPersoonEmbedded
    /// </summary>
    [DataContract(Name = "IngeschrevenPersoonEmbedded")]
    public partial class IngeschrevenPersoonEmbedded : IEquatable<IngeschrevenPersoonEmbedded>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IngeschrevenPersoonEmbedded" /> class.
        /// </summary>
        /// <param name="ouders">De ouders van de persoon. .</param>
        /// <param name="kinderen">De kinderen van de persoon. .</param>
        /// <param name="partners">De partners van de persoon. Een beëindigd huwelijk of geregistreerd partnerschap wordt niet teruggegeven. .</param>
        public IngeschrevenPersoonEmbedded(List<OuderHalBasis> ouders = default(List<OuderHalBasis>), List<KindHalBasis> kinderen = default(List<KindHalBasis>), List<PartnerHalBasis> partners = default(List<PartnerHalBasis>))
        {
            this.Ouders = ouders;
            this.Kinderen = kinderen;
            this.Partners = partners;
        }

        /// <summary>
        /// De ouders van de persoon. 
        /// </summary>
        /// <value>De ouders van de persoon. </value>
        [DataMember(Name = "ouders", EmitDefaultValue = false)]
        public List<OuderHalBasis> Ouders { get; set; }

        /// <summary>
        /// De kinderen van de persoon. 
        /// </summary>
        /// <value>De kinderen van de persoon. </value>
        [DataMember(Name = "kinderen", EmitDefaultValue = false)]
        public List<KindHalBasis> Kinderen { get; set; }

        /// <summary>
        /// De partners van de persoon. Een beëindigd huwelijk of geregistreerd partnerschap wordt niet teruggegeven. 
        /// </summary>
        /// <value>De partners van de persoon. Een beëindigd huwelijk of geregistreerd partnerschap wordt niet teruggegeven. </value>
        [DataMember(Name = "partners", EmitDefaultValue = false)]
        public List<PartnerHalBasis> Partners { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IngeschrevenPersoonEmbedded {\n");
            sb.Append("  Ouders: ").Append(Ouders).Append("\n");
            sb.Append("  Kinderen: ").Append(Kinderen).Append("\n");
            sb.Append("  Partners: ").Append(Partners).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as IngeschrevenPersoonEmbedded);
        }

        /// <summary>
        /// Returns true if IngeschrevenPersoonEmbedded instances are equal
        /// </summary>
        /// <param name="input">Instance of IngeschrevenPersoonEmbedded to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IngeschrevenPersoonEmbedded input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Ouders == input.Ouders ||
                    this.Ouders != null &&
                    input.Ouders != null &&
                    this.Ouders.SequenceEqual(input.Ouders)
                ) && 
                (
                    this.Kinderen == input.Kinderen ||
                    this.Kinderen != null &&
                    input.Kinderen != null &&
                    this.Kinderen.SequenceEqual(input.Kinderen)
                ) && 
                (
                    this.Partners == input.Partners ||
                    this.Partners != null &&
                    input.Partners != null &&
                    this.Partners.SequenceEqual(input.Partners)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Ouders != null)
                    hashCode = hashCode * 59 + this.Ouders.GetHashCode();
                if (this.Kinderen != null)
                    hashCode = hashCode * 59 + this.Kinderen.GetHashCode();
                if (this.Partners != null)
                    hashCode = hashCode * 59 + this.Partners.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
