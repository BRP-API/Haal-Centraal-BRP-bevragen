/*
 * Bevragen Ingeschreven Personen
 *
 * API voor het bevragen van ingeschreven personen uit de basisregistratie personen (BRP), inclusief de registratie niet-ingezeten (RNI). Met deze API kun je personen zoeken en actuele gegevens over personen, kinderen, partners en ouders raadplegen.  Gegevens die er niet zijn of niet actueel zijn krijg je niet terug. Heeft een persoon bijvoorbeeld geen geldige nationaliteit, en alleen een beëindigd partnerschap, dan krijg je geen gegevens over nationaliteit en partner.  Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/tree/v1.1.0/features) voor nadere toelichting. 
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// Gegevens over de verblijfsrechtelijke status van de persoon. * **datumEinde**: Datum waarop de geldigheid van de gegevens over de verblijfstitel is beëindigd. * **datumIngang**: Datum waarop de gegevens over de verblijfstitel geldig zijn geworden. * **aanduiding** : Verblijfstiteltabel die aangeeft over welke verblijfsrechtelijke status de persoon beschikt. 
    /// </summary>
    [DataContract(Name = "Verblijfstitel")]
    public partial class Verblijfstitel : IEquatable<Verblijfstitel>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Verblijfstitel" /> class.
        /// </summary>
        /// <param name="aanduiding">aanduiding.</param>
        /// <param name="datumEinde">datumEinde.</param>
        /// <param name="datumIngang">datumIngang.</param>
        /// <param name="inOnderzoek">inOnderzoek.</param>
        public Verblijfstitel(Waardetabel aanduiding = default(Waardetabel), DatumOnvolledig datumEinde = default(DatumOnvolledig), DatumOnvolledig datumIngang = default(DatumOnvolledig), VerblijfstitelInOnderzoek inOnderzoek = default(VerblijfstitelInOnderzoek))
        {
            this.Aanduiding = aanduiding;
            this.DatumEinde = datumEinde;
            this.DatumIngang = datumIngang;
            this.InOnderzoek = inOnderzoek;
        }

        /// <summary>
        /// Gets or Sets Aanduiding
        /// </summary>
        [DataMember(Name = "aanduiding", EmitDefaultValue = false)]
        public Waardetabel Aanduiding { get; set; }

        /// <summary>
        /// Gets or Sets DatumEinde
        /// </summary>
        [DataMember(Name = "datumEinde", EmitDefaultValue = false)]
        public DatumOnvolledig DatumEinde { get; set; }

        /// <summary>
        /// Gets or Sets DatumIngang
        /// </summary>
        [DataMember(Name = "datumIngang", EmitDefaultValue = false)]
        public DatumOnvolledig DatumIngang { get; set; }

        /// <summary>
        /// Gets or Sets InOnderzoek
        /// </summary>
        [DataMember(Name = "inOnderzoek", EmitDefaultValue = false)]
        public VerblijfstitelInOnderzoek InOnderzoek { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Verblijfstitel {\n");
            sb.Append("  Aanduiding: ").Append(Aanduiding).Append("\n");
            sb.Append("  DatumEinde: ").Append(DatumEinde).Append("\n");
            sb.Append("  DatumIngang: ").Append(DatumIngang).Append("\n");
            sb.Append("  InOnderzoek: ").Append(InOnderzoek).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Verblijfstitel);
        }

        /// <summary>
        /// Returns true if Verblijfstitel instances are equal
        /// </summary>
        /// <param name="input">Instance of Verblijfstitel to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Verblijfstitel input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Aanduiding == input.Aanduiding ||
                    (this.Aanduiding != null &&
                    this.Aanduiding.Equals(input.Aanduiding))
                ) && 
                (
                    this.DatumEinde == input.DatumEinde ||
                    (this.DatumEinde != null &&
                    this.DatumEinde.Equals(input.DatumEinde))
                ) && 
                (
                    this.DatumIngang == input.DatumIngang ||
                    (this.DatumIngang != null &&
                    this.DatumIngang.Equals(input.DatumIngang))
                ) && 
                (
                    this.InOnderzoek == input.InOnderzoek ||
                    (this.InOnderzoek != null &&
                    this.InOnderzoek.Equals(input.InOnderzoek))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Aanduiding != null)
                    hashCode = hashCode * 59 + this.Aanduiding.GetHashCode();
                if (this.DatumEinde != null)
                    hashCode = hashCode * 59 + this.DatumEinde.GetHashCode();
                if (this.DatumIngang != null)
                    hashCode = hashCode * 59 + this.DatumIngang.GetHashCode();
                if (this.InOnderzoek != null)
                    hashCode = hashCode * 59 + this.InOnderzoek.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
