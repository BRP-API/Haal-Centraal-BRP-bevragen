/* 
 * Bevragingen ingeschreven personen
 *
 * API voor het ontsluiten van gegevens van ingeschreven personen en aanverwante gegevens uit de GBA en RNI. Met deze API worden de actuele gegevens van ingeschreven personen, hun kinderen, partners en ouders ontsloten. <br> Heeft een persoon bijvoorbeeld geen geldige nationaliteit, dan wordt nationaliteit niet geretourneerd. <br> Heeft een persoon een beÃ«indigd partnerschap of huwelijk, dan wordt de partner niet geretourneerd. <br> <br> Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/tree/master/features) voor nadere toelichting. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    ///  * **reden**: Een aanduiding van de reden waarom de bijhouding van de PL is opgeschort.  * **datum**: De datum waarop de bijhouding van de persoonslijst is gestaakt.  * Indien er wel een redenOpschortingBijhouding is maar er wordt geen datumOpschortingBijhouding geleverd, dan is dat datumOpschortingBijhouding onbekend.
    /// </summary>
    [DataContract]
    public partial class OpschortingBijhouding :  IEquatable<OpschortingBijhouding>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="OpschortingBijhouding" /> class.
        /// </summary>
        /// <param name="reden">reden.</param>
        /// <param name="datum">datum.</param>
        public OpschortingBijhouding(RedenOpschortingBijhoudingEnum reden = default(RedenOpschortingBijhoudingEnum), DatumOnvolledig datum = default(DatumOnvolledig))
        {
            this.Reden = reden;
            this.Datum = datum;
        }
        
        /// <summary>
        /// Gets or Sets Reden
        /// </summary>
        [DataMember(Name="reden", EmitDefaultValue=false)]
        public RedenOpschortingBijhoudingEnum Reden { get; set; }

        /// <summary>
        /// Gets or Sets Datum
        /// </summary>
        [DataMember(Name="datum", EmitDefaultValue=false)]
        public DatumOnvolledig Datum { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OpschortingBijhouding {\n");
            sb.Append("  Reden: ").Append(Reden).Append("\n");
            sb.Append("  Datum: ").Append(Datum).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as OpschortingBijhouding);
        }

        /// <summary>
        /// Returns true if OpschortingBijhouding instances are equal
        /// </summary>
        /// <param name="input">Instance of OpschortingBijhouding to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OpschortingBijhouding input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Reden == input.Reden ||
                    (this.Reden != null &&
                    this.Reden.Equals(input.Reden))
                ) && 
                (
                    this.Datum == input.Datum ||
                    (this.Datum != null &&
                    this.Datum.Equals(input.Datum))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Reden != null)
                    hashCode = hashCode * 59 + this.Reden.GetHashCode();
                if (this.Datum != null)
                    hashCode = hashCode * 59 + this.Datum.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
