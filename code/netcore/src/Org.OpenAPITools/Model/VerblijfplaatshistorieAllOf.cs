/* 
 * Bevragingen ingeschreven personen
 *
 * API voor het ontsluiten van gegevens van ingeschreven personen en aanverwante gegevens uit de GBA en RNI. Met deze API worden de actuele gegevens van ingeschreven personen, hun kinderen, partners en ouders ontsloten. <br> Heeft een persoon bijvoorbeeld geen geldige nationaliteit, dan wordt nationaliteit niet geretourneerd. <br> Heeft een persoon een beÃ«indigd partnerschap of huwelijk, dan wordt de partner niet geretourneerd. <br> <br> Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Bevragingen-ingeschreven-personen/tree/master/features) voor nadere toelichting. <br> 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// &lt;body&gt;&lt;p&gt;Gegevens over het verblijf en adres van de ingeschreven persoon. Dit is het adres waarop een persoon is ingeschreven of ingeschreven is geweest.&lt;/p&gt;&lt;p&gt;  &lt;em&gt;*&lt;/em&gt; datumAanvangAdreshuishouding** : De datum van aangifte of ambtshalve melding van verblijf en adres.&lt;/p&gt;&lt;p&gt;  &lt;em&gt;*&lt;/em&gt; datumIngangGeldigheid** : Datum waarop de gegevens over de verblijfplaats geldig zijn geworden.&lt;/p&gt;&lt;p&gt;  &lt;em&gt;*&lt;/em&gt; datumInschrijvingInGemeente**: Bij inschrijving op grond van een aangifte door de burger van zijn vestiging in een (volgende) gemeente is dit de aangiftedatum. Bij inschrijving op grond van een geboorteakte is dit de geboortedatum. Bij ambtshalve inschrijving is dit de datum waarop de betrokkene schriftelijk van het voornemen van ambtshalve opneming mededeling is gedaan.&lt;/p&gt;&lt;p&gt;  &lt;em&gt;*&lt;/em&gt; datumVestigingInNederland** : Datum van inschrijving in Nederland&lt;/p&gt;&lt;p&gt;  &lt;em&gt;*&lt;/em&gt; landVanWaarIngeschreven** : Het land waar de ingeschreven persoon verblijf hield voor (her)vestiging in Nederland.&lt;/p&gt;&lt;p&gt;  &lt;em&gt;*&lt;/em&gt; gemeenteVanInschrijving** : Een aanduiding die aangeeft in welke gemeente de PK zich bevindt. De code kan voorloopnullen bevatten&lt;/p&gt;&lt;p&gt;  &lt;em&gt;*&lt;/em&gt; landVanWaarIngeschreven** : Het LAND waar de INGESCHREVEN PERSOON verblijf hield voor (her)vestiging in Nederland.&lt;/p&gt;&lt;/body&gt;
    /// </summary>
    [DataContract]
    public partial class VerblijfplaatshistorieAllOf :  IEquatable<VerblijfplaatshistorieAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="VerblijfplaatshistorieAllOf" /> class.
        /// </summary>
        /// <param name="datumTot">datumTot.</param>
        /// <param name="geheimhoudingPersoonsgegevens">Een aanduiding die aangeeft dat gegevens wel of niet verstrekt mogen worden. Indien true: op verzoek van deze persoon is het verstrekken van gegevens over deze persoon aan bepaalde derden niet toegestaan..</param>
        public VerblijfplaatshistorieAllOf(DatumOnvolledig datumTot = default(DatumOnvolledig), bool geheimhoudingPersoonsgegevens = default(bool))
        {
            this.DatumTot = datumTot;
            this.GeheimhoudingPersoonsgegevens = geheimhoudingPersoonsgegevens;
        }
        
        /// <summary>
        /// Gets or Sets DatumTot
        /// </summary>
        [DataMember(Name="datumTot", EmitDefaultValue=false)]
        public DatumOnvolledig DatumTot { get; set; }

        /// <summary>
        /// Een aanduiding die aangeeft dat gegevens wel of niet verstrekt mogen worden. Indien true: op verzoek van deze persoon is het verstrekken van gegevens over deze persoon aan bepaalde derden niet toegestaan.
        /// </summary>
        /// <value>Een aanduiding die aangeeft dat gegevens wel of niet verstrekt mogen worden. Indien true: op verzoek van deze persoon is het verstrekken van gegevens over deze persoon aan bepaalde derden niet toegestaan.</value>
        [DataMember(Name="geheimhoudingPersoonsgegevens", EmitDefaultValue=false)]
        public bool GeheimhoudingPersoonsgegevens { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VerblijfplaatshistorieAllOf {\n");
            sb.Append("  DatumTot: ").Append(DatumTot).Append("\n");
            sb.Append("  GeheimhoudingPersoonsgegevens: ").Append(GeheimhoudingPersoonsgegevens).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as VerblijfplaatshistorieAllOf);
        }

        /// <summary>
        /// Returns true if VerblijfplaatshistorieAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of VerblijfplaatshistorieAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VerblijfplaatshistorieAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.DatumTot == input.DatumTot ||
                    (this.DatumTot != null &&
                    this.DatumTot.Equals(input.DatumTot))
                ) && 
                (
                    this.GeheimhoudingPersoonsgegevens == input.GeheimhoudingPersoonsgegevens ||
                    this.GeheimhoudingPersoonsgegevens.Equals(input.GeheimhoudingPersoonsgegevens)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.DatumTot != null)
                    hashCode = hashCode * 59 + this.DatumTot.GetHashCode();
                hashCode = hashCode * 59 + this.GeheimhoudingPersoonsgegevens.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
