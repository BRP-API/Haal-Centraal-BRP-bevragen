/*
 * Bevragen Ingeschreven Personen
 *
 * API voor het bevragen van ingeschreven personen uit de basisregistratie personen (BRP), inclusief de registratie niet-ingezeten (RNI). Met deze API kun je personen zoeken en actuele gegevens over personen, kinderen, partners en ouders raadplegen.  Gegevens die er niet zijn of niet actueel zijn krijg je niet terug. Heeft een persoon bijvoorbeeld geen geldige nationaliteit, en alleen een beÃ«indigd partnerschap, dan krijg je geen gegevens over nationaliteit en partner.  Zie de [Functionele documentatie](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/tree/v1.1.0/features) voor nadere toelichting. 
 *
 * The version of the OpenAPI document: 1.2.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// NaamPersoonAllOf
    /// </summary>
    [DataContract(Name = "NaamPersoon_allOf")]
    public partial class NaamPersoonAllOf : IEquatable<NaamPersoonAllOf>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NaamPersoonAllOf" /> class.
        /// </summary>
        /// <param name="aanhef">Kun je gebruiken als aanhef in een brief gericht aan persoon. .</param>
        /// <param name="aanschrijfwijze">Samengestelde naam die je kunt gebruiken in de communicatie met de persoon. .</param>
        /// <param name="regelVoorafgaandAanAanschrijfwijze">Deze regel moet als aparte regel boven de aanschrijfwijze worden geplaatst. Komt alleen voor bij personen met een adellijke titel of predicaat. .</param>
        /// <param name="gebruikInLopendeTekst">Naam van persoon die je kunt gebruiken als je in lopende tekst (bijvoorbeeld in een brief) aan persoon refereert. .</param>
        /// <param name="aanduidingNaamgebruik">aanduidingNaamgebruik.</param>
        /// <param name="inOnderzoek">inOnderzoek.</param>
        public NaamPersoonAllOf(string aanhef = default(string), string aanschrijfwijze = default(string), string regelVoorafgaandAanAanschrijfwijze = default(string), string gebruikInLopendeTekst = default(string), NaamgebruikEnum aanduidingNaamgebruik = default(NaamgebruikEnum), NaamPersoonInOnderzoek inOnderzoek = default(NaamPersoonInOnderzoek))
        {
            this.Aanhef = aanhef;
            this.Aanschrijfwijze = aanschrijfwijze;
            this.RegelVoorafgaandAanAanschrijfwijze = regelVoorafgaandAanAanschrijfwijze;
            this.GebruikInLopendeTekst = gebruikInLopendeTekst;
            this.AanduidingNaamgebruik = aanduidingNaamgebruik;
            this.InOnderzoek = inOnderzoek;
        }

        /// <summary>
        /// Kun je gebruiken als aanhef in een brief gericht aan persoon. 
        /// </summary>
        /// <value>Kun je gebruiken als aanhef in een brief gericht aan persoon. </value>
        [DataMember(Name = "aanhef", EmitDefaultValue = false)]
        public string Aanhef { get; set; }

        /// <summary>
        /// Samengestelde naam die je kunt gebruiken in de communicatie met de persoon. 
        /// </summary>
        /// <value>Samengestelde naam die je kunt gebruiken in de communicatie met de persoon. </value>
        [DataMember(Name = "aanschrijfwijze", EmitDefaultValue = false)]
        public string Aanschrijfwijze { get; set; }

        /// <summary>
        /// Deze regel moet als aparte regel boven de aanschrijfwijze worden geplaatst. Komt alleen voor bij personen met een adellijke titel of predicaat. 
        /// </summary>
        /// <value>Deze regel moet als aparte regel boven de aanschrijfwijze worden geplaatst. Komt alleen voor bij personen met een adellijke titel of predicaat. </value>
        [DataMember(Name = "regelVoorafgaandAanAanschrijfwijze", EmitDefaultValue = false)]
        public string RegelVoorafgaandAanAanschrijfwijze { get; set; }

        /// <summary>
        /// Naam van persoon die je kunt gebruiken als je in lopende tekst (bijvoorbeeld in een brief) aan persoon refereert. 
        /// </summary>
        /// <value>Naam van persoon die je kunt gebruiken als je in lopende tekst (bijvoorbeeld in een brief) aan persoon refereert. </value>
        [DataMember(Name = "gebruikInLopendeTekst", EmitDefaultValue = false)]
        public string GebruikInLopendeTekst { get; set; }

        /// <summary>
        /// Gets or Sets AanduidingNaamgebruik
        /// </summary>
        [DataMember(Name = "aanduidingNaamgebruik", EmitDefaultValue = false)]
        public NaamgebruikEnum AanduidingNaamgebruik { get; set; }

        /// <summary>
        /// Gets or Sets InOnderzoek
        /// </summary>
        [DataMember(Name = "inOnderzoek", EmitDefaultValue = false)]
        public NaamPersoonInOnderzoek InOnderzoek { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NaamPersoonAllOf {\n");
            sb.Append("  Aanhef: ").Append(Aanhef).Append("\n");
            sb.Append("  Aanschrijfwijze: ").Append(Aanschrijfwijze).Append("\n");
            sb.Append("  RegelVoorafgaandAanAanschrijfwijze: ").Append(RegelVoorafgaandAanAanschrijfwijze).Append("\n");
            sb.Append("  GebruikInLopendeTekst: ").Append(GebruikInLopendeTekst).Append("\n");
            sb.Append("  AanduidingNaamgebruik: ").Append(AanduidingNaamgebruik).Append("\n");
            sb.Append("  InOnderzoek: ").Append(InOnderzoek).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NaamPersoonAllOf);
        }

        /// <summary>
        /// Returns true if NaamPersoonAllOf instances are equal
        /// </summary>
        /// <param name="input">Instance of NaamPersoonAllOf to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NaamPersoonAllOf input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Aanhef == input.Aanhef ||
                    (this.Aanhef != null &&
                    this.Aanhef.Equals(input.Aanhef))
                ) && 
                (
                    this.Aanschrijfwijze == input.Aanschrijfwijze ||
                    (this.Aanschrijfwijze != null &&
                    this.Aanschrijfwijze.Equals(input.Aanschrijfwijze))
                ) && 
                (
                    this.RegelVoorafgaandAanAanschrijfwijze == input.RegelVoorafgaandAanAanschrijfwijze ||
                    (this.RegelVoorafgaandAanAanschrijfwijze != null &&
                    this.RegelVoorafgaandAanAanschrijfwijze.Equals(input.RegelVoorafgaandAanAanschrijfwijze))
                ) && 
                (
                    this.GebruikInLopendeTekst == input.GebruikInLopendeTekst ||
                    (this.GebruikInLopendeTekst != null &&
                    this.GebruikInLopendeTekst.Equals(input.GebruikInLopendeTekst))
                ) && 
                (
                    this.AanduidingNaamgebruik == input.AanduidingNaamgebruik ||
                    (this.AanduidingNaamgebruik != null &&
                    this.AanduidingNaamgebruik.Equals(input.AanduidingNaamgebruik))
                ) && 
                (
                    this.InOnderzoek == input.InOnderzoek ||
                    (this.InOnderzoek != null &&
                    this.InOnderzoek.Equals(input.InOnderzoek))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Aanhef != null)
                    hashCode = hashCode * 59 + this.Aanhef.GetHashCode();
                if (this.Aanschrijfwijze != null)
                    hashCode = hashCode * 59 + this.Aanschrijfwijze.GetHashCode();
                if (this.RegelVoorafgaandAanAanschrijfwijze != null)
                    hashCode = hashCode * 59 + this.RegelVoorafgaandAanAanschrijfwijze.GetHashCode();
                if (this.GebruikInLopendeTekst != null)
                    hashCode = hashCode * 59 + this.GebruikInLopendeTekst.GetHashCode();
                if (this.AanduidingNaamgebruik != null)
                    hashCode = hashCode * 59 + this.AanduidingNaamgebruik.GetHashCode();
                if (this.InOnderzoek != null)
                    hashCode = hashCode * 59 + this.InOnderzoek.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
