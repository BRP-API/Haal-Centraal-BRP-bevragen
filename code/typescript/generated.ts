//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.15.10.0 (NJsonSchema v10.6.10.0 (Newtonsoft.Json v13.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import axios, { AxiosError, AxiosInstance, AxiosRequestConfig, AxiosResponse, CancelToken } from 'axios';

export class Client {
    private instance: AxiosInstance;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, instance?: AxiosInstance) {

        this.instance = instance ? instance : axios.create();

        this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://www.haalcentraal.nl/haalcentraal/api/brp";

    }

    /**
     * Vindt personen
     * @param body (optional) 
     * @return Zoekactie geslaagd
     */
    getPersonen(body: PersonenQuery | undefined , cancelToken?: CancelToken | undefined): Promise<PersonenQueryResponse> {
        let url_ = this.baseUrl + "/personen";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(body);

        let options_: AxiosRequestConfig = {
            data: content_,
            method: "POST",
            url: url_,
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            },
            cancelToken
        };

        return this.instance.request(options_).catch((_error: any) => {
            if (isAxiosError(_error) && _error.response) {
                return _error.response;
            } else {
                throw _error;
            }
        }).then((_response: AxiosResponse) => {
            return this.processGetPersonen(_response);
        });
    }

    protected processGetPersonen(response: AxiosResponse): Promise<PersonenQueryResponse> {
        const status = response.status;
        let _headers: any = {};
        if (response.headers && typeof response.headers === "object") {
            for (let k in response.headers) {
                if (response.headers.hasOwnProperty(k)) {
                    _headers[k] = response.headers[k];
                }
            }
        }
        if (status === 200) {
            const _responseText = response.data;
            let result200: any = null;
            let resultData200  = _responseText;
            result200 = PersonenQueryResponse.fromJS(resultData200);
            return Promise.resolve<PersonenQueryResponse>(result200);

        } else if (status === 400) {
            const _responseText = response.data;
            let result400: any = null;
            let resultData400  = _responseText;
            result400 = BadRequestFoutbericht.fromJS(resultData400);
            return throwException("Bad Request", status, _responseText, _headers, result400);

        } else if (status === 401) {
            const _responseText = response.data;
            let result401: any = null;
            let resultData401  = _responseText;
            result401 = Foutbericht.fromJS(resultData401);
            return throwException("Unauthorized", status, _responseText, _headers, result401);

        } else if (status === 403) {
            const _responseText = response.data;
            let result403: any = null;
            let resultData403  = _responseText;
            result403 = Foutbericht.fromJS(resultData403);
            return throwException("Forbidden", status, _responseText, _headers, result403);

        } else if (status === 406) {
            const _responseText = response.data;
            let result406: any = null;
            let resultData406  = _responseText;
            result406 = Foutbericht.fromJS(resultData406);
            return throwException("Not Acceptable", status, _responseText, _headers, result406);

        } else if (status === 429) {
            const _responseText = response.data;
            let result429: any = null;
            let resultData429  = _responseText;
            result429 = Foutbericht.fromJS(resultData429);
            return throwException("Too Many Requests", status, _responseText, _headers, result429);

        } else if (status === 500) {
            const _responseText = response.data;
            let result500: any = null;
            let resultData500  = _responseText;
            result500 = Foutbericht.fromJS(resultData500);
            return throwException("Internal Server Error", status, _responseText, _headers, result500);

        } else if (status === 501) {
            const _responseText = response.data;
            let result501: any = null;
            let resultData501  = _responseText;
            result501 = Foutbericht.fromJS(resultData501);
            return throwException("Not Implemented", status, _responseText, _headers, result501);

        } else if (status === 503) {
            const _responseText = response.data;
            let result503: any = null;
            let resultData503  = _responseText;
            result503 = Foutbericht.fromJS(resultData503);
            return throwException("Service Unavailable", status, _responseText, _headers, result503);

        } else {
            const _responseText = response.data;
            let resultdefault: any = null;
            let resultDatadefault  = _responseText;
            resultdefault = Foutbericht.fromJS(resultDatadefault);
            return throwException("Er is een onverwachte fout opgetreden", status, _responseText, _headers, resultdefault);

        }
    }
}

export class PersonenQueryResponse implements IPersonenQueryResponse {

    protected _discriminator: string;

    constructor(data?: IPersonenQueryResponse) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "PersonenQueryResponse";
    }

    init(_data?: any) {
    }

    static fromJS(data: any): PersonenQueryResponse {
        data = typeof data === 'object' ? data : {};
        if (data["type"] === "ZoekMetGeslachtsnaamEnGeboortedatum") {
            let result = new ZoekMetGeslachtsnaamEnGeboortedatumResponse();
            result.init(data);
            return result;
        }
        if (data["type"] === "ZoekMetNaamEnGemeenteVanInschrijving") {
            let result = new ZoekMetNaamEnGemeenteVanInschrijvingResponse();
            result.init(data);
            return result;
        }
        if (data["type"] === "RaadpleegMetBurgerservicenummer") {
            let result = new RaadpleegMetBurgerservicenummerResponse();
            result.init(data);
            return result;
        }
        if (data["type"] === "ZoekMetPostcodeEnHuisnummer") {
            let result = new ZoekMetPostcodeEnHuisnummerResponse();
            result.init(data);
            return result;
        }
        if (data["type"] === "ZoekMetStraatHuisnummerEnGemeenteVanInschrijving") {
            let result = new ZoekMetStraatHuisnummerEnGemeenteVanInschrijvingResponse();
            result.init(data);
            return result;
        }
        if (data["type"] === "ZoekMetNummeraanduidingIdentificatie") {
            let result = new ZoekMetNummeraanduidingIdentificatieResponse();
            result.init(data);
            return result;
        }
        let result = new PersonenQueryResponse();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this._discriminator;
        return data;
    }
}

export interface IPersonenQueryResponse {
}

export class ZoekMetGeslachtsnaamEnGeboortedatumResponse extends PersonenQueryResponse implements IZoekMetGeslachtsnaamEnGeboortedatumResponse {
    personen?: PersoonBeperkt[];

    constructor(data?: IZoekMetGeslachtsnaamEnGeboortedatumResponse) {
        super(data);
        this._discriminator = "ZoekMetGeslachtsnaamEnGeboortedatum";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["personen"])) {
                this.personen = [] as any;
                for (let item of _data["personen"])
                    this.personen!.push(PersoonBeperkt.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): ZoekMetGeslachtsnaamEnGeboortedatumResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ZoekMetGeslachtsnaamEnGeboortedatumResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.personen)) {
            data["personen"] = [];
            for (let item of this.personen)
                data["personen"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IZoekMetGeslachtsnaamEnGeboortedatumResponse extends IPersonenQueryResponse {
    personen?: PersoonBeperkt[];
}

export class ZoekMetNaamEnGemeenteVanInschrijvingResponse extends PersonenQueryResponse implements IZoekMetNaamEnGemeenteVanInschrijvingResponse {
    personen?: PersoonBeperkt[];

    constructor(data?: IZoekMetNaamEnGemeenteVanInschrijvingResponse) {
        super(data);
        this._discriminator = "ZoekMetNaamEnGemeenteVanInschrijving";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["personen"])) {
                this.personen = [] as any;
                for (let item of _data["personen"])
                    this.personen!.push(PersoonBeperkt.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): ZoekMetNaamEnGemeenteVanInschrijvingResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ZoekMetNaamEnGemeenteVanInschrijvingResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.personen)) {
            data["personen"] = [];
            for (let item of this.personen)
                data["personen"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IZoekMetNaamEnGemeenteVanInschrijvingResponse extends IPersonenQueryResponse {
    personen?: PersoonBeperkt[];
}

export class RaadpleegMetBurgerservicenummerResponse extends PersonenQueryResponse implements IRaadpleegMetBurgerservicenummerResponse {
    personen?: Persoon[];

    constructor(data?: IRaadpleegMetBurgerservicenummerResponse) {
        super(data);
        this._discriminator = "RaadpleegMetBurgerservicenummer";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["personen"])) {
                this.personen = [] as any;
                for (let item of _data["personen"])
                    this.personen!.push(Persoon.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): RaadpleegMetBurgerservicenummerResponse {
        data = typeof data === 'object' ? data : {};
        let result = new RaadpleegMetBurgerservicenummerResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.personen)) {
            data["personen"] = [];
            for (let item of this.personen)
                data["personen"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IRaadpleegMetBurgerservicenummerResponse extends IPersonenQueryResponse {
    personen?: Persoon[];
}

export class ZoekMetPostcodeEnHuisnummerResponse extends PersonenQueryResponse implements IZoekMetPostcodeEnHuisnummerResponse {
    personen?: PersoonBeperkt[];

    constructor(data?: IZoekMetPostcodeEnHuisnummerResponse) {
        super(data);
        this._discriminator = "ZoekMetPostcodeEnHuisnummer";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["personen"])) {
                this.personen = [] as any;
                for (let item of _data["personen"])
                    this.personen!.push(PersoonBeperkt.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): ZoekMetPostcodeEnHuisnummerResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ZoekMetPostcodeEnHuisnummerResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.personen)) {
            data["personen"] = [];
            for (let item of this.personen)
                data["personen"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IZoekMetPostcodeEnHuisnummerResponse extends IPersonenQueryResponse {
    personen?: PersoonBeperkt[];
}

export class ZoekMetStraatHuisnummerEnGemeenteVanInschrijvingResponse extends PersonenQueryResponse implements IZoekMetStraatHuisnummerEnGemeenteVanInschrijvingResponse {
    personen?: PersoonBeperkt[];

    constructor(data?: IZoekMetStraatHuisnummerEnGemeenteVanInschrijvingResponse) {
        super(data);
        this._discriminator = "ZoekMetStraatHuisnummerEnGemeenteVanInschrijving";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["personen"])) {
                this.personen = [] as any;
                for (let item of _data["personen"])
                    this.personen!.push(PersoonBeperkt.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): ZoekMetStraatHuisnummerEnGemeenteVanInschrijvingResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ZoekMetStraatHuisnummerEnGemeenteVanInschrijvingResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.personen)) {
            data["personen"] = [];
            for (let item of this.personen)
                data["personen"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IZoekMetStraatHuisnummerEnGemeenteVanInschrijvingResponse extends IPersonenQueryResponse {
    personen?: PersoonBeperkt[];
}

export class ZoekMetNummeraanduidingIdentificatieResponse extends PersonenQueryResponse implements IZoekMetNummeraanduidingIdentificatieResponse {
    personen?: PersoonBeperkt[];

    constructor(data?: IZoekMetNummeraanduidingIdentificatieResponse) {
        super(data);
        this._discriminator = "ZoekMetNummeraanduidingIdentificatie";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["personen"])) {
                this.personen = [] as any;
                for (let item of _data["personen"])
                    this.personen!.push(PersoonBeperkt.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): ZoekMetNummeraanduidingIdentificatieResponse {
        data = typeof data === 'object' ? data : {};
        let result = new ZoekMetNummeraanduidingIdentificatieResponse();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.personen)) {
            data["personen"] = [];
            for (let item of this.personen)
                data["personen"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IZoekMetNummeraanduidingIdentificatieResponse extends IPersonenQueryResponse {
    personen?: PersoonBeperkt[];
}

export class PersonenQuery implements IPersonenQuery {
    fields!: string;
    gemeenteVanInschrijving?: string;

    protected _discriminator: string;

    constructor(data?: IPersonenQuery) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "PersonenQuery";
    }

    init(_data?: any) {
        if (_data) {
            this.fields = _data["fields"];
            this.gemeenteVanInschrijving = _data["gemeenteVanInschrijving"];
        }
    }

    static fromJS(data: any): PersonenQuery {
        data = typeof data === 'object' ? data : {};
        if (data["type"] === "ZoekMetGeslachtsnaamEnGeboortedatum") {
            let result = new ZoekMetGeslachtsnaamEnGeboortedatum();
            result.init(data);
            return result;
        }
        if (data["type"] === "ZoekMetNaamEnGemeenteVanInschrijving") {
            let result = new ZoekMetNaamEnGemeenteVanInschrijving();
            result.init(data);
            return result;
        }
        if (data["type"] === "RaadpleegMetBurgerservicenummer") {
            let result = new RaadpleegMetBurgerservicenummer();
            result.init(data);
            return result;
        }
        if (data["type"] === "ZoekMetPostcodeEnHuisnummer") {
            let result = new ZoekMetPostcodeEnHuisnummer();
            result.init(data);
            return result;
        }
        if (data["type"] === "ZoekMetStraatHuisnummerEnGemeenteVanInschrijving") {
            let result = new ZoekMetStraatHuisnummerEnGemeenteVanInschrijving();
            result.init(data);
            return result;
        }
        if (data["type"] === "ZoekMetNummeraanduidingIdentificatie") {
            let result = new ZoekMetNummeraanduidingIdentificatie();
            result.init(data);
            return result;
        }
        let result = new PersonenQuery();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this._discriminator;
        data["fields"] = this.fields;
        data["gemeenteVanInschrijving"] = this.gemeenteVanInschrijving;
        return data;
    }
}

export interface IPersonenQuery {
    fields: string;
    gemeenteVanInschrijving?: string;
}

export class ZoekMetGeslachtsnaamEnGeboortedatum extends PersonenQuery implements IZoekMetGeslachtsnaamEnGeboortedatum {
    inclusiefOverledenPersonen?: boolean;
    /** Je kunt alleen zoeken met een volledig geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.3.0/features/parametervalidatie.feature)
 */
    geboortedatum?: Date;
    geboorteplaats?: string;
    geslachtsnaam?: string;
    geslachtsaanduiding?: string;
    voorvoegsel?: string;
    voornamen?: string;

    constructor(data?: IZoekMetGeslachtsnaamEnGeboortedatum) {
        super(data);
        this._discriminator = "ZoekMetGeslachtsnaamEnGeboortedatum";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.inclusiefOverledenPersonen = _data["inclusiefOverledenPersonen"];
            this.geboortedatum = _data["geboortedatum"] ? new Date(_data["geboortedatum"].toString()) : <any>undefined;
            this.geboorteplaats = _data["geboorteplaats"];
            this.geslachtsnaam = _data["geslachtsnaam"];
            this.geslachtsaanduiding = _data["geslachtsaanduiding"];
            this.voorvoegsel = _data["voorvoegsel"];
            this.voornamen = _data["voornamen"];
        }
    }

    static override fromJS(data: any): ZoekMetGeslachtsnaamEnGeboortedatum {
        data = typeof data === 'object' ? data : {};
        let result = new ZoekMetGeslachtsnaamEnGeboortedatum();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inclusiefOverledenPersonen"] = this.inclusiefOverledenPersonen;
        data["geboortedatum"] = this.geboortedatum ? formatDate(this.geboortedatum) : <any>undefined;
        data["geboorteplaats"] = this.geboorteplaats;
        data["geslachtsnaam"] = this.geslachtsnaam;
        data["geslachtsaanduiding"] = this.geslachtsaanduiding;
        data["voorvoegsel"] = this.voorvoegsel;
        data["voornamen"] = this.voornamen;
        super.toJSON(data);
        return data;
    }
}

export interface IZoekMetGeslachtsnaamEnGeboortedatum extends IPersonenQuery {
    inclusiefOverledenPersonen?: boolean;
    /** Je kunt alleen zoeken met een volledig geboortedatum. Zie [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.3.0/features/parametervalidatie.feature)
 */
    geboortedatum?: Date;
    geboorteplaats?: string;
    geslachtsnaam?: string;
    geslachtsaanduiding?: string;
    voorvoegsel?: string;
    voornamen?: string;
}

export class ZoekMetNaamEnGemeenteVanInschrijving extends PersonenQuery implements IZoekMetNaamEnGemeenteVanInschrijving {
    inclusiefOverledenPersonen?: boolean;
    geslachtsaanduiding?: string;
    geslachtsnaam?: string;
    voorvoegsel?: string;
    voornamen?: string;

    constructor(data?: IZoekMetNaamEnGemeenteVanInschrijving) {
        super(data);
        this._discriminator = "ZoekMetNaamEnGemeenteVanInschrijving";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.inclusiefOverledenPersonen = _data["inclusiefOverledenPersonen"];
            this.geslachtsaanduiding = _data["geslachtsaanduiding"];
            this.geslachtsnaam = _data["geslachtsnaam"];
            this.voorvoegsel = _data["voorvoegsel"];
            this.voornamen = _data["voornamen"];
        }
    }

    static override fromJS(data: any): ZoekMetNaamEnGemeenteVanInschrijving {
        data = typeof data === 'object' ? data : {};
        let result = new ZoekMetNaamEnGemeenteVanInschrijving();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inclusiefOverledenPersonen"] = this.inclusiefOverledenPersonen;
        data["geslachtsaanduiding"] = this.geslachtsaanduiding;
        data["geslachtsnaam"] = this.geslachtsnaam;
        data["voorvoegsel"] = this.voorvoegsel;
        data["voornamen"] = this.voornamen;
        super.toJSON(data);
        return data;
    }
}

export interface IZoekMetNaamEnGemeenteVanInschrijving extends IPersonenQuery {
    inclusiefOverledenPersonen?: boolean;
    geslachtsaanduiding?: string;
    geslachtsnaam?: string;
    voorvoegsel?: string;
    voornamen?: string;
}

export class RaadpleegMetBurgerservicenummer extends PersonenQuery implements IRaadpleegMetBurgerservicenummer {
    burgerservicenummer?: string[];

    constructor(data?: IRaadpleegMetBurgerservicenummer) {
        super(data);
        this._discriminator = "RaadpleegMetBurgerservicenummer";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["burgerservicenummer"])) {
                this.burgerservicenummer = [] as any;
                for (let item of _data["burgerservicenummer"])
                    this.burgerservicenummer!.push(item);
            }
        }
    }

    static override fromJS(data: any): RaadpleegMetBurgerservicenummer {
        data = typeof data === 'object' ? data : {};
        let result = new RaadpleegMetBurgerservicenummer();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.burgerservicenummer)) {
            data["burgerservicenummer"] = [];
            for (let item of this.burgerservicenummer)
                data["burgerservicenummer"].push(item);
        }
        super.toJSON(data);
        return data;
    }
}

export interface IRaadpleegMetBurgerservicenummer extends IPersonenQuery {
    burgerservicenummer?: string[];
}

export class ZoekMetPostcodeEnHuisnummer extends PersonenQuery implements IZoekMetPostcodeEnHuisnummer {
    inclusiefOverledenPersonen?: boolean;
    huisletter?: string;
    huisnummer?: number;
    huisnummertoevoeging?: string;
    postcode?: string;

    constructor(data?: IZoekMetPostcodeEnHuisnummer) {
        super(data);
        this._discriminator = "ZoekMetPostcodeEnHuisnummer";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.inclusiefOverledenPersonen = _data["inclusiefOverledenPersonen"];
            this.huisletter = _data["huisletter"];
            this.huisnummer = _data["huisnummer"];
            this.huisnummertoevoeging = _data["huisnummertoevoeging"];
            this.postcode = _data["postcode"];
        }
    }

    static override fromJS(data: any): ZoekMetPostcodeEnHuisnummer {
        data = typeof data === 'object' ? data : {};
        let result = new ZoekMetPostcodeEnHuisnummer();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inclusiefOverledenPersonen"] = this.inclusiefOverledenPersonen;
        data["huisletter"] = this.huisletter;
        data["huisnummer"] = this.huisnummer;
        data["huisnummertoevoeging"] = this.huisnummertoevoeging;
        data["postcode"] = this.postcode;
        super.toJSON(data);
        return data;
    }
}

export interface IZoekMetPostcodeEnHuisnummer extends IPersonenQuery {
    inclusiefOverledenPersonen?: boolean;
    huisletter?: string;
    huisnummer?: number;
    huisnummertoevoeging?: string;
    postcode?: string;
}

export class ZoekMetStraatHuisnummerEnGemeenteVanInschrijving extends PersonenQuery implements IZoekMetStraatHuisnummerEnGemeenteVanInschrijving {
    inclusiefOverledenPersonen?: boolean;
    huisletter?: string;
    huisnummer?: number;
    huisnummertoevoeging?: string;
    straat?: string;

    constructor(data?: IZoekMetStraatHuisnummerEnGemeenteVanInschrijving) {
        super(data);
        this._discriminator = "ZoekMetStraatHuisnummerEnGemeenteVanInschrijving";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.inclusiefOverledenPersonen = _data["inclusiefOverledenPersonen"];
            this.huisletter = _data["huisletter"];
            this.huisnummer = _data["huisnummer"];
            this.huisnummertoevoeging = _data["huisnummertoevoeging"];
            this.straat = _data["straat"];
        }
    }

    static override fromJS(data: any): ZoekMetStraatHuisnummerEnGemeenteVanInschrijving {
        data = typeof data === 'object' ? data : {};
        let result = new ZoekMetStraatHuisnummerEnGemeenteVanInschrijving();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inclusiefOverledenPersonen"] = this.inclusiefOverledenPersonen;
        data["huisletter"] = this.huisletter;
        data["huisnummer"] = this.huisnummer;
        data["huisnummertoevoeging"] = this.huisnummertoevoeging;
        data["straat"] = this.straat;
        super.toJSON(data);
        return data;
    }
}

export interface IZoekMetStraatHuisnummerEnGemeenteVanInschrijving extends IPersonenQuery {
    inclusiefOverledenPersonen?: boolean;
    huisletter?: string;
    huisnummer?: number;
    huisnummertoevoeging?: string;
    straat?: string;
}

export class ZoekMetNummeraanduidingIdentificatie extends PersonenQuery implements IZoekMetNummeraanduidingIdentificatie {
    inclusiefOverledenPersonen?: boolean;
    nummeraanduidingIdentificatie?: string;

    constructor(data?: IZoekMetNummeraanduidingIdentificatie) {
        super(data);
        this._discriminator = "ZoekMetNummeraanduidingIdentificatie";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.inclusiefOverledenPersonen = _data["inclusiefOverledenPersonen"];
            this.nummeraanduidingIdentificatie = _data["nummeraanduidingIdentificatie"];
        }
    }

    static override fromJS(data: any): ZoekMetNummeraanduidingIdentificatie {
        data = typeof data === 'object' ? data : {};
        let result = new ZoekMetNummeraanduidingIdentificatie();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inclusiefOverledenPersonen"] = this.inclusiefOverledenPersonen;
        data["nummeraanduidingIdentificatie"] = this.nummeraanduidingIdentificatie;
        super.toJSON(data);
        return data;
    }
}

export interface IZoekMetNummeraanduidingIdentificatie extends IPersonenQuery {
    inclusiefOverledenPersonen?: boolean;
    nummeraanduidingIdentificatie?: string;
}

/** Terugmelding bij een fout. JSON representatie in lijn met [RFC7807](https://tools.ietf.org/html/rfc7807). */
export class Foutbericht implements IFoutbericht {
    /** Link naar meer informatie over deze fout */
    type?: string;
    /** Beschrijving van de fout */
    title?: string;
    /** Http status code */
    status?: number;
    /** Details over de fout */
    detail?: string;
    /** Uri van de aanroep die de fout heeft veroorzaakt */
    instance?: string;
    /** Systeemcode die het type fout aangeeft */
    code?: string;

    constructor(data?: IFoutbericht) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.title = _data["title"];
            this.status = _data["status"];
            this.detail = _data["detail"];
            this.instance = _data["instance"];
            this.code = _data["code"];
        }
    }

    static fromJS(data: any): Foutbericht {
        data = typeof data === 'object' ? data : {};
        let result = new Foutbericht();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["title"] = this.title;
        data["status"] = this.status;
        data["detail"] = this.detail;
        data["instance"] = this.instance;
        data["code"] = this.code;
        return data;
    }
}

/** Terugmelding bij een fout. JSON representatie in lijn met [RFC7807](https://tools.ietf.org/html/rfc7807). */
export interface IFoutbericht {
    /** Link naar meer informatie over deze fout */
    type?: string;
    /** Beschrijving van de fout */
    title?: string;
    /** Http status code */
    status?: number;
    /** Details over de fout */
    detail?: string;
    /** Uri van de aanroep die de fout heeft veroorzaakt */
    instance?: string;
    /** Systeemcode die het type fout aangeeft */
    code?: string;
}

export class BadRequestFoutbericht extends Foutbericht implements IBadRequestFoutbericht {
    /** Foutmelding per fout in een parameter. Alle gevonden fouten worden één keer teruggemeld. */
    invalidParams?: InvalidParams[];

    constructor(data?: IBadRequestFoutbericht) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            if (Array.isArray(_data["invalidParams"])) {
                this.invalidParams = [] as any;
                for (let item of _data["invalidParams"])
                    this.invalidParams!.push(InvalidParams.fromJS(item));
            }
        }
    }

    static override fromJS(data: any): BadRequestFoutbericht {
        data = typeof data === 'object' ? data : {};
        let result = new BadRequestFoutbericht();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        if (Array.isArray(this.invalidParams)) {
            data["invalidParams"] = [];
            for (let item of this.invalidParams)
                data["invalidParams"].push(item.toJSON());
        }
        super.toJSON(data);
        return data;
    }
}

export interface IBadRequestFoutbericht extends IFoutbericht {
    /** Foutmelding per fout in een parameter. Alle gevonden fouten worden één keer teruggemeld. */
    invalidParams?: InvalidParams[];
}

/** Details over fouten in opgegeven parameters */
export class InvalidParams implements IInvalidParams {
    type?: string;
    /** Naam van de parameter */
    name?: string;
    /** Systeemcode die het type fout aangeeft */
    code?: string;
    /** Beschrijving van de fout op de parameterwaarde */
    reason?: string;

    constructor(data?: IInvalidParams) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.type = _data["type"];
            this.name = _data["name"];
            this.code = _data["code"];
            this.reason = _data["reason"];
        }
    }

    static fromJS(data: any): InvalidParams {
        data = typeof data === 'object' ? data : {};
        let result = new InvalidParams();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["name"] = this.name;
        data["code"] = this.code;
        data["reason"] = this.reason;
        return data;
    }
}

/** Details over fouten in opgegeven parameters */
export interface IInvalidParams {
    type?: string;
    /** Naam van de parameter */
    name?: string;
    /** Systeemcode die het type fout aangeeft */
    code?: string;
    /** Beschrijving van de fout op de parameterwaarde */
    reason?: string;
}

export class PersoonBeperkt implements IPersoonBeperkt {
    burgerservicenummer?: string;
    geboorte?: GeboorteBeperkt;
    geheimhoudingPersoonsgegevens?: boolean;
    geslachtsaanduiding?: Waardetabel;
    leeftijd?: number;
    naam?: NaamBasis;
    opschortingBijhouding?: OpschortingBijhoudingBasis;
    overlijden?: OverlijdenBasis;
    verblijfplaats?: AbstractVerblijfplaatsBeperkt;

    constructor(data?: IPersoonBeperkt) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.burgerservicenummer = _data["burgerservicenummer"];
            this.geboorte = _data["geboorte"] ? GeboorteBeperkt.fromJS(_data["geboorte"]) : <any>undefined;
            this.geheimhoudingPersoonsgegevens = _data["geheimhoudingPersoonsgegevens"];
            this.geslachtsaanduiding = _data["geslachtsaanduiding"] ? Waardetabel.fromJS(_data["geslachtsaanduiding"]) : <any>undefined;
            this.leeftijd = _data["leeftijd"];
            this.naam = _data["naam"] ? NaamBasis.fromJS(_data["naam"]) : <any>undefined;
            this.opschortingBijhouding = _data["opschortingBijhouding"] ? OpschortingBijhoudingBasis.fromJS(_data["opschortingBijhouding"]) : <any>undefined;
            this.overlijden = _data["overlijden"] ? OverlijdenBasis.fromJS(_data["overlijden"]) : <any>undefined;
            this.verblijfplaats = _data["verblijfplaats"] ? AbstractVerblijfplaatsBeperkt.fromJS(_data["verblijfplaats"]) : <any>undefined;
        }
    }

    static fromJS(data: any): PersoonBeperkt {
        data = typeof data === 'object' ? data : {};
        let result = new PersoonBeperkt();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["burgerservicenummer"] = this.burgerservicenummer;
        data["geboorte"] = this.geboorte ? this.geboorte.toJSON() : <any>undefined;
        data["geheimhoudingPersoonsgegevens"] = this.geheimhoudingPersoonsgegevens;
        data["geslachtsaanduiding"] = this.geslachtsaanduiding ? this.geslachtsaanduiding.toJSON() : <any>undefined;
        data["leeftijd"] = this.leeftijd;
        data["naam"] = this.naam ? this.naam.toJSON() : <any>undefined;
        data["opschortingBijhouding"] = this.opschortingBijhouding ? this.opschortingBijhouding.toJSON() : <any>undefined;
        data["overlijden"] = this.overlijden ? this.overlijden.toJSON() : <any>undefined;
        data["verblijfplaats"] = this.verblijfplaats ? this.verblijfplaats.toJSON() : <any>undefined;
        return data;
    }
}

export interface IPersoonBeperkt {
    burgerservicenummer?: string;
    geboorte?: GeboorteBeperkt;
    geheimhoudingPersoonsgegevens?: boolean;
    geslachtsaanduiding?: Waardetabel;
    leeftijd?: number;
    naam?: NaamBasis;
    opschortingBijhouding?: OpschortingBijhoudingBasis;
    overlijden?: OverlijdenBasis;
    verblijfplaats?: AbstractVerblijfplaatsBeperkt;
}

export class Persoon implements IPersoon {
    aNummer?: string;
    burgerservicenummer?: string;
    datumEersteInschrijvingGBA?: AbstractDatum;
    geheimhoudingPersoonsgegevens?: boolean;
    geslachtsaanduiding?: Waardetabel;
    inOnderzoek?: PersoonInOnderzoek;
    kiesrecht?: Kiesrecht;
    leeftijd?: number;
    naam?: NaamPersoon;
    nationaliteiten?: AbstractNationaliteit[];
    geboorte?: Geboorte;
    opschortingBijhouding?: OpschortingBijhouding;
    overlijden?: Overlijden;
    verblijfplaats?: AbstractVerblijfplaats;
    gezagsverhouding?: Gezagsverhouding;
    verblijfstitel?: Verblijfstitel;
    reisdocumentnummers?: string[];
    kinderen?: AbstractKind[];
    ouders?: AbstractOuder[];
    partners?: AbstractPartner[];

    constructor(data?: IPersoon) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.aNummer = _data["aNummer"];
            this.burgerservicenummer = _data["burgerservicenummer"];
            this.datumEersteInschrijvingGBA = _data["datumEersteInschrijvingGBA"] ? AbstractDatum.fromJS(_data["datumEersteInschrijvingGBA"]) : <any>undefined;
            this.geheimhoudingPersoonsgegevens = _data["geheimhoudingPersoonsgegevens"];
            this.geslachtsaanduiding = _data["geslachtsaanduiding"] ? Waardetabel.fromJS(_data["geslachtsaanduiding"]) : <any>undefined;
            this.inOnderzoek = _data["inOnderzoek"] ? PersoonInOnderzoek.fromJS(_data["inOnderzoek"]) : <any>undefined;
            this.kiesrecht = _data["kiesrecht"] ? Kiesrecht.fromJS(_data["kiesrecht"]) : <any>undefined;
            this.leeftijd = _data["leeftijd"];
            this.naam = _data["naam"] ? NaamPersoon.fromJS(_data["naam"]) : <any>undefined;
            if (Array.isArray(_data["nationaliteiten"])) {
                this.nationaliteiten = [] as any;
                for (let item of _data["nationaliteiten"])
                    this.nationaliteiten!.push(AbstractNationaliteit.fromJS(item));
            }
            this.geboorte = _data["geboorte"] ? Geboorte.fromJS(_data["geboorte"]) : <any>undefined;
            this.opschortingBijhouding = _data["opschortingBijhouding"] ? OpschortingBijhouding.fromJS(_data["opschortingBijhouding"]) : <any>undefined;
            this.overlijden = _data["overlijden"] ? Overlijden.fromJS(_data["overlijden"]) : <any>undefined;
            this.verblijfplaats = _data["verblijfplaats"] ? AbstractVerblijfplaats.fromJS(_data["verblijfplaats"]) : <any>undefined;
            this.gezagsverhouding = _data["gezagsverhouding"] ? Gezagsverhouding.fromJS(_data["gezagsverhouding"]) : <any>undefined;
            this.verblijfstitel = _data["verblijfstitel"] ? Verblijfstitel.fromJS(_data["verblijfstitel"]) : <any>undefined;
            if (Array.isArray(_data["reisdocumentnummers"])) {
                this.reisdocumentnummers = [] as any;
                for (let item of _data["reisdocumentnummers"])
                    this.reisdocumentnummers!.push(item);
            }
            if (Array.isArray(_data["kinderen"])) {
                this.kinderen = [] as any;
                for (let item of _data["kinderen"])
                    this.kinderen!.push(AbstractKind.fromJS(item));
            }
            if (Array.isArray(_data["ouders"])) {
                this.ouders = [] as any;
                for (let item of _data["ouders"])
                    this.ouders!.push(AbstractOuder.fromJS(item));
            }
            if (Array.isArray(_data["partners"])) {
                this.partners = [] as any;
                for (let item of _data["partners"])
                    this.partners!.push(AbstractPartner.fromJS(item));
            }
        }
    }

    static fromJS(data: any): Persoon {
        data = typeof data === 'object' ? data : {};
        let result = new Persoon();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["aNummer"] = this.aNummer;
        data["burgerservicenummer"] = this.burgerservicenummer;
        data["datumEersteInschrijvingGBA"] = this.datumEersteInschrijvingGBA ? this.datumEersteInschrijvingGBA.toJSON() : <any>undefined;
        data["geheimhoudingPersoonsgegevens"] = this.geheimhoudingPersoonsgegevens;
        data["geslachtsaanduiding"] = this.geslachtsaanduiding ? this.geslachtsaanduiding.toJSON() : <any>undefined;
        data["inOnderzoek"] = this.inOnderzoek ? this.inOnderzoek.toJSON() : <any>undefined;
        data["kiesrecht"] = this.kiesrecht ? this.kiesrecht.toJSON() : <any>undefined;
        data["leeftijd"] = this.leeftijd;
        data["naam"] = this.naam ? this.naam.toJSON() : <any>undefined;
        if (Array.isArray(this.nationaliteiten)) {
            data["nationaliteiten"] = [];
            for (let item of this.nationaliteiten)
                data["nationaliteiten"].push(item.toJSON());
        }
        data["geboorte"] = this.geboorte ? this.geboorte.toJSON() : <any>undefined;
        data["opschortingBijhouding"] = this.opschortingBijhouding ? this.opschortingBijhouding.toJSON() : <any>undefined;
        data["overlijden"] = this.overlijden ? this.overlijden.toJSON() : <any>undefined;
        data["verblijfplaats"] = this.verblijfplaats ? this.verblijfplaats.toJSON() : <any>undefined;
        data["gezagsverhouding"] = this.gezagsverhouding ? this.gezagsverhouding.toJSON() : <any>undefined;
        data["verblijfstitel"] = this.verblijfstitel ? this.verblijfstitel.toJSON() : <any>undefined;
        if (Array.isArray(this.reisdocumentnummers)) {
            data["reisdocumentnummers"] = [];
            for (let item of this.reisdocumentnummers)
                data["reisdocumentnummers"].push(item);
        }
        if (Array.isArray(this.kinderen)) {
            data["kinderen"] = [];
            for (let item of this.kinderen)
                data["kinderen"].push(item.toJSON());
        }
        if (Array.isArray(this.ouders)) {
            data["ouders"] = [];
            for (let item of this.ouders)
                data["ouders"].push(item.toJSON());
        }
        if (Array.isArray(this.partners)) {
            data["partners"] = [];
            for (let item of this.partners)
                data["partners"].push(item.toJSON());
        }
        return data;
    }
}

export interface IPersoon {
    aNummer?: string;
    burgerservicenummer?: string;
    datumEersteInschrijvingGBA?: AbstractDatum;
    geheimhoudingPersoonsgegevens?: boolean;
    geslachtsaanduiding?: Waardetabel;
    inOnderzoek?: PersoonInOnderzoek;
    kiesrecht?: Kiesrecht;
    leeftijd?: number;
    naam?: NaamPersoon;
    nationaliteiten?: AbstractNationaliteit[];
    geboorte?: Geboorte;
    opschortingBijhouding?: OpschortingBijhouding;
    overlijden?: Overlijden;
    verblijfplaats?: AbstractVerblijfplaats;
    gezagsverhouding?: Gezagsverhouding;
    verblijfstitel?: Verblijfstitel;
    reisdocumentnummers?: string[];
    kinderen?: AbstractKind[];
    ouders?: AbstractOuder[];
    partners?: AbstractPartner[];
}

export class InOnderzoek implements IInOnderzoek {
    datumIngangOnderzoek?: AbstractDatum;

    constructor(data?: IInOnderzoek) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.datumIngangOnderzoek = _data["datumIngangOnderzoek"] ? AbstractDatum.fromJS(_data["datumIngangOnderzoek"]) : <any>undefined;
        }
    }

    static fromJS(data: any): InOnderzoek {
        data = typeof data === 'object' ? data : {};
        let result = new InOnderzoek();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["datumIngangOnderzoek"] = this.datumIngangOnderzoek ? this.datumIngangOnderzoek.toJSON() : <any>undefined;
        return data;
    }
}

export interface IInOnderzoek {
    datumIngangOnderzoek?: AbstractDatum;
}

/** Geeft aan welke gegevens van de persoon in onderzoek zijn. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/in_onderzoek.feature). */
export class PersoonInOnderzoek extends InOnderzoek implements IPersoonInOnderzoek {
    burgerservicenummer?: boolean;
    geslachtsaanduiding?: boolean;
    leeftijd?: boolean;

    constructor(data?: IPersoonInOnderzoek) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.burgerservicenummer = _data["burgerservicenummer"];
            this.geslachtsaanduiding = _data["geslachtsaanduiding"];
            this.leeftijd = _data["leeftijd"];
        }
    }

    static override fromJS(data: any): PersoonInOnderzoek {
        data = typeof data === 'object' ? data : {};
        let result = new PersoonInOnderzoek();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["burgerservicenummer"] = this.burgerservicenummer;
        data["geslachtsaanduiding"] = this.geslachtsaanduiding;
        data["leeftijd"] = this.leeftijd;
        super.toJSON(data);
        return data;
    }
}

/** Geeft aan welke gegevens van de persoon in onderzoek zijn. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/in_onderzoek.feature). */
export interface IPersoonInOnderzoek extends IInOnderzoek {
    burgerservicenummer?: boolean;
    geslachtsaanduiding?: boolean;
    leeftijd?: boolean;
}

export class GeboorteBeperkt implements IGeboorteBeperkt {
    datum?: AbstractDatum;

    constructor(data?: IGeboorteBeperkt) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.datum = _data["datum"] ? AbstractDatum.fromJS(_data["datum"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GeboorteBeperkt {
        data = typeof data === 'object' ? data : {};
        let result = new GeboorteBeperkt();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["datum"] = this.datum ? this.datum.toJSON() : <any>undefined;
        return data;
    }
}

export interface IGeboorteBeperkt {
    datum?: AbstractDatum;
}

export class Waardetabel implements IWaardetabel {
    code?: string;
    omschrijving?: string;

    constructor(data?: IWaardetabel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.code = _data["code"];
            this.omschrijving = _data["omschrijving"];
        }
    }

    static fromJS(data: any): Waardetabel {
        data = typeof data === 'object' ? data : {};
        let result = new Waardetabel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["code"] = this.code;
        data["omschrijving"] = this.omschrijving;
        return data;
    }
}

export interface IWaardetabel {
    code?: string;
    omschrijving?: string;
}

export class NaamBasis implements INaamBasis {
    voornamen?: string;
    adellijkeTitelPredicaat?: AdellijkeTitelPredicaatType;
    voorvoegsel?: string;
    geslachtsnaam?: string;
    voorletters?: string;
    volledigeNaam?: string;

    constructor(data?: INaamBasis) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voornamen = _data["voornamen"];
            this.adellijkeTitelPredicaat = _data["adellijkeTitelPredicaat"] ? AdellijkeTitelPredicaatType.fromJS(_data["adellijkeTitelPredicaat"]) : <any>undefined;
            this.voorvoegsel = _data["voorvoegsel"];
            this.geslachtsnaam = _data["geslachtsnaam"];
            this.voorletters = _data["voorletters"];
            this.volledigeNaam = _data["volledigeNaam"];
        }
    }

    static fromJS(data: any): NaamBasis {
        data = typeof data === 'object' ? data : {};
        let result = new NaamBasis();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voornamen"] = this.voornamen;
        data["adellijkeTitelPredicaat"] = this.adellijkeTitelPredicaat ? this.adellijkeTitelPredicaat.toJSON() : <any>undefined;
        data["voorvoegsel"] = this.voorvoegsel;
        data["geslachtsnaam"] = this.geslachtsnaam;
        data["voorletters"] = this.voorletters;
        data["volledigeNaam"] = this.volledigeNaam;
        return data;
    }
}

export interface INaamBasis {
    voornamen?: string;
    adellijkeTitelPredicaat?: AdellijkeTitelPredicaatType;
    voorvoegsel?: string;
    geslachtsnaam?: string;
    voorletters?: string;
    volledigeNaam?: string;
}

export class AdellijkeTitelPredicaatType extends Waardetabel implements IAdellijkeTitelPredicaatType {
    soort?: AdellijkeTitelPredicaatSoort;

    constructor(data?: IAdellijkeTitelPredicaatType) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.soort = _data["soort"];
        }
    }

    static override fromJS(data: any): AdellijkeTitelPredicaatType {
        data = typeof data === 'object' ? data : {};
        let result = new AdellijkeTitelPredicaatType();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["soort"] = this.soort;
        super.toJSON(data);
        return data;
    }
}

export interface IAdellijkeTitelPredicaatType extends IWaardetabel {
    soort?: AdellijkeTitelPredicaatSoort;
}

export enum AdellijkeTitelPredicaatSoort {
    Titel = "titel",
    Predicaat = "predicaat",
}

/** * **reden** - wordt gevuld op basis van de waarden die voorkomen in de tabel 'redenopschortingbijhouding' uit de Haal-Centraal-BRP-tabellen-bevragen API. */
export class OpschortingBijhoudingBasis implements IOpschortingBijhoudingBasis {
    reden?: Waardetabel;

    constructor(data?: IOpschortingBijhoudingBasis) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.reden = _data["reden"] ? Waardetabel.fromJS(_data["reden"]) : <any>undefined;
        }
    }

    static fromJS(data: any): OpschortingBijhoudingBasis {
        data = typeof data === 'object' ? data : {};
        let result = new OpschortingBijhoudingBasis();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["reden"] = this.reden ? this.reden.toJSON() : <any>undefined;
        return data;
    }
}

/** * **reden** - wordt gevuld op basis van de waarden die voorkomen in de tabel 'redenopschortingbijhouding' uit de Haal-Centraal-BRP-tabellen-bevragen API. */
export interface IOpschortingBijhoudingBasis {
    reden?: Waardetabel;
}

export class OverlijdenBasis implements IOverlijdenBasis {
    indicatieOverleden?: boolean;

    constructor(data?: IOverlijdenBasis) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.indicatieOverleden = _data["indicatieOverleden"];
        }
    }

    static fromJS(data: any): OverlijdenBasis {
        data = typeof data === 'object' ? data : {};
        let result = new OverlijdenBasis();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["indicatieOverleden"] = this.indicatieOverleden;
        return data;
    }
}

export interface IOverlijdenBasis {
    indicatieOverleden?: boolean;
}

/** Gegevens over het verblijf of de woonlocatie van een persoon. */
export class AbstractVerblijfplaatsBeperkt implements IAbstractVerblijfplaatsBeperkt {

    protected _discriminator: string;

    constructor(data?: IAbstractVerblijfplaatsBeperkt) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "AbstractVerblijfplaatsBeperkt";
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AbstractVerblijfplaatsBeperkt {
        data = typeof data === 'object' ? data : {};
        if (data["type"] === "VerblijfplaatsBuitenland") {
            let result = new VerblijfplaatsBuitenlandBeperkt();
            result.init(data);
            return result;
        }
        if (data["type"] === "Adres") {
            let result = new AdresBeperkt();
            result.init(data);
            return result;
        }
        if (data["type"] === "VerblijfplaatsOnbekend") {
            let result = new VerblijfplaatsOnbekendBeperkt();
            result.init(data);
            return result;
        }
        if (data["type"] === "Locatie") {
            let result = new LocatieBeperkt();
            result.init(data);
            return result;
        }
        let result = new AbstractVerblijfplaatsBeperkt();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this._discriminator;
        return data;
    }
}

/** Gegevens over het verblijf of de woonlocatie van een persoon. */
export interface IAbstractVerblijfplaatsBeperkt {
}

export class VerblijfplaatsBuitenlandBeperkt extends AbstractVerblijfplaatsBeperkt implements IVerblijfplaatsBuitenlandBeperkt {
    adresregel1?: string;
    adresregel2?: string;
    adresregel3?: string;
    land?: Waardetabel;

    constructor(data?: IVerblijfplaatsBuitenlandBeperkt) {
        super(data);
        this._discriminator = "VerblijfplaatsBuitenland";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.adresregel1 = _data["adresregel1"];
            this.adresregel2 = _data["adresregel2"];
            this.adresregel3 = _data["adresregel3"];
            this.land = _data["land"] ? Waardetabel.fromJS(_data["land"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): VerblijfplaatsBuitenlandBeperkt {
        data = typeof data === 'object' ? data : {};
        let result = new VerblijfplaatsBuitenlandBeperkt();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["adresregel1"] = this.adresregel1;
        data["adresregel2"] = this.adresregel2;
        data["adresregel3"] = this.adresregel3;
        data["land"] = this.land ? this.land.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IVerblijfplaatsBuitenlandBeperkt extends IAbstractVerblijfplaatsBeperkt {
    adresregel1?: string;
    adresregel2?: string;
    adresregel3?: string;
    land?: Waardetabel;
}

export class AdresBeperkt extends AbstractVerblijfplaatsBeperkt implements IAdresBeperkt {
    functieAdres?: Waardetabel;
    adresregel1?: string;
    adresregel2?: string;
    woonplaats?: string;

    constructor(data?: IAdresBeperkt) {
        super(data);
        this._discriminator = "Adres";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.functieAdres = _data["functieAdres"] ? Waardetabel.fromJS(_data["functieAdres"]) : <any>undefined;
            this.adresregel1 = _data["adresregel1"];
            this.adresregel2 = _data["adresregel2"];
            this.woonplaats = _data["woonplaats"];
        }
    }

    static override fromJS(data: any): AdresBeperkt {
        data = typeof data === 'object' ? data : {};
        let result = new AdresBeperkt();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["functieAdres"] = this.functieAdres ? this.functieAdres.toJSON() : <any>undefined;
        data["adresregel1"] = this.adresregel1;
        data["adresregel2"] = this.adresregel2;
        data["woonplaats"] = this.woonplaats;
        super.toJSON(data);
        return data;
    }
}

export interface IAdresBeperkt extends IAbstractVerblijfplaatsBeperkt {
    functieAdres?: Waardetabel;
    adresregel1?: string;
    adresregel2?: string;
    woonplaats?: string;
}

export class VerblijfplaatsOnbekendBeperkt extends AbstractVerblijfplaatsBeperkt implements IVerblijfplaatsOnbekendBeperkt {
    verblijfplaatsOnbekend?: boolean;

    constructor(data?: IVerblijfplaatsOnbekendBeperkt) {
        super(data);
        this._discriminator = "VerblijfplaatsOnbekend";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.verblijfplaatsOnbekend = _data["verblijfplaatsOnbekend"];
        }
    }

    static override fromJS(data: any): VerblijfplaatsOnbekendBeperkt {
        data = typeof data === 'object' ? data : {};
        let result = new VerblijfplaatsOnbekendBeperkt();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["verblijfplaatsOnbekend"] = this.verblijfplaatsOnbekend;
        super.toJSON(data);
        return data;
    }
}

export interface IVerblijfplaatsOnbekendBeperkt extends IAbstractVerblijfplaatsBeperkt {
    verblijfplaatsOnbekend?: boolean;
}

export class LocatieBeperkt extends AbstractVerblijfplaatsBeperkt implements ILocatieBeperkt {
    adresregel1?: string;
    adresregel2?: string;
    functieAdres?: Waardetabel;
    locatiebeschrijving?: string;
    woonplaats?: string;

    constructor(data?: ILocatieBeperkt) {
        super(data);
        this._discriminator = "Locatie";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.adresregel1 = _data["adresregel1"];
            this.adresregel2 = _data["adresregel2"];
            this.functieAdres = _data["functieAdres"] ? Waardetabel.fromJS(_data["functieAdres"]) : <any>undefined;
            this.locatiebeschrijving = _data["locatiebeschrijving"];
            this.woonplaats = _data["woonplaats"];
        }
    }

    static override fromJS(data: any): LocatieBeperkt {
        data = typeof data === 'object' ? data : {};
        let result = new LocatieBeperkt();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["adresregel1"] = this.adresregel1;
        data["adresregel2"] = this.adresregel2;
        data["functieAdres"] = this.functieAdres ? this.functieAdres.toJSON() : <any>undefined;
        data["locatiebeschrijving"] = this.locatiebeschrijving;
        data["woonplaats"] = this.woonplaats;
        super.toJSON(data);
        return data;
    }
}

export interface ILocatieBeperkt extends IAbstractVerblijfplaatsBeperkt {
    adresregel1?: string;
    adresregel2?: string;
    functieAdres?: Waardetabel;
    locatiebeschrijving?: string;
    woonplaats?: string;
}

export class AbstractDatum implements IAbstractDatum {

    protected _discriminator: string;

    constructor(data?: IAbstractDatum) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "AbstractDatum";
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AbstractDatum {
        data = typeof data === 'object' ? data : {};
        if (data["type"] === "Datum") {
            let result = new VolledigeDatum();
            result.init(data);
            return result;
        }
        if (data["type"] === "OnbekendDatum") {
            let result = new OnbekendDatum();
            result.init(data);
            return result;
        }
        if (data["type"] === "JaarDatum") {
            let result = new JaarDatum();
            result.init(data);
            return result;
        }
        if (data["type"] === "JaarMaandDatum") {
            let result = new JaarMaandDatum();
            result.init(data);
            return result;
        }
        let result = new AbstractDatum();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this._discriminator;
        return data;
    }
}

export interface IAbstractDatum {
}

/** Datum conform iso8601 */
export class VolledigeDatum extends AbstractDatum implements IVolledigeDatum {
    datum?: Date;

    constructor(data?: IVolledigeDatum) {
        super(data);
        this._discriminator = "Datum";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.datum = _data["datum"] ? new Date(_data["datum"].toString()) : <any>undefined;
        }
    }

    static override fromJS(data: any): VolledigeDatum {
        data = typeof data === 'object' ? data : {};
        let result = new VolledigeDatum();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["datum"] = this.datum ? formatDate(this.datum) : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

/** Datum conform iso8601 */
export interface IVolledigeDatum extends IAbstractDatum {
    datum?: Date;
}

/** representatie voor een volledig onbekend datum */
export class OnbekendDatum extends AbstractDatum implements IOnbekendDatum {
    onbekend?: boolean;

    constructor(data?: IOnbekendDatum) {
        super(data);
        if (!data) {
            this.onbekend = true;
        }
        this._discriminator = "OnbekendDatum";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.onbekend = _data["onbekend"] !== undefined ? _data["onbekend"] : true;
        }
    }

    static override fromJS(data: any): OnbekendDatum {
        data = typeof data === 'object' ? data : {};
        let result = new OnbekendDatum();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["onbekend"] = this.onbekend;
        super.toJSON(data);
        return data;
    }
}

/** representatie voor een volledig onbekend datum */
export interface IOnbekendDatum extends IAbstractDatum {
    onbekend?: boolean;
}

/** representatie voor een datum waarvan maand en dag onbekend zijn */
export class JaarDatum extends AbstractDatum implements IJaarDatum {
    jaar?: number;

    constructor(data?: IJaarDatum) {
        super(data);
        this._discriminator = "JaarDatum";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.jaar = _data["jaar"];
        }
    }

    static override fromJS(data: any): JaarDatum {
        data = typeof data === 'object' ? data : {};
        let result = new JaarDatum();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["jaar"] = this.jaar;
        super.toJSON(data);
        return data;
    }
}

/** representatie voor een datum waarvan maand en dag onbekend zijn */
export interface IJaarDatum extends IAbstractDatum {
    jaar?: number;
}

/** representatie voor een datum waarvan de dag onbekend is */
export class JaarMaandDatum extends AbstractDatum implements IJaarMaandDatum {
    jaar?: number;
    maand?: number;

    constructor(data?: IJaarMaandDatum) {
        super(data);
        this._discriminator = "JaarMaandDatum";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.jaar = _data["jaar"];
            this.maand = _data["maand"];
        }
    }

    static override fromJS(data: any): JaarMaandDatum {
        data = typeof data === 'object' ? data : {};
        let result = new JaarMaandDatum();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["jaar"] = this.jaar;
        data["maand"] = this.maand;
        super.toJSON(data);
        return data;
    }
}

/** representatie voor een datum waarvan de dag onbekend is */
export interface IJaarMaandDatum extends IAbstractDatum {
    jaar?: number;
    maand?: number;
}

export class Kiesrecht implements IKiesrecht {
    /** Geeft aan of persoon een oproep moet ontvangen voor verkiezingen voor het Europees parlement.
 */
    europeesKiesrecht?: boolean;
    uitgeslotenVanKiesrecht?: boolean;
    einddatumUitsluitingEuropeesKiesrecht?: AbstractDatum;
    einddatumUitsluitingKiesrecht?: AbstractDatum;

    constructor(data?: IKiesrecht) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.europeesKiesrecht = _data["europeesKiesrecht"];
            this.uitgeslotenVanKiesrecht = _data["uitgeslotenVanKiesrecht"];
            this.einddatumUitsluitingEuropeesKiesrecht = _data["einddatumUitsluitingEuropeesKiesrecht"] ? AbstractDatum.fromJS(_data["einddatumUitsluitingEuropeesKiesrecht"]) : <any>undefined;
            this.einddatumUitsluitingKiesrecht = _data["einddatumUitsluitingKiesrecht"] ? AbstractDatum.fromJS(_data["einddatumUitsluitingKiesrecht"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Kiesrecht {
        data = typeof data === 'object' ? data : {};
        let result = new Kiesrecht();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["europeesKiesrecht"] = this.europeesKiesrecht;
        data["uitgeslotenVanKiesrecht"] = this.uitgeslotenVanKiesrecht;
        data["einddatumUitsluitingEuropeesKiesrecht"] = this.einddatumUitsluitingEuropeesKiesrecht ? this.einddatumUitsluitingEuropeesKiesrecht.toJSON() : <any>undefined;
        data["einddatumUitsluitingKiesrecht"] = this.einddatumUitsluitingKiesrecht ? this.einddatumUitsluitingKiesrecht.toJSON() : <any>undefined;
        return data;
    }
}

export interface IKiesrecht {
    /** Geeft aan of persoon een oproep moet ontvangen voor verkiezingen voor het Europees parlement.
 */
    europeesKiesrecht?: boolean;
    uitgeslotenVanKiesrecht?: boolean;
    einddatumUitsluitingEuropeesKiesrecht?: AbstractDatum;
    einddatumUitsluitingKiesrecht?: AbstractDatum;
}

export class NaamPersoon extends NaamBasis implements INaamPersoon {
    aanduidingNaamgebruik?: Waardetabel;
    aanhef?: string;
    aanschrijfwijze?: Aanschrijfwijze;
    gebruikInLopendeTekst?: string;
    inOnderzoek?: NaamPersoonInOnderzoek;

    constructor(data?: INaamPersoon) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.aanduidingNaamgebruik = _data["aanduidingNaamgebruik"] ? Waardetabel.fromJS(_data["aanduidingNaamgebruik"]) : <any>undefined;
            this.aanhef = _data["aanhef"];
            this.aanschrijfwijze = _data["aanschrijfwijze"] ? Aanschrijfwijze.fromJS(_data["aanschrijfwijze"]) : <any>undefined;
            this.gebruikInLopendeTekst = _data["gebruikInLopendeTekst"];
            this.inOnderzoek = _data["inOnderzoek"] ? NaamPersoonInOnderzoek.fromJS(_data["inOnderzoek"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): NaamPersoon {
        data = typeof data === 'object' ? data : {};
        let result = new NaamPersoon();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["aanduidingNaamgebruik"] = this.aanduidingNaamgebruik ? this.aanduidingNaamgebruik.toJSON() : <any>undefined;
        data["aanhef"] = this.aanhef;
        data["aanschrijfwijze"] = this.aanschrijfwijze ? this.aanschrijfwijze.toJSON() : <any>undefined;
        data["gebruikInLopendeTekst"] = this.gebruikInLopendeTekst;
        data["inOnderzoek"] = this.inOnderzoek ? this.inOnderzoek.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface INaamPersoon extends INaamBasis {
    aanduidingNaamgebruik?: Waardetabel;
    aanhef?: string;
    aanschrijfwijze?: Aanschrijfwijze;
    gebruikInLopendeTekst?: string;
    inOnderzoek?: NaamPersoonInOnderzoek;
}

/** Samengestelde naam en aanspreekvorm die je kunt gebruiken in de communicatie met de persoon. */
export class Aanschrijfwijze implements IAanschrijfwijze {
    naam?: string;
    /** Deze regel moet als aparte regel boven de samengestelde naam worden geplaatst. Komt alleen voor bij personen met een adellijke titel of predicaat.
 */
    aanspreekvorm?: string;

    constructor(data?: IAanschrijfwijze) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.naam = _data["naam"];
            this.aanspreekvorm = _data["aanspreekvorm"];
        }
    }

    static fromJS(data: any): Aanschrijfwijze {
        data = typeof data === 'object' ? data : {};
        let result = new Aanschrijfwijze();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["naam"] = this.naam;
        data["aanspreekvorm"] = this.aanspreekvorm;
        return data;
    }
}

/** Samengestelde naam en aanspreekvorm die je kunt gebruiken in de communicatie met de persoon. */
export interface IAanschrijfwijze {
    naam?: string;
    /** Deze regel moet als aparte regel boven de samengestelde naam worden geplaatst. Komt alleen voor bij personen met een adellijke titel of predicaat.
 */
    aanspreekvorm?: string;
}

/** Geeft aan welke gegevens over de naam in onderzoek zijn. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/in_onderzoek.feature) */
export class NaamInOnderzoek extends InOnderzoek implements INaamInOnderzoek {
    voornamen?: boolean;
    adellijkeTitelPredicaat?: boolean;
    voorvoegsel?: boolean;
    geslachtsnaam?: boolean;
    voorletters?: boolean;

    constructor(data?: INaamInOnderzoek) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.voornamen = _data["voornamen"];
            this.adellijkeTitelPredicaat = _data["adellijkeTitelPredicaat"];
            this.voorvoegsel = _data["voorvoegsel"];
            this.geslachtsnaam = _data["geslachtsnaam"];
            this.voorletters = _data["voorletters"];
        }
    }

    static override fromJS(data: any): NaamInOnderzoek {
        data = typeof data === 'object' ? data : {};
        let result = new NaamInOnderzoek();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voornamen"] = this.voornamen;
        data["adellijkeTitelPredicaat"] = this.adellijkeTitelPredicaat;
        data["voorvoegsel"] = this.voorvoegsel;
        data["geslachtsnaam"] = this.geslachtsnaam;
        data["voorletters"] = this.voorletters;
        super.toJSON(data);
        return data;
    }
}

/** Geeft aan welke gegevens over de naam in onderzoek zijn. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/in_onderzoek.feature) */
export interface INaamInOnderzoek extends IInOnderzoek {
    voornamen?: boolean;
    adellijkeTitelPredicaat?: boolean;
    voorvoegsel?: boolean;
    geslachtsnaam?: boolean;
    voorletters?: boolean;
}

export class NaamPersoonInOnderzoek extends NaamInOnderzoek implements INaamPersoonInOnderzoek {
    volledigeNaam?: boolean;
    aanduidingNaamgebruik?: boolean;
    aanhef?: boolean;
    aanschrijfwijze?: boolean;
    gebruikInLopendeTekst?: boolean;

    constructor(data?: INaamPersoonInOnderzoek) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.volledigeNaam = _data["volledigeNaam"];
            this.aanduidingNaamgebruik = _data["aanduidingNaamgebruik"];
            this.aanhef = _data["aanhef"];
            this.aanschrijfwijze = _data["aanschrijfwijze"];
            this.gebruikInLopendeTekst = _data["gebruikInLopendeTekst"];
        }
    }

    static override fromJS(data: any): NaamPersoonInOnderzoek {
        data = typeof data === 'object' ? data : {};
        let result = new NaamPersoonInOnderzoek();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["volledigeNaam"] = this.volledigeNaam;
        data["aanduidingNaamgebruik"] = this.aanduidingNaamgebruik;
        data["aanhef"] = this.aanhef;
        data["aanschrijfwijze"] = this.aanschrijfwijze;
        data["gebruikInLopendeTekst"] = this.gebruikInLopendeTekst;
        super.toJSON(data);
        return data;
    }
}

export interface INaamPersoonInOnderzoek extends INaamInOnderzoek {
    volledigeNaam?: boolean;
    aanduidingNaamgebruik?: boolean;
    aanhef?: boolean;
    aanschrijfwijze?: boolean;
    gebruikInLopendeTekst?: boolean;
}

export class AbstractNationaliteit implements IAbstractNationaliteit {
    redenOpname?: Waardetabel;

    protected _discriminator: string;

    constructor(data?: IAbstractNationaliteit) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "AbstractNationaliteit";
    }

    init(_data?: any) {
        if (_data) {
            this.redenOpname = _data["redenOpname"] ? Waardetabel.fromJS(_data["redenOpname"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AbstractNationaliteit {
        data = typeof data === 'object' ? data : {};
        if (data["type"] === "Nationaliteit") {
            let result = new Nationaliteit();
            result.init(data);
            return result;
        }
        if (data["type"] === "BehandeldAlsNederlander") {
            let result = new BehandeldAlsNederlander();
            result.init(data);
            return result;
        }
        if (data["type"] === "VastgesteldNietNederlander") {
            let result = new VastgesteldNietNederlander();
            result.init(data);
            return result;
        }
        if (data["type"] === "NationaliteitOnbekend") {
            let result = new NationaliteitOnbekend();
            result.init(data);
            return result;
        }
        let result = new AbstractNationaliteit();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this._discriminator;
        data["redenOpname"] = this.redenOpname ? this.redenOpname.toJSON() : <any>undefined;
        return data;
    }
}

export interface IAbstractNationaliteit {
    redenOpname?: Waardetabel;
}

/** * **redenOpname** : De reden op grond waarvan de persoon de nationaliteit gekregen heeft. */
export class Nationaliteit extends AbstractNationaliteit implements INationaliteit {
    datumIngangGeldigheid?: AbstractDatum;
    nationaliteit?: Waardetabel;
    inOnderzoek?: NationaliteitInOnderzoek;

    constructor(data?: INationaliteit) {
        super(data);
        this._discriminator = "Nationaliteit";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.datumIngangGeldigheid = _data["datumIngangGeldigheid"] ? AbstractDatum.fromJS(_data["datumIngangGeldigheid"]) : <any>undefined;
            this.nationaliteit = _data["nationaliteit"] ? Waardetabel.fromJS(_data["nationaliteit"]) : <any>undefined;
            this.inOnderzoek = _data["inOnderzoek"] ? NationaliteitInOnderzoek.fromJS(_data["inOnderzoek"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): Nationaliteit {
        data = typeof data === 'object' ? data : {};
        let result = new Nationaliteit();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["datumIngangGeldigheid"] = this.datumIngangGeldigheid ? this.datumIngangGeldigheid.toJSON() : <any>undefined;
        data["nationaliteit"] = this.nationaliteit ? this.nationaliteit.toJSON() : <any>undefined;
        data["inOnderzoek"] = this.inOnderzoek ? this.inOnderzoek.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

/** * **redenOpname** : De reden op grond waarvan de persoon de nationaliteit gekregen heeft. */
export interface INationaliteit extends IAbstractNationaliteit {
    datumIngangGeldigheid?: AbstractDatum;
    nationaliteit?: Waardetabel;
    inOnderzoek?: NationaliteitInOnderzoek;
}

/** Geeft aan welke gegevens over de nationaliteit in onderzoek zijn. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/in_onderzoek.feature) */
export class NationaliteitInOnderzoek extends InOnderzoek implements INationaliteitInOnderzoek {
    nationaliteit?: boolean;
    redenOpname?: boolean;

    constructor(data?: INationaliteitInOnderzoek) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.nationaliteit = _data["nationaliteit"];
            this.redenOpname = _data["redenOpname"];
        }
    }

    static override fromJS(data: any): NationaliteitInOnderzoek {
        data = typeof data === 'object' ? data : {};
        let result = new NationaliteitInOnderzoek();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["nationaliteit"] = this.nationaliteit;
        data["redenOpname"] = this.redenOpname;
        super.toJSON(data);
        return data;
    }
}

/** Geeft aan welke gegevens over de nationaliteit in onderzoek zijn. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/in_onderzoek.feature) */
export interface INationaliteitInOnderzoek extends IInOnderzoek {
    nationaliteit?: boolean;
    redenOpname?: boolean;
}

export class BehandeldAlsNederlander extends AbstractNationaliteit implements IBehandeldAlsNederlander {
    datumIngangGeldigheid?: AbstractDatum;
    inOnderzoek?: BijzonderNederlanderschapInOnderzoek;

    constructor(data?: IBehandeldAlsNederlander) {
        super(data);
        this._discriminator = "BehandeldAlsNederlander";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.datumIngangGeldigheid = _data["datumIngangGeldigheid"] ? AbstractDatum.fromJS(_data["datumIngangGeldigheid"]) : <any>undefined;
            this.inOnderzoek = _data["inOnderzoek"] ? BijzonderNederlanderschapInOnderzoek.fromJS(_data["inOnderzoek"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): BehandeldAlsNederlander {
        data = typeof data === 'object' ? data : {};
        let result = new BehandeldAlsNederlander();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["datumIngangGeldigheid"] = this.datumIngangGeldigheid ? this.datumIngangGeldigheid.toJSON() : <any>undefined;
        data["inOnderzoek"] = this.inOnderzoek ? this.inOnderzoek.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IBehandeldAlsNederlander extends IAbstractNationaliteit {
    datumIngangGeldigheid?: AbstractDatum;
    inOnderzoek?: BijzonderNederlanderschapInOnderzoek;
}

export class BijzonderNederlanderschapInOnderzoek extends InOnderzoek implements IBijzonderNederlanderschapInOnderzoek {
    type?: boolean;
    redenOpname?: boolean;

    constructor(data?: IBijzonderNederlanderschapInOnderzoek) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.type = _data["type"];
            this.redenOpname = _data["redenOpname"];
        }
    }

    static override fromJS(data: any): BijzonderNederlanderschapInOnderzoek {
        data = typeof data === 'object' ? data : {};
        let result = new BijzonderNederlanderschapInOnderzoek();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["redenOpname"] = this.redenOpname;
        super.toJSON(data);
        return data;
    }
}

export interface IBijzonderNederlanderschapInOnderzoek extends IInOnderzoek {
    type?: boolean;
    redenOpname?: boolean;
}

export class VastgesteldNietNederlander extends AbstractNationaliteit implements IVastgesteldNietNederlander {
    datumIngangGeldigheid?: AbstractDatum;
    inOnderzoek?: BijzonderNederlanderschapInOnderzoek;

    constructor(data?: IVastgesteldNietNederlander) {
        super(data);
        this._discriminator = "VastgesteldNietNederlander";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.datumIngangGeldigheid = _data["datumIngangGeldigheid"] ? AbstractDatum.fromJS(_data["datumIngangGeldigheid"]) : <any>undefined;
            this.inOnderzoek = _data["inOnderzoek"] ? BijzonderNederlanderschapInOnderzoek.fromJS(_data["inOnderzoek"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): VastgesteldNietNederlander {
        data = typeof data === 'object' ? data : {};
        let result = new VastgesteldNietNederlander();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["datumIngangGeldigheid"] = this.datumIngangGeldigheid ? this.datumIngangGeldigheid.toJSON() : <any>undefined;
        data["inOnderzoek"] = this.inOnderzoek ? this.inOnderzoek.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IVastgesteldNietNederlander extends IAbstractNationaliteit {
    datumIngangGeldigheid?: AbstractDatum;
    inOnderzoek?: BijzonderNederlanderschapInOnderzoek;
}

/** * **redenOpname** : De reden op grond waarvan de persoon de nationaliteit gekregen heeft. */
export class NationaliteitOnbekend extends AbstractNationaliteit implements INationaliteitOnbekend {
    datumIngangGeldigheid?: AbstractDatum;
    inOnderzoek?: NationaliteitOnbekendInOnderzoek;

    constructor(data?: INationaliteitOnbekend) {
        super(data);
        this._discriminator = "NationaliteitOnbekend";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.datumIngangGeldigheid = _data["datumIngangGeldigheid"] ? AbstractDatum.fromJS(_data["datumIngangGeldigheid"]) : <any>undefined;
            this.inOnderzoek = _data["inOnderzoek"] ? NationaliteitOnbekendInOnderzoek.fromJS(_data["inOnderzoek"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): NationaliteitOnbekend {
        data = typeof data === 'object' ? data : {};
        let result = new NationaliteitOnbekend();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["datumIngangGeldigheid"] = this.datumIngangGeldigheid ? this.datumIngangGeldigheid.toJSON() : <any>undefined;
        data["inOnderzoek"] = this.inOnderzoek ? this.inOnderzoek.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

/** * **redenOpname** : De reden op grond waarvan de persoon de nationaliteit gekregen heeft. */
export interface INationaliteitOnbekend extends IAbstractNationaliteit {
    datumIngangGeldigheid?: AbstractDatum;
    inOnderzoek?: NationaliteitOnbekendInOnderzoek;
}

export class NationaliteitOnbekendInOnderzoek extends InOnderzoek implements INationaliteitOnbekendInOnderzoek {
    type?: boolean;
    redenOpname?: boolean;

    constructor(data?: INationaliteitOnbekendInOnderzoek) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.type = _data["type"];
            this.redenOpname = _data["redenOpname"];
        }
    }

    static override fromJS(data: any): NationaliteitOnbekendInOnderzoek {
        data = typeof data === 'object' ? data : {};
        let result = new NationaliteitOnbekendInOnderzoek();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this.type;
        data["redenOpname"] = this.redenOpname;
        super.toJSON(data);
        return data;
    }
}

export interface INationaliteitOnbekendInOnderzoek extends IInOnderzoek {
    type?: boolean;
    redenOpname?: boolean;
}

/** Gegevens over de geboorte. * **datum** : datum waarop de persoon is geboren. * **land** : land waar de persoon is geboren * **plaats** : gemeente waar de persoon is geboren. Is de persoon geboren buiten Nederland, dan bevat het antwoord alleen een buitenlandse plaatsnaam of aanduiding. */
export class Geboorte extends GeboorteBeperkt implements IGeboorte {
    land?: Waardetabel;
    plaats?: Waardetabel;
    inOnderzoek?: GeboorteInOnderzoek;

    constructor(data?: IGeboorte) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.land = _data["land"] ? Waardetabel.fromJS(_data["land"]) : <any>undefined;
            this.plaats = _data["plaats"] ? Waardetabel.fromJS(_data["plaats"]) : <any>undefined;
            this.inOnderzoek = _data["inOnderzoek"] ? GeboorteInOnderzoek.fromJS(_data["inOnderzoek"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): Geboorte {
        data = typeof data === 'object' ? data : {};
        let result = new Geboorte();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["land"] = this.land ? this.land.toJSON() : <any>undefined;
        data["plaats"] = this.plaats ? this.plaats.toJSON() : <any>undefined;
        data["inOnderzoek"] = this.inOnderzoek ? this.inOnderzoek.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

/** Gegevens over de geboorte. * **datum** : datum waarop de persoon is geboren. * **land** : land waar de persoon is geboren * **plaats** : gemeente waar de persoon is geboren. Is de persoon geboren buiten Nederland, dan bevat het antwoord alleen een buitenlandse plaatsnaam of aanduiding. */
export interface IGeboorte extends IGeboorteBeperkt {
    land?: Waardetabel;
    plaats?: Waardetabel;
    inOnderzoek?: GeboorteInOnderzoek;
}

export class GeboorteInOnderzoek extends InOnderzoek implements IGeboorteInOnderzoek {
    datum?: boolean;
    land?: boolean;
    plaats?: boolean;

    constructor(data?: IGeboorteInOnderzoek) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.datum = _data["datum"];
            this.land = _data["land"];
            this.plaats = _data["plaats"];
        }
    }

    static override fromJS(data: any): GeboorteInOnderzoek {
        data = typeof data === 'object' ? data : {};
        let result = new GeboorteInOnderzoek();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["datum"] = this.datum;
        data["land"] = this.land;
        data["plaats"] = this.plaats;
        super.toJSON(data);
        return data;
    }
}

export interface IGeboorteInOnderzoek extends IInOnderzoek {
    datum?: boolean;
    land?: boolean;
    plaats?: boolean;
}

/** * **datum**: de datum waarop de bijhouding van de persoonsgegevens is gestaakt. */
export class OpschortingBijhouding extends OpschortingBijhoudingBasis implements IOpschortingBijhouding {
    datum?: AbstractDatum;

    constructor(data?: IOpschortingBijhouding) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.datum = _data["datum"] ? AbstractDatum.fromJS(_data["datum"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): OpschortingBijhouding {
        data = typeof data === 'object' ? data : {};
        let result = new OpschortingBijhouding();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["datum"] = this.datum ? this.datum.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

/** * **datum**: de datum waarop de bijhouding van de persoonsgegevens is gestaakt. */
export interface IOpschortingBijhouding extends IOpschortingBijhoudingBasis {
    datum?: AbstractDatum;
}

/** Gegevens over het overlijden van de persoon. * **datum** : datum waarop de persoon is overleden. * **land** : land waar de persoon is overleden. * **plaats** : gemeente waar de persoon is overleden. Is de persoon overleden buiten Nederland, dan bevat het antwoord alleen een buitenlandse plaatsnaam of aanduiding. */
export class Overlijden extends OverlijdenBasis implements IOverlijden {
    datum?: AbstractDatum;
    land?: Waardetabel;
    plaats?: Waardetabel;
    inOnderzoek?: OverlijdenInOnderzoek;

    constructor(data?: IOverlijden) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.datum = _data["datum"] ? AbstractDatum.fromJS(_data["datum"]) : <any>undefined;
            this.land = _data["land"] ? Waardetabel.fromJS(_data["land"]) : <any>undefined;
            this.plaats = _data["plaats"] ? Waardetabel.fromJS(_data["plaats"]) : <any>undefined;
            this.inOnderzoek = _data["inOnderzoek"] ? OverlijdenInOnderzoek.fromJS(_data["inOnderzoek"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): Overlijden {
        data = typeof data === 'object' ? data : {};
        let result = new Overlijden();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["datum"] = this.datum ? this.datum.toJSON() : <any>undefined;
        data["land"] = this.land ? this.land.toJSON() : <any>undefined;
        data["plaats"] = this.plaats ? this.plaats.toJSON() : <any>undefined;
        data["inOnderzoek"] = this.inOnderzoek ? this.inOnderzoek.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

/** Gegevens over het overlijden van de persoon. * **datum** : datum waarop de persoon is overleden. * **land** : land waar de persoon is overleden. * **plaats** : gemeente waar de persoon is overleden. Is de persoon overleden buiten Nederland, dan bevat het antwoord alleen een buitenlandse plaatsnaam of aanduiding. */
export interface IOverlijden extends IOverlijdenBasis {
    datum?: AbstractDatum;
    land?: Waardetabel;
    plaats?: Waardetabel;
    inOnderzoek?: OverlijdenInOnderzoek;
}

/** Geeft aan welke gegevens over het overlijden van de persoon in onderzoek zijn. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/in_onderzoek.feature) */
export class OverlijdenInOnderzoek extends InOnderzoek implements IOverlijdenInOnderzoek {
    indicatieOverleden?: boolean;
    datum?: boolean;
    land?: boolean;
    plaats?: boolean;

    constructor(data?: IOverlijdenInOnderzoek) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.indicatieOverleden = _data["indicatieOverleden"];
            this.datum = _data["datum"];
            this.land = _data["land"];
            this.plaats = _data["plaats"];
        }
    }

    static override fromJS(data: any): OverlijdenInOnderzoek {
        data = typeof data === 'object' ? data : {};
        let result = new OverlijdenInOnderzoek();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["indicatieOverleden"] = this.indicatieOverleden;
        data["datum"] = this.datum;
        data["land"] = this.land;
        data["plaats"] = this.plaats;
        super.toJSON(data);
        return data;
    }
}

/** Geeft aan welke gegevens over het overlijden van de persoon in onderzoek zijn. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/in_onderzoek.feature) */
export interface IOverlijdenInOnderzoek extends IInOnderzoek {
    indicatieOverleden?: boolean;
    datum?: boolean;
    land?: boolean;
    plaats?: boolean;
}

/** Gegevens over het verblijf of de woonlocatie van een persoon. */
export class AbstractVerblijfplaats implements IAbstractVerblijfplaats {

    protected _discriminator: string;

    constructor(data?: IAbstractVerblijfplaats) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "AbstractVerblijfplaats";
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AbstractVerblijfplaats {
        data = typeof data === 'object' ? data : {};
        if (data["type"] === "VerblijfplaatsBuitenland") {
            let result = new VerblijfplaatsBuitenland();
            result.init(data);
            return result;
        }
        if (data["type"] === "Adres") {
            let result = new Adres();
            result.init(data);
            return result;
        }
        if (data["type"] === "VerblijfplaatsOnbekend") {
            let result = new VerblijfplaatsOnbekend();
            result.init(data);
            return result;
        }
        if (data["type"] === "Locatie") {
            let result = new Locatie();
            result.init(data);
            return result;
        }
        let result = new AbstractVerblijfplaats();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this._discriminator;
        return data;
    }
}

/** Gegevens over het verblijf of de woonlocatie van een persoon. */
export interface IAbstractVerblijfplaats {
}

export class VerblijfplaatsBuitenland extends AbstractVerblijfplaats implements IVerblijfplaatsBuitenland {
    adresregel1?: string;
    adresregel2?: string;
    adresregel3?: string;
    datumInschrijvingInGemeente?: AbstractDatum;
    gemeenteVanInschrijving?: Waardetabel;
    land?: Waardetabel;
    datumVan?: AbstractDatum;
    datumIngangGeldigheid?: AbstractDatum;
    inOnderzoek?: VerblijfplaatsBuitenlandInOnderzoek;

    constructor(data?: IVerblijfplaatsBuitenland) {
        super(data);
        this._discriminator = "VerblijfplaatsBuitenland";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.adresregel1 = _data["adresregel1"];
            this.adresregel2 = _data["adresregel2"];
            this.adresregel3 = _data["adresregel3"];
            this.datumInschrijvingInGemeente = _data["datumInschrijvingInGemeente"] ? AbstractDatum.fromJS(_data["datumInschrijvingInGemeente"]) : <any>undefined;
            this.gemeenteVanInschrijving = _data["gemeenteVanInschrijving"] ? Waardetabel.fromJS(_data["gemeenteVanInschrijving"]) : <any>undefined;
            this.land = _data["land"] ? Waardetabel.fromJS(_data["land"]) : <any>undefined;
            this.datumVan = _data["datumVan"] ? AbstractDatum.fromJS(_data["datumVan"]) : <any>undefined;
            this.datumIngangGeldigheid = _data["datumIngangGeldigheid"] ? AbstractDatum.fromJS(_data["datumIngangGeldigheid"]) : <any>undefined;
            this.inOnderzoek = _data["inOnderzoek"] ? VerblijfplaatsBuitenlandInOnderzoek.fromJS(_data["inOnderzoek"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): VerblijfplaatsBuitenland {
        data = typeof data === 'object' ? data : {};
        let result = new VerblijfplaatsBuitenland();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["adresregel1"] = this.adresregel1;
        data["adresregel2"] = this.adresregel2;
        data["adresregel3"] = this.adresregel3;
        data["datumInschrijvingInGemeente"] = this.datumInschrijvingInGemeente ? this.datumInschrijvingInGemeente.toJSON() : <any>undefined;
        data["gemeenteVanInschrijving"] = this.gemeenteVanInschrijving ? this.gemeenteVanInschrijving.toJSON() : <any>undefined;
        data["land"] = this.land ? this.land.toJSON() : <any>undefined;
        data["datumVan"] = this.datumVan ? this.datumVan.toJSON() : <any>undefined;
        data["datumIngangGeldigheid"] = this.datumIngangGeldigheid ? this.datumIngangGeldigheid.toJSON() : <any>undefined;
        data["inOnderzoek"] = this.inOnderzoek ? this.inOnderzoek.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IVerblijfplaatsBuitenland extends IAbstractVerblijfplaats {
    adresregel1?: string;
    adresregel2?: string;
    adresregel3?: string;
    datumInschrijvingInGemeente?: AbstractDatum;
    gemeenteVanInschrijving?: Waardetabel;
    land?: Waardetabel;
    datumVan?: AbstractDatum;
    datumIngangGeldigheid?: AbstractDatum;
    inOnderzoek?: VerblijfplaatsBuitenlandInOnderzoek;
}

export class VerblijfplaatsBuitenlandInOnderzoek extends InOnderzoek implements IVerblijfplaatsBuitenlandInOnderzoek {
    adresregel1?: boolean;
    adresregel2?: boolean;
    adresregel3?: boolean;
    datumInschrijvingInGemeente?: boolean;
    gemeenteVanInschrijving?: boolean;
    land?: boolean;
    datumVan?: boolean;
    datumIngangGeldigheid?: boolean;

    constructor(data?: IVerblijfplaatsBuitenlandInOnderzoek) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.adresregel1 = _data["adresregel1"];
            this.adresregel2 = _data["adresregel2"];
            this.adresregel3 = _data["adresregel3"];
            this.datumInschrijvingInGemeente = _data["datumInschrijvingInGemeente"];
            this.gemeenteVanInschrijving = _data["gemeenteVanInschrijving"];
            this.land = _data["land"];
            this.datumVan = _data["datumVan"];
            this.datumIngangGeldigheid = _data["datumIngangGeldigheid"];
        }
    }

    static override fromJS(data: any): VerblijfplaatsBuitenlandInOnderzoek {
        data = typeof data === 'object' ? data : {};
        let result = new VerblijfplaatsBuitenlandInOnderzoek();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["adresregel1"] = this.adresregel1;
        data["adresregel2"] = this.adresregel2;
        data["adresregel3"] = this.adresregel3;
        data["datumInschrijvingInGemeente"] = this.datumInschrijvingInGemeente;
        data["gemeenteVanInschrijving"] = this.gemeenteVanInschrijving;
        data["land"] = this.land;
        data["datumVan"] = this.datumVan;
        data["datumIngangGeldigheid"] = this.datumIngangGeldigheid;
        super.toJSON(data);
        return data;
    }
}

export interface IVerblijfplaatsBuitenlandInOnderzoek extends IInOnderzoek {
    adresregel1?: boolean;
    adresregel2?: boolean;
    adresregel3?: boolean;
    datumInschrijvingInGemeente?: boolean;
    gemeenteVanInschrijving?: boolean;
    land?: boolean;
    datumVan?: boolean;
    datumIngangGeldigheid?: boolean;
}

/** Gegevens over het adres van een persoon. * **datumVan** : de datum van aangifte of ambtshalve melding van verblijf en adres. * **datumIngangGeldigheid** : datum waarop de gegevens over de verblijfplaats geldig zijn geworden. * **datumInschrijvingInGemeente**: bij inschrijving op grond van een verhuisaangifte door de burger is dit de aangiftedatum. Bij inschrijving op grond van een geboorteakte is dit de geboortedatum. Bij ambtshalve inschrijving is dit de datum waarop het voornemen van ambtshalve opneming schriftelijk aan de persoon is medegedeeld. * **datumVestigingInNederland** : datum van inschrijving in Nederland. * **landVanWaarIngeschreven** : het land waar de persoon woonde voor (her)vestiging in Nederland. * **gemeenteVanInschrijving** : de gemeente waar de persoon verblijft en is ingeschreven. De code kan voorloopnullen bevatten." */
export class Adres extends AbstractVerblijfplaats implements IAdres {
    functieAdres?: Waardetabel;
    straat?: string;
    huisnummer?: number;
    huisletter?: string;
    huisnummertoevoeging?: string;
    aanduidingBijHuisnummer?: Waardetabel;
    postcode?: string;
    adresseerbaarObjectIdentificatie?: string;
    nummeraanduidingIdentificatie?: string;
    adresregel1?: string;
    adresregel2?: string;
    woonplaats?: string;
    indicatieVestigingVanuitBuitenland?: boolean;
    korteNaam?: string;
    vanuitVerblijfplaatsOnbekend?: boolean;
    datumVan?: AbstractDatum;
    datumIngangGeldigheid?: AbstractDatum;
    datumInschrijvingInGemeente?: AbstractDatum;
    datumVestigingInNederland?: AbstractDatum;
    gemeenteVanInschrijving?: Waardetabel;
    landVanwaarIngeschreven?: Waardetabel;
    inOnderzoek?: AdresInOnderzoek;

    constructor(data?: IAdres) {
        super(data);
        this._discriminator = "Adres";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.functieAdres = _data["functieAdres"] ? Waardetabel.fromJS(_data["functieAdres"]) : <any>undefined;
            this.straat = _data["straat"];
            this.huisnummer = _data["huisnummer"];
            this.huisletter = _data["huisletter"];
            this.huisnummertoevoeging = _data["huisnummertoevoeging"];
            this.aanduidingBijHuisnummer = _data["aanduidingBijHuisnummer"] ? Waardetabel.fromJS(_data["aanduidingBijHuisnummer"]) : <any>undefined;
            this.postcode = _data["postcode"];
            this.adresseerbaarObjectIdentificatie = _data["adresseerbaarObjectIdentificatie"];
            this.nummeraanduidingIdentificatie = _data["nummeraanduidingIdentificatie"];
            this.adresregel1 = _data["adresregel1"];
            this.adresregel2 = _data["adresregel2"];
            this.woonplaats = _data["woonplaats"];
            this.indicatieVestigingVanuitBuitenland = _data["indicatieVestigingVanuitBuitenland"];
            this.korteNaam = _data["korteNaam"];
            this.vanuitVerblijfplaatsOnbekend = _data["vanuitVerblijfplaatsOnbekend"];
            this.datumVan = _data["datumVan"] ? AbstractDatum.fromJS(_data["datumVan"]) : <any>undefined;
            this.datumIngangGeldigheid = _data["datumIngangGeldigheid"] ? AbstractDatum.fromJS(_data["datumIngangGeldigheid"]) : <any>undefined;
            this.datumInschrijvingInGemeente = _data["datumInschrijvingInGemeente"] ? AbstractDatum.fromJS(_data["datumInschrijvingInGemeente"]) : <any>undefined;
            this.datumVestigingInNederland = _data["datumVestigingInNederland"] ? AbstractDatum.fromJS(_data["datumVestigingInNederland"]) : <any>undefined;
            this.gemeenteVanInschrijving = _data["gemeenteVanInschrijving"] ? Waardetabel.fromJS(_data["gemeenteVanInschrijving"]) : <any>undefined;
            this.landVanwaarIngeschreven = _data["landVanwaarIngeschreven"] ? Waardetabel.fromJS(_data["landVanwaarIngeschreven"]) : <any>undefined;
            this.inOnderzoek = _data["inOnderzoek"] ? AdresInOnderzoek.fromJS(_data["inOnderzoek"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): Adres {
        data = typeof data === 'object' ? data : {};
        let result = new Adres();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["functieAdres"] = this.functieAdres ? this.functieAdres.toJSON() : <any>undefined;
        data["straat"] = this.straat;
        data["huisnummer"] = this.huisnummer;
        data["huisletter"] = this.huisletter;
        data["huisnummertoevoeging"] = this.huisnummertoevoeging;
        data["aanduidingBijHuisnummer"] = this.aanduidingBijHuisnummer ? this.aanduidingBijHuisnummer.toJSON() : <any>undefined;
        data["postcode"] = this.postcode;
        data["adresseerbaarObjectIdentificatie"] = this.adresseerbaarObjectIdentificatie;
        data["nummeraanduidingIdentificatie"] = this.nummeraanduidingIdentificatie;
        data["adresregel1"] = this.adresregel1;
        data["adresregel2"] = this.adresregel2;
        data["woonplaats"] = this.woonplaats;
        data["indicatieVestigingVanuitBuitenland"] = this.indicatieVestigingVanuitBuitenland;
        data["korteNaam"] = this.korteNaam;
        data["vanuitVerblijfplaatsOnbekend"] = this.vanuitVerblijfplaatsOnbekend;
        data["datumVan"] = this.datumVan ? this.datumVan.toJSON() : <any>undefined;
        data["datumIngangGeldigheid"] = this.datumIngangGeldigheid ? this.datumIngangGeldigheid.toJSON() : <any>undefined;
        data["datumInschrijvingInGemeente"] = this.datumInschrijvingInGemeente ? this.datumInschrijvingInGemeente.toJSON() : <any>undefined;
        data["datumVestigingInNederland"] = this.datumVestigingInNederland ? this.datumVestigingInNederland.toJSON() : <any>undefined;
        data["gemeenteVanInschrijving"] = this.gemeenteVanInschrijving ? this.gemeenteVanInschrijving.toJSON() : <any>undefined;
        data["landVanwaarIngeschreven"] = this.landVanwaarIngeschreven ? this.landVanwaarIngeschreven.toJSON() : <any>undefined;
        data["inOnderzoek"] = this.inOnderzoek ? this.inOnderzoek.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

/** Gegevens over het adres van een persoon. * **datumVan** : de datum van aangifte of ambtshalve melding van verblijf en adres. * **datumIngangGeldigheid** : datum waarop de gegevens over de verblijfplaats geldig zijn geworden. * **datumInschrijvingInGemeente**: bij inschrijving op grond van een verhuisaangifte door de burger is dit de aangiftedatum. Bij inschrijving op grond van een geboorteakte is dit de geboortedatum. Bij ambtshalve inschrijving is dit de datum waarop het voornemen van ambtshalve opneming schriftelijk aan de persoon is medegedeeld. * **datumVestigingInNederland** : datum van inschrijving in Nederland. * **landVanWaarIngeschreven** : het land waar de persoon woonde voor (her)vestiging in Nederland. * **gemeenteVanInschrijving** : de gemeente waar de persoon verblijft en is ingeschreven. De code kan voorloopnullen bevatten." */
export interface IAdres extends IAbstractVerblijfplaats {
    functieAdres?: Waardetabel;
    straat?: string;
    huisnummer?: number;
    huisletter?: string;
    huisnummertoevoeging?: string;
    aanduidingBijHuisnummer?: Waardetabel;
    postcode?: string;
    adresseerbaarObjectIdentificatie?: string;
    nummeraanduidingIdentificatie?: string;
    adresregel1?: string;
    adresregel2?: string;
    woonplaats?: string;
    indicatieVestigingVanuitBuitenland?: boolean;
    korteNaam?: string;
    vanuitVerblijfplaatsOnbekend?: boolean;
    datumVan?: AbstractDatum;
    datumIngangGeldigheid?: AbstractDatum;
    datumInschrijvingInGemeente?: AbstractDatum;
    datumVestigingInNederland?: AbstractDatum;
    gemeenteVanInschrijving?: Waardetabel;
    landVanwaarIngeschreven?: Waardetabel;
    inOnderzoek?: AdresInOnderzoek;
}

export class AdresInOnderzoek extends InOnderzoek implements IAdresInOnderzoek {
    aanduidingBijHuisnummer?: boolean;
    datumVan?: boolean;
    datumIngangGeldigheid?: boolean;
    datumInschrijvingInGemeente?: boolean;
    datumVestigingInNederland?: boolean;
    functieAdres?: boolean;
    gemeenteVanInschrijving?: boolean;
    huisletter?: boolean;
    huisnummer?: boolean;
    huisnummertoevoeging?: boolean;
    nummeraanduidingIdentificatie?: boolean;
    adresseerbaarObjectIdentificatie?: boolean;
    landVanwaarIngeschreven?: boolean;
    straat?: boolean;
    postcode?: boolean;
    korteNaam?: boolean;
    woonplaats?: boolean;
    adresregel1?: boolean;
    adresregel2?: boolean;
    indicatieVestigingVanuitBuitenland?: boolean;
    vanuitVerblijfplaatsOnbekend?: boolean;

    constructor(data?: IAdresInOnderzoek) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.aanduidingBijHuisnummer = _data["aanduidingBijHuisnummer"];
            this.datumVan = _data["datumVan"];
            this.datumIngangGeldigheid = _data["datumIngangGeldigheid"];
            this.datumInschrijvingInGemeente = _data["datumInschrijvingInGemeente"];
            this.datumVestigingInNederland = _data["datumVestigingInNederland"];
            this.functieAdres = _data["functieAdres"];
            this.gemeenteVanInschrijving = _data["gemeenteVanInschrijving"];
            this.huisletter = _data["huisletter"];
            this.huisnummer = _data["huisnummer"];
            this.huisnummertoevoeging = _data["huisnummertoevoeging"];
            this.nummeraanduidingIdentificatie = _data["nummeraanduidingIdentificatie"];
            this.adresseerbaarObjectIdentificatie = _data["adresseerbaarObjectIdentificatie"];
            this.landVanwaarIngeschreven = _data["landVanwaarIngeschreven"];
            this.straat = _data["straat"];
            this.postcode = _data["postcode"];
            this.korteNaam = _data["korteNaam"];
            this.woonplaats = _data["woonplaats"];
            this.adresregel1 = _data["adresregel1"];
            this.adresregel2 = _data["adresregel2"];
            this.indicatieVestigingVanuitBuitenland = _data["indicatieVestigingVanuitBuitenland"];
            this.vanuitVerblijfplaatsOnbekend = _data["vanuitVerblijfplaatsOnbekend"];
        }
    }

    static override fromJS(data: any): AdresInOnderzoek {
        data = typeof data === 'object' ? data : {};
        let result = new AdresInOnderzoek();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["aanduidingBijHuisnummer"] = this.aanduidingBijHuisnummer;
        data["datumVan"] = this.datumVan;
        data["datumIngangGeldigheid"] = this.datumIngangGeldigheid;
        data["datumInschrijvingInGemeente"] = this.datumInschrijvingInGemeente;
        data["datumVestigingInNederland"] = this.datumVestigingInNederland;
        data["functieAdres"] = this.functieAdres;
        data["gemeenteVanInschrijving"] = this.gemeenteVanInschrijving;
        data["huisletter"] = this.huisletter;
        data["huisnummer"] = this.huisnummer;
        data["huisnummertoevoeging"] = this.huisnummertoevoeging;
        data["nummeraanduidingIdentificatie"] = this.nummeraanduidingIdentificatie;
        data["adresseerbaarObjectIdentificatie"] = this.adresseerbaarObjectIdentificatie;
        data["landVanwaarIngeschreven"] = this.landVanwaarIngeschreven;
        data["straat"] = this.straat;
        data["postcode"] = this.postcode;
        data["korteNaam"] = this.korteNaam;
        data["woonplaats"] = this.woonplaats;
        data["adresregel1"] = this.adresregel1;
        data["adresregel2"] = this.adresregel2;
        data["indicatieVestigingVanuitBuitenland"] = this.indicatieVestigingVanuitBuitenland;
        data["vanuitVerblijfplaatsOnbekend"] = this.vanuitVerblijfplaatsOnbekend;
        super.toJSON(data);
        return data;
    }
}

export interface IAdresInOnderzoek extends IInOnderzoek {
    aanduidingBijHuisnummer?: boolean;
    datumVan?: boolean;
    datumIngangGeldigheid?: boolean;
    datumInschrijvingInGemeente?: boolean;
    datumVestigingInNederland?: boolean;
    functieAdres?: boolean;
    gemeenteVanInschrijving?: boolean;
    huisletter?: boolean;
    huisnummer?: boolean;
    huisnummertoevoeging?: boolean;
    nummeraanduidingIdentificatie?: boolean;
    adresseerbaarObjectIdentificatie?: boolean;
    landVanwaarIngeschreven?: boolean;
    straat?: boolean;
    postcode?: boolean;
    korteNaam?: boolean;
    woonplaats?: boolean;
    adresregel1?: boolean;
    adresregel2?: boolean;
    indicatieVestigingVanuitBuitenland?: boolean;
    vanuitVerblijfplaatsOnbekend?: boolean;
}

export class VerblijfplaatsOnbekend extends AbstractVerblijfplaats implements IVerblijfplaatsOnbekend {
    datumInschrijvingInGemeente?: AbstractDatum;
    gemeenteVanInschrijving?: Waardetabel;
    verblijfplaatsOnbekend?: boolean;
    inOnderzoek?: VerblijfplaatsOnbekendInOnderzoek;

    constructor(data?: IVerblijfplaatsOnbekend) {
        super(data);
        this._discriminator = "VerblijfplaatsOnbekend";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.datumInschrijvingInGemeente = _data["datumInschrijvingInGemeente"] ? AbstractDatum.fromJS(_data["datumInschrijvingInGemeente"]) : <any>undefined;
            this.gemeenteVanInschrijving = _data["gemeenteVanInschrijving"] ? Waardetabel.fromJS(_data["gemeenteVanInschrijving"]) : <any>undefined;
            this.verblijfplaatsOnbekend = _data["verblijfplaatsOnbekend"];
            this.inOnderzoek = _data["inOnderzoek"] ? VerblijfplaatsOnbekendInOnderzoek.fromJS(_data["inOnderzoek"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): VerblijfplaatsOnbekend {
        data = typeof data === 'object' ? data : {};
        let result = new VerblijfplaatsOnbekend();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["datumInschrijvingInGemeente"] = this.datumInschrijvingInGemeente ? this.datumInschrijvingInGemeente.toJSON() : <any>undefined;
        data["gemeenteVanInschrijving"] = this.gemeenteVanInschrijving ? this.gemeenteVanInschrijving.toJSON() : <any>undefined;
        data["verblijfplaatsOnbekend"] = this.verblijfplaatsOnbekend;
        data["inOnderzoek"] = this.inOnderzoek ? this.inOnderzoek.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IVerblijfplaatsOnbekend extends IAbstractVerblijfplaats {
    datumInschrijvingInGemeente?: AbstractDatum;
    gemeenteVanInschrijving?: Waardetabel;
    verblijfplaatsOnbekend?: boolean;
    inOnderzoek?: VerblijfplaatsOnbekendInOnderzoek;
}

export class VerblijfplaatsOnbekendInOnderzoek extends InOnderzoek implements IVerblijfplaatsOnbekendInOnderzoek {
    datumInschrijvingInGemeente?: boolean;
    gemeenteVanInschrijving?: boolean;
    verblijfplaatsOnbekend?: boolean;

    constructor(data?: IVerblijfplaatsOnbekendInOnderzoek) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.datumInschrijvingInGemeente = _data["datumInschrijvingInGemeente"];
            this.gemeenteVanInschrijving = _data["gemeenteVanInschrijving"];
            this.verblijfplaatsOnbekend = _data["verblijfplaatsOnbekend"];
        }
    }

    static override fromJS(data: any): VerblijfplaatsOnbekendInOnderzoek {
        data = typeof data === 'object' ? data : {};
        let result = new VerblijfplaatsOnbekendInOnderzoek();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["datumInschrijvingInGemeente"] = this.datumInschrijvingInGemeente;
        data["gemeenteVanInschrijving"] = this.gemeenteVanInschrijving;
        data["verblijfplaatsOnbekend"] = this.verblijfplaatsOnbekend;
        super.toJSON(data);
        return data;
    }
}

export interface IVerblijfplaatsOnbekendInOnderzoek extends IInOnderzoek {
    datumInschrijvingInGemeente?: boolean;
    gemeenteVanInschrijving?: boolean;
    verblijfplaatsOnbekend?: boolean;
}

export class Locatie extends AbstractVerblijfplaats implements ILocatie {
    adresregel1?: string;
    adresregel2?: string;
    datumInschrijvingInGemeente?: AbstractDatum;
    datumVestigingInNederland?: AbstractDatum;
    datumVan?: AbstractDatum;
    functieAdres?: Waardetabel;
    gemeenteVanInschrijving?: Waardetabel;
    indicatieVestigingVanuitBuitenland?: boolean;
    landVanwaarIngeschreven?: Waardetabel;
    locatiebeschrijving?: string;
    vanuitVerblijfplaatsOnbekend?: boolean;
    woonplaats?: string;
    inOnderzoek?: LocatieInOnderzoek;

    constructor(data?: ILocatie) {
        super(data);
        this._discriminator = "Locatie";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.adresregel1 = _data["adresregel1"];
            this.adresregel2 = _data["adresregel2"];
            this.datumInschrijvingInGemeente = _data["datumInschrijvingInGemeente"] ? AbstractDatum.fromJS(_data["datumInschrijvingInGemeente"]) : <any>undefined;
            this.datumVestigingInNederland = _data["datumVestigingInNederland"] ? AbstractDatum.fromJS(_data["datumVestigingInNederland"]) : <any>undefined;
            this.datumVan = _data["datumVan"] ? AbstractDatum.fromJS(_data["datumVan"]) : <any>undefined;
            this.functieAdres = _data["functieAdres"] ? Waardetabel.fromJS(_data["functieAdres"]) : <any>undefined;
            this.gemeenteVanInschrijving = _data["gemeenteVanInschrijving"] ? Waardetabel.fromJS(_data["gemeenteVanInschrijving"]) : <any>undefined;
            this.indicatieVestigingVanuitBuitenland = _data["indicatieVestigingVanuitBuitenland"];
            this.landVanwaarIngeschreven = _data["landVanwaarIngeschreven"] ? Waardetabel.fromJS(_data["landVanwaarIngeschreven"]) : <any>undefined;
            this.locatiebeschrijving = _data["locatiebeschrijving"];
            this.vanuitVerblijfplaatsOnbekend = _data["vanuitVerblijfplaatsOnbekend"];
            this.woonplaats = _data["woonplaats"];
            this.inOnderzoek = _data["inOnderzoek"] ? LocatieInOnderzoek.fromJS(_data["inOnderzoek"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): Locatie {
        data = typeof data === 'object' ? data : {};
        let result = new Locatie();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["adresregel1"] = this.adresregel1;
        data["adresregel2"] = this.adresregel2;
        data["datumInschrijvingInGemeente"] = this.datumInschrijvingInGemeente ? this.datumInschrijvingInGemeente.toJSON() : <any>undefined;
        data["datumVestigingInNederland"] = this.datumVestigingInNederland ? this.datumVestigingInNederland.toJSON() : <any>undefined;
        data["datumVan"] = this.datumVan ? this.datumVan.toJSON() : <any>undefined;
        data["functieAdres"] = this.functieAdres ? this.functieAdres.toJSON() : <any>undefined;
        data["gemeenteVanInschrijving"] = this.gemeenteVanInschrijving ? this.gemeenteVanInschrijving.toJSON() : <any>undefined;
        data["indicatieVestigingVanuitBuitenland"] = this.indicatieVestigingVanuitBuitenland;
        data["landVanwaarIngeschreven"] = this.landVanwaarIngeschreven ? this.landVanwaarIngeschreven.toJSON() : <any>undefined;
        data["locatiebeschrijving"] = this.locatiebeschrijving;
        data["vanuitVerblijfplaatsOnbekend"] = this.vanuitVerblijfplaatsOnbekend;
        data["woonplaats"] = this.woonplaats;
        data["inOnderzoek"] = this.inOnderzoek ? this.inOnderzoek.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface ILocatie extends IAbstractVerblijfplaats {
    adresregel1?: string;
    adresregel2?: string;
    datumInschrijvingInGemeente?: AbstractDatum;
    datumVestigingInNederland?: AbstractDatum;
    datumVan?: AbstractDatum;
    functieAdres?: Waardetabel;
    gemeenteVanInschrijving?: Waardetabel;
    indicatieVestigingVanuitBuitenland?: boolean;
    landVanwaarIngeschreven?: Waardetabel;
    locatiebeschrijving?: string;
    vanuitVerblijfplaatsOnbekend?: boolean;
    woonplaats?: string;
    inOnderzoek?: LocatieInOnderzoek;
}

export class LocatieInOnderzoek extends InOnderzoek implements ILocatieInOnderzoek {
    adresregel1?: boolean;
    adresregel2?: boolean;
    datumInschrijvingInGemeente?: boolean;
    datumVestigingInNederland?: boolean;
    datumVan?: boolean;
    functieAdres?: boolean;
    gemeenteVanInschrijving?: boolean;
    indicatieVestigingVanuitBuitenland?: boolean;
    landVanwaarIngeschreven?: boolean;
    locatiebeschrijving?: boolean;
    vanuitVerblijfplaatsOnbekend?: boolean;
    woonplaats?: boolean;

    constructor(data?: ILocatieInOnderzoek) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.adresregel1 = _data["adresregel1"];
            this.adresregel2 = _data["adresregel2"];
            this.datumInschrijvingInGemeente = _data["datumInschrijvingInGemeente"];
            this.datumVestigingInNederland = _data["datumVestigingInNederland"];
            this.datumVan = _data["datumVan"];
            this.functieAdres = _data["functieAdres"];
            this.gemeenteVanInschrijving = _data["gemeenteVanInschrijving"];
            this.indicatieVestigingVanuitBuitenland = _data["indicatieVestigingVanuitBuitenland"];
            this.landVanwaarIngeschreven = _data["landVanwaarIngeschreven"];
            this.locatiebeschrijving = _data["locatiebeschrijving"];
            this.vanuitVerblijfplaatsOnbekend = _data["vanuitVerblijfplaatsOnbekend"];
            this.woonplaats = _data["woonplaats"];
        }
    }

    static override fromJS(data: any): LocatieInOnderzoek {
        data = typeof data === 'object' ? data : {};
        let result = new LocatieInOnderzoek();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["adresregel1"] = this.adresregel1;
        data["adresregel2"] = this.adresregel2;
        data["datumInschrijvingInGemeente"] = this.datumInschrijvingInGemeente;
        data["datumVestigingInNederland"] = this.datumVestigingInNederland;
        data["datumVan"] = this.datumVan;
        data["functieAdres"] = this.functieAdres;
        data["gemeenteVanInschrijving"] = this.gemeenteVanInschrijving;
        data["indicatieVestigingVanuitBuitenland"] = this.indicatieVestigingVanuitBuitenland;
        data["landVanwaarIngeschreven"] = this.landVanwaarIngeschreven;
        data["locatiebeschrijving"] = this.locatiebeschrijving;
        data["vanuitVerblijfplaatsOnbekend"] = this.vanuitVerblijfplaatsOnbekend;
        data["woonplaats"] = this.woonplaats;
        super.toJSON(data);
        return data;
    }
}

export interface ILocatieInOnderzoek extends IInOnderzoek {
    adresregel1?: boolean;
    adresregel2?: boolean;
    datumInschrijvingInGemeente?: boolean;
    datumVestigingInNederland?: boolean;
    datumVan?: boolean;
    functieAdres?: boolean;
    gemeenteVanInschrijving?: boolean;
    indicatieVestigingVanuitBuitenland?: boolean;
    landVanwaarIngeschreven?: boolean;
    locatiebeschrijving?: boolean;
    vanuitVerblijfplaatsOnbekend?: boolean;
    woonplaats?: boolean;
}

/** Gegevens over het gezag over de persoon. */
export class GezagsverhoudingBasis implements IGezagsverhoudingBasis {
    /** Geeft aan dat de persoon onder curatele is gesteld.
 */
    indicatieCurateleRegister?: boolean;
    indicatieGezagMinderjarige?: Waardetabel;

    constructor(data?: IGezagsverhoudingBasis) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.indicatieCurateleRegister = _data["indicatieCurateleRegister"];
            this.indicatieGezagMinderjarige = _data["indicatieGezagMinderjarige"] ? Waardetabel.fromJS(_data["indicatieGezagMinderjarige"]) : <any>undefined;
        }
    }

    static fromJS(data: any): GezagsverhoudingBasis {
        data = typeof data === 'object' ? data : {};
        let result = new GezagsverhoudingBasis();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["indicatieCurateleRegister"] = this.indicatieCurateleRegister;
        data["indicatieGezagMinderjarige"] = this.indicatieGezagMinderjarige ? this.indicatieGezagMinderjarige.toJSON() : <any>undefined;
        return data;
    }
}

/** Gegevens over het gezag over de persoon. */
export interface IGezagsverhoudingBasis {
    /** Geeft aan dat de persoon onder curatele is gesteld.
 */
    indicatieCurateleRegister?: boolean;
    indicatieGezagMinderjarige?: Waardetabel;
}

export class Gezagsverhouding extends GezagsverhoudingBasis implements IGezagsverhouding {
    inOnderzoek?: GezagsverhoudingInOnderzoek;

    constructor(data?: IGezagsverhouding) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.inOnderzoek = _data["inOnderzoek"] ? GezagsverhoudingInOnderzoek.fromJS(_data["inOnderzoek"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): Gezagsverhouding {
        data = typeof data === 'object' ? data : {};
        let result = new Gezagsverhouding();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["inOnderzoek"] = this.inOnderzoek ? this.inOnderzoek.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IGezagsverhouding extends IGezagsverhoudingBasis {
    inOnderzoek?: GezagsverhoudingInOnderzoek;
}

/** Geeft aan welke gegevens van de gezagsverhouding in onderzoek zijn. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/in_onderzoek.feature) */
export class GezagsverhoudingInOnderzoek extends InOnderzoek implements IGezagsverhoudingInOnderzoek {
    indicatieCurateleRegister?: boolean;
    indicatieGezagMinderjarige?: boolean;

    constructor(data?: IGezagsverhoudingInOnderzoek) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.indicatieCurateleRegister = _data["indicatieCurateleRegister"];
            this.indicatieGezagMinderjarige = _data["indicatieGezagMinderjarige"];
        }
    }

    static override fromJS(data: any): GezagsverhoudingInOnderzoek {
        data = typeof data === 'object' ? data : {};
        let result = new GezagsverhoudingInOnderzoek();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["indicatieCurateleRegister"] = this.indicatieCurateleRegister;
        data["indicatieGezagMinderjarige"] = this.indicatieGezagMinderjarige;
        super.toJSON(data);
        return data;
    }
}

/** Geeft aan welke gegevens van de gezagsverhouding in onderzoek zijn. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/in_onderzoek.feature) */
export interface IGezagsverhoudingInOnderzoek extends IInOnderzoek {
    indicatieCurateleRegister?: boolean;
    indicatieGezagMinderjarige?: boolean;
}

/** Gegevens over de verblijfsrechtelijke status van de persoon. * **datumEinde**: Datum waarop de geldigheid van de gegevens over de verblijfstitel is beëindigd. * **datumIngang**: Datum waarop de gegevens over de verblijfstitel geldig zijn geworden. * **aanduiding** : Verblijfstiteltabel die aangeeft over welke verblijfsrechtelijke status de persoon beschikt. */
export class Verblijfstitel implements IVerblijfstitel {
    aanduiding?: Waardetabel;
    datumEinde?: AbstractDatum;
    datumIngang?: AbstractDatum;
    inOnderzoek?: VerblijfstitelInOnderzoek;

    constructor(data?: IVerblijfstitel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.aanduiding = _data["aanduiding"] ? Waardetabel.fromJS(_data["aanduiding"]) : <any>undefined;
            this.datumEinde = _data["datumEinde"] ? AbstractDatum.fromJS(_data["datumEinde"]) : <any>undefined;
            this.datumIngang = _data["datumIngang"] ? AbstractDatum.fromJS(_data["datumIngang"]) : <any>undefined;
            this.inOnderzoek = _data["inOnderzoek"] ? VerblijfstitelInOnderzoek.fromJS(_data["inOnderzoek"]) : <any>undefined;
        }
    }

    static fromJS(data: any): Verblijfstitel {
        data = typeof data === 'object' ? data : {};
        let result = new Verblijfstitel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["aanduiding"] = this.aanduiding ? this.aanduiding.toJSON() : <any>undefined;
        data["datumEinde"] = this.datumEinde ? this.datumEinde.toJSON() : <any>undefined;
        data["datumIngang"] = this.datumIngang ? this.datumIngang.toJSON() : <any>undefined;
        data["inOnderzoek"] = this.inOnderzoek ? this.inOnderzoek.toJSON() : <any>undefined;
        return data;
    }
}

/** Gegevens over de verblijfsrechtelijke status van de persoon. * **datumEinde**: Datum waarop de geldigheid van de gegevens over de verblijfstitel is beëindigd. * **datumIngang**: Datum waarop de gegevens over de verblijfstitel geldig zijn geworden. * **aanduiding** : Verblijfstiteltabel die aangeeft over welke verblijfsrechtelijke status de persoon beschikt. */
export interface IVerblijfstitel {
    aanduiding?: Waardetabel;
    datumEinde?: AbstractDatum;
    datumIngang?: AbstractDatum;
    inOnderzoek?: VerblijfstitelInOnderzoek;
}

/** Geeft aan welke gegevens over de verblijfstitel in onderzoek zijn. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/in_onderzoek.feature) */
export class VerblijfstitelInOnderzoek extends InOnderzoek implements IVerblijfstitelInOnderzoek {
    aanduiding?: boolean;
    datumEinde?: boolean;
    datumIngang?: boolean;

    constructor(data?: IVerblijfstitelInOnderzoek) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.aanduiding = _data["aanduiding"];
            this.datumEinde = _data["datumEinde"];
            this.datumIngang = _data["datumIngang"];
        }
    }

    static override fromJS(data: any): VerblijfstitelInOnderzoek {
        data = typeof data === 'object' ? data : {};
        let result = new VerblijfstitelInOnderzoek();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["aanduiding"] = this.aanduiding;
        data["datumEinde"] = this.datumEinde;
        data["datumIngang"] = this.datumIngang;
        super.toJSON(data);
        return data;
    }
}

/** Geeft aan welke gegevens over de verblijfstitel in onderzoek zijn. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/in_onderzoek.feature) */
export interface IVerblijfstitelInOnderzoek extends IInOnderzoek {
    aanduiding?: boolean;
    datumEinde?: boolean;
    datumIngang?: boolean;
}

/** Gegevens over een kind van de persoon. */
export class AbstractKind implements IAbstractKind {

    protected _discriminator: string;

    constructor(data?: IAbstractKind) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "AbstractKind";
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AbstractKind {
        data = typeof data === 'object' ? data : {};
        if (data["type"] === "Kind") {
            let result = new Kind();
            result.init(data);
            return result;
        }
        if (data["type"] === "OnbekendKind") {
            let result = new OnbekendKind();
            result.init(data);
            return result;
        }
        let result = new AbstractKind();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this._discriminator;
        return data;
    }
}

/** Gegevens over een kind van de persoon. */
export interface IAbstractKind {
}

export class Kind extends AbstractKind implements IKind {
    burgerservicenummer?: string;
    inOnderzoek?: KindInOnderzoek;
    naam?: NaamGerelateerde;
    geboorte?: Geboorte;

    constructor(data?: IKind) {
        super(data);
        this._discriminator = "Kind";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.burgerservicenummer = _data["burgerservicenummer"];
            this.inOnderzoek = _data["inOnderzoek"] ? KindInOnderzoek.fromJS(_data["inOnderzoek"]) : <any>undefined;
            this.naam = _data["naam"] ? NaamGerelateerde.fromJS(_data["naam"]) : <any>undefined;
            this.geboorte = _data["geboorte"] ? Geboorte.fromJS(_data["geboorte"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): Kind {
        data = typeof data === 'object' ? data : {};
        let result = new Kind();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["burgerservicenummer"] = this.burgerservicenummer;
        data["inOnderzoek"] = this.inOnderzoek ? this.inOnderzoek.toJSON() : <any>undefined;
        data["naam"] = this.naam ? this.naam.toJSON() : <any>undefined;
        data["geboorte"] = this.geboorte ? this.geboorte.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IKind extends IAbstractKind {
    burgerservicenummer?: string;
    inOnderzoek?: KindInOnderzoek;
    naam?: NaamGerelateerde;
    geboorte?: Geboorte;
}

/** Geeft aan of de gegevens over het kind van de persoon in onderzoek zijn. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/in_onderzoek.feature) */
export class KindInOnderzoek extends InOnderzoek implements IKindInOnderzoek {
    burgerservicenummer?: boolean;

    constructor(data?: IKindInOnderzoek) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.burgerservicenummer = _data["burgerservicenummer"];
        }
    }

    static override fromJS(data: any): KindInOnderzoek {
        data = typeof data === 'object' ? data : {};
        let result = new KindInOnderzoek();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["burgerservicenummer"] = this.burgerservicenummer;
        super.toJSON(data);
        return data;
    }
}

/** Geeft aan of de gegevens over het kind van de persoon in onderzoek zijn. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/in_onderzoek.feature) */
export interface IKindInOnderzoek extends IInOnderzoek {
    burgerservicenummer?: boolean;
}

export class OnbekendKind extends AbstractKind implements IOnbekendKind {
    indicatieOnbekend?: boolean;

    constructor(data?: IOnbekendKind) {
        super(data);
        if (!data) {
            this.indicatieOnbekend = false;
        }
        this._discriminator = "OnbekendKind";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.indicatieOnbekend = _data["indicatieOnbekend"] !== undefined ? _data["indicatieOnbekend"] : false;
        }
    }

    static override fromJS(data: any): OnbekendKind {
        data = typeof data === 'object' ? data : {};
        let result = new OnbekendKind();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["indicatieOnbekend"] = this.indicatieOnbekend;
        super.toJSON(data);
        return data;
    }
}

export interface IOnbekendKind extends IAbstractKind {
    indicatieOnbekend?: boolean;
}

/** Gegevens over de ouder van de persoon. */
export class AbstractOuder implements IAbstractOuder {

    protected _discriminator: string;

    constructor(data?: IAbstractOuder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "AbstractOuder";
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AbstractOuder {
        data = typeof data === 'object' ? data : {};
        if (data["type"] === "Ouder") {
            let result = new Ouder();
            result.init(data);
            return result;
        }
        if (data["type"] === "OnbekendOuder") {
            let result = new OnbekendOuder();
            result.init(data);
            return result;
        }
        let result = new AbstractOuder();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this._discriminator;
        return data;
    }
}

/** Gegevens over de ouder van de persoon. */
export interface IAbstractOuder {
}

/** Gegevens over de ouder van de persoon. * **datumIngangFamilierechtelijkeBetrekking** - De datum waarop de familierechtelijke betrekking is ontstaan. * **geslachtsaanduiding** - wordt gevuld op basis van de waarden die voorkomen in de tabel 'geslacht' uit de Haal-Centraal-BRP-tabellen-bevragen API. * **ouderaanduiding** - wordt gevuld op basis van de waarden die voorkomen in de tabel 'ouderAanduiding' uit de Haal-Centraal-BRP-tabellen-bevragen API. */
export class Ouder extends AbstractOuder implements IOuder {
    burgerservicenummer?: string;
    geslachtsaanduiding?: Waardetabel;
    ouderAanduiding?: Waardetabel;
    datumIngangFamilierechtelijkeBetrekking?: AbstractDatum;
    naam?: NaamGerelateerde;
    inOnderzoek?: OuderInOnderzoek;
    geboorte?: Geboorte;

    constructor(data?: IOuder) {
        super(data);
        this._discriminator = "Ouder";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.burgerservicenummer = _data["burgerservicenummer"];
            this.geslachtsaanduiding = _data["geslachtsaanduiding"] ? Waardetabel.fromJS(_data["geslachtsaanduiding"]) : <any>undefined;
            this.ouderAanduiding = _data["ouderAanduiding"] ? Waardetabel.fromJS(_data["ouderAanduiding"]) : <any>undefined;
            this.datumIngangFamilierechtelijkeBetrekking = _data["datumIngangFamilierechtelijkeBetrekking"] ? AbstractDatum.fromJS(_data["datumIngangFamilierechtelijkeBetrekking"]) : <any>undefined;
            this.naam = _data["naam"] ? NaamGerelateerde.fromJS(_data["naam"]) : <any>undefined;
            this.inOnderzoek = _data["inOnderzoek"] ? OuderInOnderzoek.fromJS(_data["inOnderzoek"]) : <any>undefined;
            this.geboorte = _data["geboorte"] ? Geboorte.fromJS(_data["geboorte"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): Ouder {
        data = typeof data === 'object' ? data : {};
        let result = new Ouder();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["burgerservicenummer"] = this.burgerservicenummer;
        data["geslachtsaanduiding"] = this.geslachtsaanduiding ? this.geslachtsaanduiding.toJSON() : <any>undefined;
        data["ouderAanduiding"] = this.ouderAanduiding ? this.ouderAanduiding.toJSON() : <any>undefined;
        data["datumIngangFamilierechtelijkeBetrekking"] = this.datumIngangFamilierechtelijkeBetrekking ? this.datumIngangFamilierechtelijkeBetrekking.toJSON() : <any>undefined;
        data["naam"] = this.naam ? this.naam.toJSON() : <any>undefined;
        data["inOnderzoek"] = this.inOnderzoek ? this.inOnderzoek.toJSON() : <any>undefined;
        data["geboorte"] = this.geboorte ? this.geboorte.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

/** Gegevens over de ouder van de persoon. * **datumIngangFamilierechtelijkeBetrekking** - De datum waarop de familierechtelijke betrekking is ontstaan. * **geslachtsaanduiding** - wordt gevuld op basis van de waarden die voorkomen in de tabel 'geslacht' uit de Haal-Centraal-BRP-tabellen-bevragen API. * **ouderaanduiding** - wordt gevuld op basis van de waarden die voorkomen in de tabel 'ouderAanduiding' uit de Haal-Centraal-BRP-tabellen-bevragen API. */
export interface IOuder extends IAbstractOuder {
    burgerservicenummer?: string;
    geslachtsaanduiding?: Waardetabel;
    ouderAanduiding?: Waardetabel;
    datumIngangFamilierechtelijkeBetrekking?: AbstractDatum;
    naam?: NaamGerelateerde;
    inOnderzoek?: OuderInOnderzoek;
    geboorte?: Geboorte;
}

/** Geeft aan welke gegevens van de de ouder in onderzoek zijn. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/in_onderzoek.feature) */
export class OuderInOnderzoek extends InOnderzoek implements IOuderInOnderzoek {
    burgerservicenummer?: boolean;
    datumIngangFamilierechtelijkeBetrekking?: boolean;
    geslachtsaanduiding?: boolean;

    constructor(data?: IOuderInOnderzoek) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.burgerservicenummer = _data["burgerservicenummer"];
            this.datumIngangFamilierechtelijkeBetrekking = _data["datumIngangFamilierechtelijkeBetrekking"];
            this.geslachtsaanduiding = _data["geslachtsaanduiding"];
        }
    }

    static override fromJS(data: any): OuderInOnderzoek {
        data = typeof data === 'object' ? data : {};
        let result = new OuderInOnderzoek();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["burgerservicenummer"] = this.burgerservicenummer;
        data["datumIngangFamilierechtelijkeBetrekking"] = this.datumIngangFamilierechtelijkeBetrekking;
        data["geslachtsaanduiding"] = this.geslachtsaanduiding;
        super.toJSON(data);
        return data;
    }
}

/** Geeft aan welke gegevens van de de ouder in onderzoek zijn. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/in_onderzoek.feature) */
export interface IOuderInOnderzoek extends IInOnderzoek {
    burgerservicenummer?: boolean;
    datumIngangFamilierechtelijkeBetrekking?: boolean;
    geslachtsaanduiding?: boolean;
}

export class OnbekendOuder extends AbstractOuder implements IOnbekendOuder {
    ouderAanduiding?: Waardetabel;
    indicatieOnbekend?: boolean;

    constructor(data?: IOnbekendOuder) {
        super(data);
        if (!data) {
            this.indicatieOnbekend = false;
        }
        this._discriminator = "OnbekendOuder";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.ouderAanduiding = _data["ouderAanduiding"] ? Waardetabel.fromJS(_data["ouderAanduiding"]) : <any>undefined;
            this.indicatieOnbekend = _data["indicatieOnbekend"] !== undefined ? _data["indicatieOnbekend"] : false;
        }
    }

    static override fromJS(data: any): OnbekendOuder {
        data = typeof data === 'object' ? data : {};
        let result = new OnbekendOuder();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["ouderAanduiding"] = this.ouderAanduiding ? this.ouderAanduiding.toJSON() : <any>undefined;
        data["indicatieOnbekend"] = this.indicatieOnbekend;
        super.toJSON(data);
        return data;
    }
}

export interface IOnbekendOuder extends IAbstractOuder {
    ouderAanduiding?: Waardetabel;
    indicatieOnbekend?: boolean;
}

/** Gegevens over een gesloten huwelijk/geregistreerd partnerschap van de persoon. */
export class AbstractPartner implements IAbstractPartner {

    protected _discriminator: string;

    constructor(data?: IAbstractPartner) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
        this._discriminator = "AbstractPartner";
    }

    init(_data?: any) {
    }

    static fromJS(data: any): AbstractPartner {
        data = typeof data === 'object' ? data : {};
        if (data["type"] === "Partner") {
            let result = new Partner();
            result.init(data);
            return result;
        }
        if (data["type"] === "OnbekendPartner") {
            let result = new OnbekendPartner();
            result.init(data);
            return result;
        }
        let result = new AbstractPartner();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["type"] = this._discriminator;
        return data;
    }
}

/** Gegevens over een gesloten huwelijk/geregistreerd partnerschap van de persoon. */
export interface IAbstractPartner {
}

export class Partner extends AbstractPartner implements IPartner {
    burgerservicenummer?: string;
    geslachtsaanduiding?: Waardetabel;
    soortVerbintenis?: Waardetabel;
    naam?: NaamGerelateerde;
    geboorte?: Geboorte;
    inOnderzoek?: PartnerInOnderzoek;
    aangaanHuwelijkPartnerschap?: AangaanHuwelijkPartnerschap;

    constructor(data?: IPartner) {
        super(data);
        this._discriminator = "Partner";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.burgerservicenummer = _data["burgerservicenummer"];
            this.geslachtsaanduiding = _data["geslachtsaanduiding"] ? Waardetabel.fromJS(_data["geslachtsaanduiding"]) : <any>undefined;
            this.soortVerbintenis = _data["soortVerbintenis"] ? Waardetabel.fromJS(_data["soortVerbintenis"]) : <any>undefined;
            this.naam = _data["naam"] ? NaamGerelateerde.fromJS(_data["naam"]) : <any>undefined;
            this.geboorte = _data["geboorte"] ? Geboorte.fromJS(_data["geboorte"]) : <any>undefined;
            this.inOnderzoek = _data["inOnderzoek"] ? PartnerInOnderzoek.fromJS(_data["inOnderzoek"]) : <any>undefined;
            this.aangaanHuwelijkPartnerschap = _data["aangaanHuwelijkPartnerschap"] ? AangaanHuwelijkPartnerschap.fromJS(_data["aangaanHuwelijkPartnerschap"]) : <any>undefined;
        }
    }

    static override fromJS(data: any): Partner {
        data = typeof data === 'object' ? data : {};
        let result = new Partner();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["burgerservicenummer"] = this.burgerservicenummer;
        data["geslachtsaanduiding"] = this.geslachtsaanduiding ? this.geslachtsaanduiding.toJSON() : <any>undefined;
        data["soortVerbintenis"] = this.soortVerbintenis ? this.soortVerbintenis.toJSON() : <any>undefined;
        data["naam"] = this.naam ? this.naam.toJSON() : <any>undefined;
        data["geboorte"] = this.geboorte ? this.geboorte.toJSON() : <any>undefined;
        data["inOnderzoek"] = this.inOnderzoek ? this.inOnderzoek.toJSON() : <any>undefined;
        data["aangaanHuwelijkPartnerschap"] = this.aangaanHuwelijkPartnerschap ? this.aangaanHuwelijkPartnerschap.toJSON() : <any>undefined;
        super.toJSON(data);
        return data;
    }
}

export interface IPartner extends IAbstractPartner {
    burgerservicenummer?: string;
    geslachtsaanduiding?: Waardetabel;
    soortVerbintenis?: Waardetabel;
    naam?: NaamGerelateerde;
    geboorte?: Geboorte;
    inOnderzoek?: PartnerInOnderzoek;
    aangaanHuwelijkPartnerschap?: AangaanHuwelijkPartnerschap;
}

/** Geeft aan welke gegevens over het huwelijk of het partnerschap in onderzoek zijn. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/in_onderzoek.feature) */
export class PartnerInOnderzoek extends InOnderzoek implements IPartnerInOnderzoek {
    burgerservicenummer?: boolean;
    geslachtsaanduiding?: boolean;
    soortVerbintenis?: boolean;

    constructor(data?: IPartnerInOnderzoek) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.burgerservicenummer = _data["burgerservicenummer"];
            this.geslachtsaanduiding = _data["geslachtsaanduiding"];
            this.soortVerbintenis = _data["soortVerbintenis"];
        }
    }

    static override fromJS(data: any): PartnerInOnderzoek {
        data = typeof data === 'object' ? data : {};
        let result = new PartnerInOnderzoek();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["burgerservicenummer"] = this.burgerservicenummer;
        data["geslachtsaanduiding"] = this.geslachtsaanduiding;
        data["soortVerbintenis"] = this.soortVerbintenis;
        super.toJSON(data);
        return data;
    }
}

/** Geeft aan welke gegevens over het huwelijk of het partnerschap in onderzoek zijn. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/in_onderzoek.feature) */
export interface IPartnerInOnderzoek extends IInOnderzoek {
    burgerservicenummer?: boolean;
    geslachtsaanduiding?: boolean;
    soortVerbintenis?: boolean;
}

/** Gegevens over de voltrekking van het huwelijk of het aangaan van het geregistreerd partnerschap. * **datum** : De datum waarop het huwelijk is voltrokken of het partnerschap is aangegaan. * **land** : Het land waar het huwelijk is voltrokken of het partnerschap is aangegaan. * **plaats** : De gemeente waar het huwelijk is voltrokken of het partnerschap is aangegaan. Voor een plaats buiten Nederland bevat het antwoord een buitenlandse plaatsnaam of aanduiding. */
export class AangaanHuwelijkPartnerschap implements IAangaanHuwelijkPartnerschap {
    datum?: AbstractDatum;
    land?: Waardetabel;
    plaats?: Waardetabel;
    inOnderzoek?: AangaanHuwelijkPartnerschapInOnderzoek;

    constructor(data?: IAangaanHuwelijkPartnerschap) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.datum = _data["datum"] ? AbstractDatum.fromJS(_data["datum"]) : <any>undefined;
            this.land = _data["land"] ? Waardetabel.fromJS(_data["land"]) : <any>undefined;
            this.plaats = _data["plaats"] ? Waardetabel.fromJS(_data["plaats"]) : <any>undefined;
            this.inOnderzoek = _data["inOnderzoek"] ? AangaanHuwelijkPartnerschapInOnderzoek.fromJS(_data["inOnderzoek"]) : <any>undefined;
        }
    }

    static fromJS(data: any): AangaanHuwelijkPartnerschap {
        data = typeof data === 'object' ? data : {};
        let result = new AangaanHuwelijkPartnerschap();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["datum"] = this.datum ? this.datum.toJSON() : <any>undefined;
        data["land"] = this.land ? this.land.toJSON() : <any>undefined;
        data["plaats"] = this.plaats ? this.plaats.toJSON() : <any>undefined;
        data["inOnderzoek"] = this.inOnderzoek ? this.inOnderzoek.toJSON() : <any>undefined;
        return data;
    }
}

/** Gegevens over de voltrekking van het huwelijk of het aangaan van het geregistreerd partnerschap. * **datum** : De datum waarop het huwelijk is voltrokken of het partnerschap is aangegaan. * **land** : Het land waar het huwelijk is voltrokken of het partnerschap is aangegaan. * **plaats** : De gemeente waar het huwelijk is voltrokken of het partnerschap is aangegaan. Voor een plaats buiten Nederland bevat het antwoord een buitenlandse plaatsnaam of aanduiding. */
export interface IAangaanHuwelijkPartnerschap {
    datum?: AbstractDatum;
    land?: Waardetabel;
    plaats?: Waardetabel;
    inOnderzoek?: AangaanHuwelijkPartnerschapInOnderzoek;
}

/** Geeft aan welke gegevens over het voltrekken van het huwelijk of aangaan van het partnerschap in onderzoek zijn. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/in_onderzoek.feature) */
export class AangaanHuwelijkPartnerschapInOnderzoek extends InOnderzoek implements IAangaanHuwelijkPartnerschapInOnderzoek {
    datum?: boolean;
    land?: boolean;
    plaats?: boolean;

    constructor(data?: IAangaanHuwelijkPartnerschapInOnderzoek) {
        super(data);
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.datum = _data["datum"];
            this.land = _data["land"];
            this.plaats = _data["plaats"];
        }
    }

    static override fromJS(data: any): AangaanHuwelijkPartnerschapInOnderzoek {
        data = typeof data === 'object' ? data : {};
        let result = new AangaanHuwelijkPartnerschapInOnderzoek();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["datum"] = this.datum;
        data["land"] = this.land;
        data["plaats"] = this.plaats;
        super.toJSON(data);
        return data;
    }
}

/** Geeft aan welke gegevens over het voltrekken van het huwelijk of aangaan van het partnerschap in onderzoek zijn. Zie de [functionele specificaties](https://github.com/VNG-Realisatie/Haal-Centraal-BRP-bevragen/blob/v1.1.0/features/in_onderzoek.feature) */
export interface IAangaanHuwelijkPartnerschapInOnderzoek extends IInOnderzoek {
    datum?: boolean;
    land?: boolean;
    plaats?: boolean;
}

export class OnbekendPartner extends AbstractPartner implements IOnbekendPartner {
    indicatieOnbekend?: boolean;

    constructor(data?: IOnbekendPartner) {
        super(data);
        if (!data) {
            this.indicatieOnbekend = false;
        }
        this._discriminator = "OnbekendPartner";
    }

    override init(_data?: any) {
        super.init(_data);
        if (_data) {
            this.indicatieOnbekend = _data["indicatieOnbekend"] !== undefined ? _data["indicatieOnbekend"] : false;
        }
    }

    static override fromJS(data: any): OnbekendPartner {
        data = typeof data === 'object' ? data : {};
        let result = new OnbekendPartner();
        result.init(data);
        return result;
    }

    override toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["indicatieOnbekend"] = this.indicatieOnbekend;
        super.toJSON(data);
        return data;
    }
}

export interface IOnbekendPartner extends IAbstractPartner {
    indicatieOnbekend?: boolean;
}

export class NaamGerelateerde implements INaamGerelateerde {
    voornamen?: string;
    adellijkeTitelPredicaat?: AdellijkeTitelPredicaatType;
    voorvoegsel?: string;
    geslachtsnaam?: string;
    voorletters?: string;
    inOnderzoek?: NaamInOnderzoek;

    constructor(data?: INaamGerelateerde) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.voornamen = _data["voornamen"];
            this.adellijkeTitelPredicaat = _data["adellijkeTitelPredicaat"] ? AdellijkeTitelPredicaatType.fromJS(_data["adellijkeTitelPredicaat"]) : <any>undefined;
            this.voorvoegsel = _data["voorvoegsel"];
            this.geslachtsnaam = _data["geslachtsnaam"];
            this.voorletters = _data["voorletters"];
            this.inOnderzoek = _data["inOnderzoek"] ? NaamInOnderzoek.fromJS(_data["inOnderzoek"]) : <any>undefined;
        }
    }

    static fromJS(data: any): NaamGerelateerde {
        data = typeof data === 'object' ? data : {};
        let result = new NaamGerelateerde();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["voornamen"] = this.voornamen;
        data["adellijkeTitelPredicaat"] = this.adellijkeTitelPredicaat ? this.adellijkeTitelPredicaat.toJSON() : <any>undefined;
        data["voorvoegsel"] = this.voorvoegsel;
        data["geslachtsnaam"] = this.geslachtsnaam;
        data["voorletters"] = this.voorletters;
        data["inOnderzoek"] = this.inOnderzoek ? this.inOnderzoek.toJSON() : <any>undefined;
        return data;
    }
}

export interface INaamGerelateerde {
    voornamen?: string;
    adellijkeTitelPredicaat?: AdellijkeTitelPredicaatType;
    voorvoegsel?: string;
    geslachtsnaam?: string;
    voorletters?: string;
    inOnderzoek?: NaamInOnderzoek;
}

function formatDate(d: Date) {
    return d.getFullYear() + '-' + 
        (d.getMonth() < 9 ? ('0' + (d.getMonth()+1)) : (d.getMonth()+1)) + '-' +
        (d.getDate() < 10 ? ('0' + d.getDate()) : d.getDate());
}

export class ApiException extends Error {
    override message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}

function isAxiosError(obj: any | undefined): obj is AxiosError {
    return obj && obj.isAxiosError === true;
}