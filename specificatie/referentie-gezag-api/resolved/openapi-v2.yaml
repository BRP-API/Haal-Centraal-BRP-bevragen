openapi: 3.1.0
info:
  title: BRP API Gezag
  description: |-
    De Gezagsmodule kan worden bevraagd op basis van één of meerdere BSNs
    - Gezag bepalen: input bsn(s) 
    Het antwoord van de Gezagsmodule komt in de vorm van een lijst met daarin de BSN minderjarige, Soort Gezagt tussen relatie met meerderjarige en BSN meerderjarige
  version: '2.0'
  contact:
    url: https://brp-api.github.io/Haal-Centraal-BRP-bevragen
  license:
    name: European Union Public License, version 1.2 (EUPL-1.2)
    url: https://eupl.eu/1.2/nl/
servers:
  - description: |
      Proef omgeving
    url: https://proefomgeving.haalcentraal.nl/
tags:
  - name: Personen
externalDocs:
  description: BRP API Personen website
  url: https://brp-api.github.io/Haal-Centraal-BRP-bevragen
paths:
  /api/v1/opvragenBevoegdheidTotGezag:
    post:
      tags:
        - GezagsmoduleInterface
      description: |-
        De volgende situaties kunnen (gelijktijdig) voorkomen:
        - Bij aanwezigheid van juridische kinderen wordt het gezag van deze persoon over diens kinderen teruggegeven. Het kan zijn dat omwille van het reduceren van BRP bevragingen de leeftijd van de kinderen uit de lijst met kinderen van de ouder wordt gebruikt om kinderen die al de leeftijd van 18 hebben bereikt niet te bevragen. dit heeft wel impact op de als minderjarige overleden kinderen; daar wordt dan geen gezagsuitspraak gedaan.
        - Is de persoon minderjarig dan wordt het gezag van de ouder(s) over deze persoon teruggegeven.
      operationId: opvragenBevoegdheidTotGezag
      parameters:
        - in: header
          name: Accept-Gezag-Version
          schema:
            type: integer
            enum:
              - 2
            default: 2
          required: true
          x-version-param: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GezagRequest'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GezagResponse'
        '503':
          description: Gegevensbron niet beschikbaar
          content:
            application/json:
              schema:
                type: string
components:
  schemas:
    GezagRequest:
      type: object
      properties:
        burgerservicenummer:
          type: array
          items:
            $ref: '#/components/schemas/Burgerservicenummer'
          minItems: 1
          maxItems: 20
    GezagResponse:
      type: object
      properties:
        personen:
          type: array
          items:
            $ref: '#/components/schemas/Persoon'
    Persoon:
      type: object
      properties:
        burgerservicenummer:
          $ref: '#/components/schemas/Burgerservicenummer'
        gezag:
          $ref: '#/components/schemas/Gezag'
    Burgerservicenummer:
      type: string
      pattern: ^[0-9]{9}$
      example: '555555021'
    Gezagsrelatie:
      type: object
      required:
        - type
        - minderjarige
      properties:
        type:
          type: string
        minderjarige:
          $ref: '#/components/schemas/Minderjarige'
        inOnderzoek:
          type: boolean
          description: Geeft aan dat de gezagsrelatie in onderzoek is.
      discriminator:
        propertyName: type
        mapping:
          GezamenlijkOuderlijkGezag: '#/components/schemas/GezamenlijkOuderlijkGezag'
          EenhoofdigOuderlijkGezag: '#/components/schemas/EenhoofdigOuderlijkGezag'
          GezamenlijkGezag: '#/components/schemas/GezamenlijkGezag'
          Voogdij: '#/components/schemas/Voogdij'
          TijdelijkGeenGezag: '#/components/schemas/TijdelijkGeenGezag'
          GezagNietTeBepalen: '#/components/schemas/GezagNietTeBepalen'
      example:
        type: GezamenlijkOuderlijkGezag
        ouders:
          - burgerservicenummer: '999998870'
          - burgerservicenummer: '999998882'
        minderjarige:
          burgerservicenummer: '999998894'
    Voornamen:
      description: |
        De verzameling namen voor de geslachtsnaam, gescheiden door spaties.
      type: string
      pattern: ^[a-zA-Z0-9À-ž \.\-\']{1,200}$
      maxLength: 200
      example: Pieter Jan
    Waardetabel:
      type: object
      properties:
        code:
          type: string
          pattern: ^[a-zA-Z0-9 \.]+$
          example: '6030'
        omschrijving:
          type: string
          pattern: ^[a-zA-Z0-9À-ž \'\.\-\(\),]{1,200}$
          example: Nederland
    AdellijkeTitelPredicaatSoort:
      type: string
      enum:
        - titel
        - predicaat
    AdellijkeTitelPredicaatType:
      description: |
        Wordt gevuld met waarden uit de landelijke tabel 'Adellijke titel/predicaat'. De property soort geeft aan of het een 'predicaat' of een 'titel' is.
      allOf:
        - $ref: '#/components/schemas/Waardetabel'
        - properties:
            soort:
              $ref: '#/components/schemas/AdellijkeTitelPredicaatSoort'
          example:
            code: JV
            omschrijving: jonkvrouw
            soort: predicaat
    Voorvoegsel:
      type: string
      pattern: ^[a-zA-Z \']{1,10}$
      maxLength: 10
      example: de
    Geslachtsnaam:
      type: string
      pattern: ^[a-zA-Z0-9À-ž \.\-\']{1,200}$
      description: |
        De achternaam van een persoon.
      example: Vries
    Naam:
      description: Benodigde properties om een volledige naam te construeren. Het construeren wordt gedaan door een andere service.
      type: object
      properties:
        voornamen:
          $ref: '#/components/schemas/Voornamen'
        adellijkeTitelPredicaat:
          $ref: '#/components/schemas/AdellijkeTitelPredicaatType'
        voorvoegsel:
          $ref: '#/components/schemas/Voorvoegsel'
        geslachtsnaam:
          $ref: '#/components/schemas/Geslachtsnaam'
    Geslachtsaanduiding:
      allOf:
        - $ref: '#/components/schemas/Waardetabel'
        - example:
            code: M
            omschrijving: man
    GezagOuder:
      type: object
      properties:
        burgerservicenummer:
          $ref: '#/components/schemas/Burgerservicenummer'
        naam:
          $ref: '#/components/schemas/Naam'
        geslacht:
          $ref: '#/components/schemas/Geslachtsaanduiding'
      required:
        - naam
    GezamenlijkOuderlijkGezag:
      allOf:
        - $ref: '#/components/schemas/Gezagsrelatie'
        - type: object
          properties:
            ouders:
              type: array
              items:
                $ref: '#/components/schemas/GezagOuder'
              minItems: 2
              maxItems: 2
    EenhoofdigOuderlijkGezag:
      allOf:
        - $ref: '#/components/schemas/Gezagsrelatie'
        - type: object
          properties:
            ouder:
              $ref: '#/components/schemas/GezagOuder'
      required:
        - ouder
    Derde:
      type: object
      required:
        - type
      properties:
        type:
          type: string
      discriminator:
        propertyName: type
        mapping:
          BekendeDerde: '#/components/schemas/BekendeDerde'
          OnbekendeDerde: '#/components/schemas/OnbekendeDerde'
    BekendeDerde:
      allOf:
        - $ref: '#/components/schemas/Derde'
        - type: object
          properties:
            burgerservicenummer:
              $ref: '#/components/schemas/Burgerservicenummer'
            naam:
              $ref: '#/components/schemas/Naam'
            geslacht:
              $ref: '#/components/schemas/Geslachtsaanduiding'
          required:
            - naam
    OnbekendeDerde:
      allOf:
        - $ref: '#/components/schemas/Derde'
    GezamenlijkGezag:
      allOf:
        - $ref: '#/components/schemas/Gezagsrelatie'
        - type: object
          properties:
            ouder:
              $ref: '#/components/schemas/GezagOuder'
            derde:
              $ref: '#/components/schemas/Derde'
    Voogdij:
      allOf:
        - $ref: '#/components/schemas/Gezagsrelatie'
        - type: object
          properties:
            derden:
              type: array
              items:
                $ref: '#/components/schemas/BekendeDerde'
              minItems: 0
              maxItems: 2
    Toelichting:
      type: string
      pattern: ^[a-zA-Z0-9À-ž \/\;\:\.\-\?\(\)]{1,400}$
    TijdelijkGeenGezag:
      allOf:
        - $ref: '#/components/schemas/Gezagsrelatie'
        - type: object
          properties:
            toelichting:
              $ref: '#/components/schemas/Toelichting'
      required:
        - toelichting
    GezagNietTeBepalen:
      allOf:
        - $ref: '#/components/schemas/Gezagsrelatie'
        - type: object
          properties:
            toelichting:
              $ref: '#/components/schemas/Toelichting'
      required:
        - toelichting
    GbaDatum:
      type: string
      pattern: ^[0-9]{8}$
      example: '20180700'
    GeboorteBasis:
      type: object
      properties:
        datum:
          $ref: '#/components/schemas/GbaDatum'
          description: |
            Datum waarop de persoon is geboren.
    Minderjarige:
      type: object
      properties:
        burgerservicenummer:
          $ref: '#/components/schemas/Burgerservicenummer'
        naam:
          $ref: '#/components/schemas/Naam'
        geslacht:
          $ref: '#/components/schemas/Geslachtsaanduiding'
        geboorte:
          $ref: '#/components/schemas/GeboorteBasis'
      required:
        - burgerservicenummer
        - naam
    Gezag:
      type: array
      items:
        $ref: '#/components/schemas/Gezagsrelatie'
      minItems: 0
