name: ci

on:
  push:
    paths:
      - src/**
      - features/**
      - .github/workflows/ci.yml
      - .docker/brp-api.yml
    branches:
      - master
    tags:
      - v*-proxy
      - v*-mock
  workflow_dispatch:

env:
  SOLUTION_FILE: BRP.sln
  API_COMPOSE_FILE: .docker/brp-api.yml
  PROXY_COMPOSE_FILE: .docker/brp-proxy.yml
  PROXY_IMAGE_NAME: ghcr.io/brp-api/haal-centraal-brp-bevragen-proxy
  MOCK_IMAGE_NAME: ghcr.io/brp-api/haal-centraal-brp-bevragen-gba-mock

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
            dotnet-version: 6.0.x
      - name: Restore dependencies
        run: dotnet restore $SOLUTION_FILE
      - name: Build
        run: dotnet build $SOLUTION_FILE --configuration Release --no-restore
      - name: Test
        run: dotnet test $SOLUTION_FILE --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
  publish:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v3
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      - name: Install dependencies
        run: npm ci
      - name: Cache container images
        uses: actions/cache@v2.1.8
        with:
          path: /var/lib/docker/
          key: local-docker-directory
      - name: Build container images
        run: docker compose build
      - name: Login to P5 Container Registry
        uses: docker/login-action@v2.1.0
        with:
          registry: haalcentraal.azurecr.io
          username: ${{ secrets.P5_CR_USER }}
          password: ${{ secrets.P5_CR_PWD }}
      - name: Start containers
        run: docker compose -f .docker/db-ci.yml -f $API_COMPOSE_FILE -f $PROXY_COMPOSE_FILE up -d
      - name: Wait for DB restart
        run: sleep 5s
        shell: bash
      - name: Validate functional specs
        run: |
          echo ${{ github.ref_name }}
          
          ./scripts/specs-verify.sh ${{ secrets.DBHOST }} ${{ secrets.DBUSER }} ${{ secrets.DBPASSWORD }} ${{ secrets.CLIENTID }} ${{ secrets.CLIENTSECRET }}

          node ./scripts/generate-cucumber-report.js ${{ vars.API_VERSION }} ${{ vars.PROXY_VERSION }}

          node ./scripts/parse-summary.js  ${{ vars.API_VERSION }} ${{ vars.PROXY_VERSION }}

          doCommit=false

          if [ -n "$(git status docs/features/*.html --porcelain)" ]; then
            git add docs/features/*.html
            doCommit=true
          fi

          if [ -n "$(git status docs/features/index.md --porcelain)" ]; then
            git add docs/features/index.md
            doCommit=true
          fi

          if [ $doCommit = true ]; then
            git config user.name "$GITHUB_ACTOR"
            git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
            git pull --ff-only
            git commit -m "commit functional test reports"
            git push
          fi

      - name: Stop containers
        if: always()
        run: docker compose -f .docker/db-ci.yml -f $API_COMPOSE_FILE -f $PROXY_COMPOSE_FILE down
      - uses: actions-ecosystem/action-regex-match@v2
        if: always()
        id: regex-match
        with:
          text: ${{ github.ref_name }}
          regex: '^v(.*)-(.*)$'
      - name: Login to GitHub Container Registry
        if: always() && steps.regex-match.outputs.match != ''
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: push proxy container images
        if: always() && steps.regex-match.outputs.group2 == 'proxy'
        run: |
          docker tag $PROXY_IMAGE_NAME:latest $PROXY_IMAGE_NAME:${{ steps.regex-match.outputs.group1 }}
          docker push $PROXY_IMAGE_NAME:latest
          docker push $PROXY_IMAGE_NAME:${{ steps.regex-match.outputs.group1 }}
      - name: push mock container images
        if: always() && steps.regex-match.outputs.group2 == 'mock'
        run: |
          docker tag $MOCK_IMAGE_NAME:latest $MOCK_IMAGE_NAME:${{ steps.regex-match.outputs.group1 }}
          docker push $MOCK_IMAGE_NAME:latest
          docker push $MOCK_IMAGE_NAME:${{ steps.regex-match.outputs.group1 }}
    