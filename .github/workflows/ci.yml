name: ci

on:
  push:
    paths:
      - src/**
      - features/**
      - .github/workflows/ci.yml
      - .docker/brp-api.yml
    branches:
      - develop
      - master
    tags:
      - v*-proxy
      - v*-mock
  workflow_dispatch:

env:
  DOTNET_VERSION: 6.0.x
  DOTNET_SOLUTION: BRP.sln
  NODE_VERSION: '20'
  CONTAINER_NAME: ghcr.io/brp-api/haal-centraal-brp-bevragen
  MOCK_CONTAINER_NAME: ghcr.io/brp-api/personen-mock
  COMPOSE_FILE_ARGUMENT: -f .docker/db-ci.yml -f .docker/brp-api.yml -f .docker/brp-proxy.yml -f .docker/brp-proxy-2-proxy.yml -f .docker/gezag-mock.yml
  DOCKER_API_FILE_PATH: .docker/brp-api.yml
  HUSKY: 0

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}
      - name: Restore dependencies
        run: dotnet restore ${{ env.DOTNET_SOLUTION }}
      - name: Build
        run: dotnet build ${{ env.DOTNET_SOLUTION }} --configuration Release --no-restore
      - name: Test
        run: dotnet test ${{ env.DOTNET_SOLUTION }} --configuration Release --no-build --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./coverage
  publish:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Install dependencies
        run: npm ci
      - name: Cache container images
        uses: actions/cache@v4.0.2
        with:
          path: /var/lib/docker/
          key: local-docker-directory
      - name: Build container images
        run: docker compose build
      - name: Login to P5 Container Registry
        uses: docker/login-action@v3.1.0
        with:
          registry: haalcentraal.azurecr.io
          username: ${{ secrets.P5_CR_USER }}
          password: ${{ secrets.P5_CR_PWD }}
      - name: Start containers
        run: docker compose ${{ env.COMPOSE_FILE_ARGUMENT }} up -d
      - name: Wait for DB restart
        run: sleep 5s
        shell: bash
      - name: Validate functional specs
        run: |
          ./scripts/specs-verify.sh ${{ secrets.DBHOST }} ${{ secrets.DBUSER }} ${{ secrets.DBPASSWORD }} ${{ secrets.CLIENTID }} ${{ secrets.CLIENTSECRET }}

      - name: Generate functional test reports
        if: always()
        run: |
          api_version="$(sed -n 's/image:.*:\(.*\)/\1/p' ${{ env.DOCKER_API_FILE_PATH}})"

          node ./scripts/generate-cucumber-report.js "$api_version" ${{ vars.PROXY_VERSION }}

          node ./scripts/parse-summary.js "$api_version" ${{ vars.PROXY_VERSION }}

          doCommit=false

          if [ -n "$(git status docs/features/*.html --porcelain)" ]; then
            search_string='2.5.1\/moment.min.js"'
            replace_string='2.5.1\/moment.min.js" integrity="sha512-r8lfwD+xE5L0FjDLicb4ZiF32sJqCAOnLN0nxQq5VW0t0nFEEiNIvTZ\/I9Su4ulGpDCfYjXsSFZsT9FpILp2+A==" crossorigin="anonymous" referrerpolicy="no-referrer"'
            sed -i "s/$search_string/$replace_string/" docs/features/*.html

            git add docs/features/*.html
            doCommit=true
          fi

          if [ -n "$(git status docs/features/index.md --porcelain)" ]; then
            git add docs/features/index.md
            doCommit=true
          fi

          if [ $doCommit = true ] && [ ${{ github.ref_type }} != 'tag' ]; then
            git config user.name "$GITHUB_ACTOR"
            git config user.email "$GITHUB_ACTOR@users.noreply.github.com"
            git pull --ff-only
            git commit -m "commit functional test reports"
            git push
          fi

      - name: Stop containers
        if: always()
        run: docker compose ${{ env.COMPOSE_FILE_ARGUMENT }} down
      - uses: actions-ecosystem/action-regex-match@v2.0.2
        if: always()
        id: regex-match
        with:
          text: ${{ github.ref_name }}
          regex: '^v(.*)-(.*)$'
      - name: Login to GitHub Container Registry
        if: always() && steps.regex-match.outputs.match != ''
        uses: docker/login-action@v2.1.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: push proxy container images
        if: always() && steps.regex-match.outputs.group2 == 'proxy'
        run: |
          docker tag ${{ env.CONTAINER_NAME }}-proxy:latest ${{ env.CONTAINER_NAME }}-proxy:${{ steps.regex-match.outputs.group1 }}
          docker push ${{ env.CONTAINER_NAME }}-proxy:latest
          docker push ${{ env.CONTAINER_NAME }}-proxy:${{ steps.regex-match.outputs.group1 }}
      - name: push mock container images
        if: always() && steps.regex-match.outputs.group2 == 'mock'
        run: |
          docker tag ${{ env.MOCK_CONTAINER_NAME }}:latest ${{ env.MOCK_CONTAINER_NAME }}:${{ steps.regex-match.outputs.group1 }}
          docker push ${{ env.MOCK_CONTAINER_NAME }}:latest
          docker push ${{ env.MOCK_CONTAINER_NAME }}:${{ steps.regex-match.outputs.group1 }}
  